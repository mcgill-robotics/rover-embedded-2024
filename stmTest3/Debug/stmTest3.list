
stmTest3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000084c  08007b78  08007b78  00017b78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083c4  080083c4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080083c4  080083c4  000183c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083cc  080083cc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083cc  080083cc  000183cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083d0  080083d0  000183d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080083d4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000007c  08008450  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08008450  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   000151cf  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023e8  00000000  00000000  000352be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  000376a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bb5  00000000  00000000  000385a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026cd4  00000000  00000000  0003915d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011a4e  00000000  00000000  0005fe31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1456  00000000  00000000  0007187f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000050ac  00000000  00000000  00152cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00157d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b60 	.word	0x08007b60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08007b60 	.word	0x08007b60

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <_Z5printPKc>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
void print(const char *s)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  //    #ifdef PRINT
  HAL_StatusTypeDef code = HAL_UART_Transmit(&huart2, (uint8_t *)s, strlen(s), HAL_MAX_DELAY);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff f98f 	bl	80001d0 <strlen>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <_Z5printPKc+0x2c>)
 8000ebe:	f003 faf5 	bl	80044ac <HAL_UART_Transmit>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	73fb      	strb	r3, [r7, #15]
  //    #endif
}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200000e4 	.word	0x200000e4

08000ed4 <printf>:
int printf(const char *s, ...)
{
 8000ed4:	b40f      	push	{r0, r1, r2, r3}
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b0c2      	sub	sp, #264	; 0x108
 8000eda:	af00      	add	r7, sp, #0
  char buffer[256];
  //    #ifdef PRINT
  va_list args;
  va_start(args, s);
 8000edc:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8000ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000ee4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000ee8:	601a      	str	r2, [r3, #0]
  vsprintf(buffer, s, args);
 8000eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000eee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000ef2:	f107 0008 	add.w	r0, r7, #8
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8000efc:	f005 fbba 	bl	8006674 <vsiprintf>
  perror(buffer);
 8000f00:	f107 0308 	add.w	r3, r7, #8
 8000f04:	4618      	mov	r0, r3
 8000f06:	f005 fb53 	bl	80065b0 <perror>
  print(buffer);
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ffc8 	bl	8000ea4 <_Z5printPKc>
  va_end(args);
  //    #endif
  return strlen(buffer);
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff f959 	bl	80001d0 <strlen>
 8000f1e:	4603      	mov	r3, r0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000f26:	46bd      	mov	sp, r7
 8000f28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f2c:	b004      	add	sp, #16
 8000f2e:	4770      	bx	lr

08000f30 <_ZSt4acosIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    acos(_Tp __x)
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    { return __builtin_acos(__x); }
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff faf3 	bl	8000524 <__aeabi_i2d>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	460b      	mov	r3, r1
 8000f42:	ec43 2b10 	vmov	d0, r2, r3
 8000f46:	f003 ffab 	bl	8004ea0 <acos>
 8000f4a:	eeb0 7a40 	vmov.f32	s14, s0
 8000f4e:	eef0 7a60 	vmov.f32	s15, s1
 8000f52:	eeb0 0a47 	vmov.f32	s0, s14
 8000f56:	eef0 0a67 	vmov.f32	s1, s15
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f60:	b5b0      	push	{r4, r5, r7, lr}
 8000f62:	b0a2      	sub	sp, #136	; 0x88
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f66:	f000 fde7 	bl	8001b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6a:	f000 fa19 	bl	80013a0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6e:	f000 fb3b 	bl	80015e8 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000f72:	f000 fb05 	bl	8001580 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 8000f76:	f000 fa73 	bl	8001460 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  HAL_Init();
 8000f7a:	f000 fddd 	bl	8001b38 <HAL_Init>
  SystemClock_Config();
 8000f7e:	f000 fa0f 	bl	80013a0 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8000f82:	f000 fb31 	bl	80015e8 <_ZL12MX_GPIO_Initv>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f86:	2100      	movs	r1, #0
 8000f88:	48b3      	ldr	r0, [pc, #716]	; (8001258 <main+0x2f8>)
 8000f8a:	f002 fb7d 	bl	8003688 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int counter = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  while (1){
	rover_coords[0] =0;
 8000f94:	f04f 0300 	mov.w	r3, #0
 8000f98:	61bb      	str	r3, [r7, #24]
    rover_coords[1] =0 ;
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]


	antenna_heading_params[0]=0;
 8000fa0:	f04f 0300 	mov.w	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
	antenna_heading_params[1]=0;
 8000fa6:	f04f 0300 	mov.w	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
	antenna_heading_params[2]=0;
 8000fac:	f04f 0300 	mov.w	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
	antenna_heading_params[3]=500;
 8000fb2:	4baa      	ldr	r3, [pc, #680]	; (800125c <main+0x2fc>)
 8000fb4:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 10; i++) {
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000fbc:	e1ca      	b.n	8001354 <main+0x3f4>
	    rover_coords[0] = -10000+ rand()% 20001;
 8000fbe:	f005 f971 	bl	80062a4 <rand>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	4ba6      	ldr	r3, [pc, #664]	; (8001260 <main+0x300>)
 8000fc6:	fb83 1302 	smull	r1, r3, r3, r2
 8000fca:	1299      	asrs	r1, r3, #10
 8000fcc:	17d3      	asrs	r3, r2, #31
 8000fce:	1acb      	subs	r3, r1, r3
 8000fd0:	f644 6121 	movw	r1, #20001	; 0x4e21
 8000fd4:	fb01 f303 	mul.w	r3, r1, r3
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8000fde:	3b10      	subs	r3, #16
 8000fe0:	ee07 3a90 	vmov	s15, r3
 8000fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe8:	edc7 7a06 	vstr	s15, [r7, #24]
	    rover_coords[1] = rand()% 1001;
 8000fec:	f005 f95a 	bl	80062a4 <rand>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4a9c      	ldr	r2, [pc, #624]	; (8001264 <main+0x304>)
 8000ff4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff8:	1211      	asrs	r1, r2, #8
 8000ffa:	17da      	asrs	r2, r3, #31
 8000ffc:	1a8a      	subs	r2, r1, r2
 8000ffe:	f240 31e9 	movw	r1, #1001	; 0x3e9
 8001002:	fb01 f202 	mul.w	r2, r1, r2
 8001006:	1a9a      	subs	r2, r3, r2
 8001008:	ee07 2a90 	vmov	s15, r2
 800100c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001010:	edc7 7a07 	vstr	s15, [r7, #28]
	    double new_latitude_diff = rover_coords[0] - antenna_heading_params[0];
 8001014:	ed97 7a06 	vldr	s14, [r7, #24]
 8001018:	edd7 7a02 	vldr	s15, [r7, #8]
 800101c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001020:	ee17 0a90 	vmov	r0, s15
 8001024:	f7ff fa90 	bl	8000548 <__aeabi_f2d>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	        double new_longitude_diff = rover_coords[1] - antenna_heading_params[1];
 8001030:	ed97 7a07 	vldr	s14, [r7, #28]
 8001034:	edd7 7a03 	vldr	s15, [r7, #12]
 8001038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800103c:	ee17 0a90 	vmov	r0, s15
 8001040:	f7ff fa82 	bl	8000548 <__aeabi_f2d>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	        double initial_latitude_diff = antenna_heading_params[2] - antenna_heading_params[0];
 800104c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001050:	edd7 7a02 	vldr	s15, [r7, #8]
 8001054:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001058:	ee17 0a90 	vmov	r0, s15
 800105c:	f7ff fa74 	bl	8000548 <__aeabi_f2d>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	        double initial_longitude_diff = antenna_heading_params[3] - antenna_heading_params[1];
 8001068:	ed97 7a05 	vldr	s14, [r7, #20]
 800106c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001074:	ee17 0a90 	vmov	r0, s15
 8001078:	f7ff fa66 	bl	8000548 <__aeabi_f2d>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	        double new_distance = sqrt(pow(new_latitude_diff, 2) + pow(new_longitude_diff, 2)); // new distance between the antenna and the rover
 8001084:	2002      	movs	r0, #2
 8001086:	ed97 0b1c 	vldr	d0, [r7, #112]	; 0x70
 800108a:	f000 fb3c 	bl	8001706 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800108e:	ec55 4b10 	vmov	r4, r5, d0
 8001092:	2002      	movs	r0, #2
 8001094:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8001098:	f000 fb35 	bl	8001706 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800109c:	ec53 2b10 	vmov	r2, r3, d0
 80010a0:	4620      	mov	r0, r4
 80010a2:	4629      	mov	r1, r5
 80010a4:	f7ff f8f2 	bl	800028c <__adddf3>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	ec43 2b17 	vmov	d7, r2, r3
 80010b0:	eeb0 0a47 	vmov.f32	s0, s14
 80010b4:	eef0 0a67 	vmov.f32	s1, s15
 80010b8:	f003 ff96 	bl	8004fe8 <sqrt>
 80010bc:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
	        double initial_distance = sqrt(pow(initial_latitude_diff, 2) + pow(initial_longitude_diff, 2)); // initial distance between the antenna and the rover
 80010c0:	2002      	movs	r0, #2
 80010c2:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80010c6:	f000 fb1e 	bl	8001706 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80010ca:	ec55 4b10 	vmov	r4, r5, d0
 80010ce:	2002      	movs	r0, #2
 80010d0:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 80010d4:	f000 fb17 	bl	8001706 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80010d8:	ec53 2b10 	vmov	r2, r3, d0
 80010dc:	4620      	mov	r0, r4
 80010de:	4629      	mov	r1, r5
 80010e0:	f7ff f8d4 	bl	800028c <__adddf3>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	ec43 2b17 	vmov	d7, r2, r3
 80010ec:	eeb0 0a47 	vmov.f32	s0, s14
 80010f0:	eef0 0a67 	vmov.f32	s1, s15
 80010f4:	f003 ff78 	bl	8004fe8 <sqrt>
 80010f8:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48

	        // Normalizing the angle
	        double dot_product_initial_new_distance_diff = initial_latitude_diff * new_latitude_diff + initial_longitude_diff * new_longitude_diff;
 80010fc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001100:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001104:	f7ff fa78 	bl	80005f8 <__aeabi_dmul>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4614      	mov	r4, r2
 800110e:	461d      	mov	r5, r3
 8001110:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001114:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001118:	f7ff fa6e 	bl	80005f8 <__aeabi_dmul>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	f7ff f8b2 	bl	800028c <__adddf3>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	        double divider =  new_distance * initial_distance;
 8001130:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001134:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001138:	f7ff fa5e 	bl	80005f8 <__aeabi_dmul>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	        double theta_deg = 0;
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	f04f 0300 	mov.w	r3, #0
 800114c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	        double sin_theta = 0;
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	f04f 0300 	mov.w	r3, #0
 8001158:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	        if(divider > 1e-16){
 800115c:	a33c      	add	r3, pc, #240	; (adr r3, 8001250 <main+0x2f0>)
 800115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001162:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001166:	f7ff fcd7 	bl	8000b18 <__aeabi_dcmpgt>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d053      	beq.n	8001218 <main+0x2b8>
	            double theta_rad = acos(dot_product_initial_new_distance_diff/(divider));
 8001170:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001174:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001178:	f7ff fb68 	bl	800084c <__aeabi_ddiv>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	ec43 2b17 	vmov	d7, r2, r3
 8001184:	eeb0 0a47 	vmov.f32	s0, s14
 8001188:	eef0 0a67 	vmov.f32	s1, s15
 800118c:	f003 fe88 	bl	8004ea0 <acos>
 8001190:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	            theta_deg = theta_rad * 180.0/(acos(0)*2);
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b33      	ldr	r3, [pc, #204]	; (8001268 <main+0x308>)
 800119a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800119e:	f7ff fa2b 	bl	80005f8 <__aeabi_dmul>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4614      	mov	r4, r2
 80011a8:	461d      	mov	r5, r3
 80011aa:	2000      	movs	r0, #0
 80011ac:	f7ff fec0 	bl	8000f30 <_ZSt4acosIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80011b0:	ec51 0b10 	vmov	r0, r1, d0
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	f7ff f868 	bl	800028c <__adddf3>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4620      	mov	r0, r4
 80011c2:	4629      	mov	r1, r5
 80011c4:	f7ff fb42 	bl	800084c <__aeabi_ddiv>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	            double cross_product = new_latitude_diff * initial_longitude_diff - initial_latitude_diff * new_longitude_diff;
 80011d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80011d4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80011d8:	f7ff fa0e 	bl	80005f8 <__aeabi_dmul>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4614      	mov	r4, r2
 80011e2:	461d      	mov	r5, r3
 80011e4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80011e8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80011ec:	f7ff fa04 	bl	80005f8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4620      	mov	r0, r4
 80011f6:	4629      	mov	r1, r5
 80011f8:	f7ff f846 	bl	8000288 <__aeabi_dsub>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	e9c7 2308 	strd	r2, r3, [r7, #32]
	            sin_theta = cross_product/ divider;
 8001204:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001208:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800120c:	f7ff fb1e 	bl	800084c <__aeabi_ddiv>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	        }
	        printf("test\r\n");
 8001218:	4814      	ldr	r0, [pc, #80]	; (800126c <main+0x30c>)
 800121a:	f7ff fe5b 	bl	8000ed4 <printf>

	        if (counter==0)
 800121e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001222:	2b00      	cmp	r3, #0
 8001224:	d108      	bne.n	8001238 <main+0x2d8>
	        {
	        	counter++;
 8001226:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800122a:	3301      	adds	r3, #1
 800122c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	        	servo_angle[0]=0;
 8001230:	f04f 0300 	mov.w	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	e022      	b.n	800127e <main+0x31e>

	        } else if(counter==1)
 8001238:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800123c:	2b01      	cmp	r3, #1
 800123e:	d119      	bne.n	8001274 <main+0x314>
	        {
	        	counter++;
 8001240:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001244:	3301      	adds	r3, #1
 8001246:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				servo_angle[0]=110;
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <main+0x310>)
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	e016      	b.n	800127e <main+0x31e>
 8001250:	97d889bc 	.word	0x97d889bc
 8001254:	3c9cd2b2 	.word	0x3c9cd2b2
 8001258:	20000098 	.word	0x20000098
 800125c:	43fa0000 	.word	0x43fa0000
 8001260:	0d1b4683 	.word	0x0d1b4683
 8001264:	4178749f 	.word	0x4178749f
 8001268:	40668000 	.word	0x40668000
 800126c:	08007b78 	.word	0x08007b78
 8001270:	42dc0000 	.word	0x42dc0000
	        }
	        else {
	        	counter = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	        	servo_angle[0]=220;
 800127a:	4b39      	ldr	r3, [pc, #228]	; (8001360 <main+0x400>)
 800127c:	607b      	str	r3, [r7, #4]
	            printf("%d\r\n",(int)(100*((servo_angle[0]/servo_angle_range*1850)+500)));
	            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,(servo_angle[0]/servo_angle_range*1850)+min_pulse_width);
	        }
	        else{
	        	//servo_angle[0] = (float)(90 - theta_deg);
	        	printf("x %d\r\n",(int)rover_coords[0]);
 800127e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001282:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001286:	ee17 1a90 	vmov	r1, s15
 800128a:	4836      	ldr	r0, [pc, #216]	; (8001364 <main+0x404>)
 800128c:	f7ff fe22 	bl	8000ed4 <printf>
	        	printf("y %d\r\n",(int)rover_coords[1]);
 8001290:	edd7 7a07 	vldr	s15, [r7, #28]
 8001294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001298:	ee17 1a90 	vmov	r1, s15
 800129c:	4832      	ldr	r0, [pc, #200]	; (8001368 <main+0x408>)
 800129e:	f7ff fe19 	bl	8000ed4 <printf>
	         	printf("theta_deg %d\r\n", (int)(theta_deg * 100));
 80012a2:	f04f 0200 	mov.w	r2, #0
 80012a6:	4b31      	ldr	r3, [pc, #196]	; (800136c <main+0x40c>)
 80012a8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80012ac:	f7ff f9a4 	bl	80005f8 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f7ff fc4e 	bl	8000b58 <__aeabi_d2iz>
 80012bc:	4603      	mov	r3, r0
 80012be:	4619      	mov	r1, r3
 80012c0:	482b      	ldr	r0, [pc, #172]	; (8001370 <main+0x410>)
 80012c2:	f7ff fe07 	bl	8000ed4 <printf>
	           	printf("actual rover angle %d\r\n", (int)(servo_angle[0] * 100));
 80012c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ca:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001374 <main+0x414>
 80012ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d6:	ee17 1a90 	vmov	r1, s15
 80012da:	4827      	ldr	r0, [pc, #156]	; (8001378 <main+0x418>)
 80012dc:	f7ff fdfa 	bl	8000ed4 <printf>
	        	printf("pwm %d\r\n",(int)(100*((servo_angle[0]/270*2000)+500)));
 80012e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80012e4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800137c <main+0x41c>
 80012e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ec:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001380 <main+0x420>
 80012f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001384 <main+0x424>
 80012f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012fc:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001374 <main+0x414>
 8001300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001308:	ee17 1a90 	vmov	r1, s15
 800130c:	481e      	ldr	r0, [pc, #120]	; (8001388 <main+0x428>)
 800130e:	f7ff fde1 	bl	8000ed4 <printf>
	        	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,(servo_angle[0]/servo_angle_range*1850)+min_pulse_width);
 8001312:	ed97 7a01 	vldr	s14, [r7, #4]
 8001316:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800138c <main+0x42c>
 800131a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800131e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001390 <main+0x430>
 8001322:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001326:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001394 <main+0x434>
 800132a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800132e:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <main+0x438>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001336:	ee17 2a90 	vmov	r2, s15
 800133a:	635a      	str	r2, [r3, #52]	; 0x34

	        }
	        HAL_Delay(6000);
 800133c:	f241 7070 	movw	r0, #6000	; 0x1770
 8001340:	f000 fc76 	bl	8001c30 <HAL_Delay>
	    printf("moved 10 steps\n");
 8001344:	4815      	ldr	r0, [pc, #84]	; (800139c <main+0x43c>)
 8001346:	f7ff fdc5 	bl	8000ed4 <printf>
	for (int i = 0; i < 10; i++) {
 800134a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800134e:	3301      	adds	r3, #1
 8001350:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001354:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001358:	2b09      	cmp	r3, #9
 800135a:	f77f ae30 	ble.w	8000fbe <main+0x5e>
*/
    
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800135e:	e619      	b.n	8000f94 <main+0x34>
 8001360:	435c0000 	.word	0x435c0000
 8001364:	08007b80 	.word	0x08007b80
 8001368:	08007b88 	.word	0x08007b88
 800136c:	40590000 	.word	0x40590000
 8001370:	08007b90 	.word	0x08007b90
 8001374:	42c80000 	.word	0x42c80000
 8001378:	08007ba0 	.word	0x08007ba0
 800137c:	43870000 	.word	0x43870000
 8001380:	44fa0000 	.word	0x44fa0000
 8001384:	43fa0000 	.word	0x43fa0000
 8001388:	08007bb8 	.word	0x08007bb8
 800138c:	435c0000 	.word	0x435c0000
 8001390:	44e74000 	.word	0x44e74000
 8001394:	43c88000 	.word	0x43c88000
 8001398:	20000098 	.word	0x20000098
 800139c:	08007bc4 	.word	0x08007bc4

080013a0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b096      	sub	sp, #88	; 0x58
 80013a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	2244      	movs	r2, #68	; 0x44
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f005 f96a 	bl	8006688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b4:	463b      	mov	r3, r7
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013c6:	f000 fedd 	bl	8002184 <HAL_PWREx_ControlVoltageScaling>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	bf14      	ite	ne
 80013d0:	2301      	movne	r3, #1
 80013d2:	2300      	moveq	r3, #0
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80013da:	f000 f98f 	bl	80016fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013de:	2302      	movs	r3, #2
 80013e0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013e8:	2310      	movs	r3, #16
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ec:	2302      	movs	r3, #2
 80013ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013f0:	2302      	movs	r3, #2
 80013f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013f4:	2301      	movs	r3, #1
 80013f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80013f8:	230a      	movs	r3, #10
 80013fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013fc:	2307      	movs	r3, #7
 80013fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001400:	2302      	movs	r3, #2
 8001402:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001404:	2302      	movs	r3, #2
 8001406:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4618      	mov	r0, r3
 800140e:	f000 ff0f 	bl	8002230 <HAL_RCC_OscConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	bf14      	ite	ne
 8001418:	2301      	movne	r3, #1
 800141a:	2300      	moveq	r3, #0
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8001422:	f000 f96b 	bl	80016fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001426:	230f      	movs	r3, #15
 8001428:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142a:	2303      	movs	r3, #3
 800142c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800143a:	463b      	mov	r3, r7
 800143c:	2104      	movs	r1, #4
 800143e:	4618      	mov	r0, r3
 8001440:	f001 fb0a 	bl	8002a58 <HAL_RCC_ClockConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	bf14      	ite	ne
 800144a:	2301      	movne	r3, #1
 800144c:	2300      	moveq	r3, #0
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8001454:	f000 f952 	bl	80016fc <Error_Handler>
  }
}
 8001458:	bf00      	nop
 800145a:	3758      	adds	r7, #88	; 0x58
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08e      	sub	sp, #56	; 0x38
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001480:	463b      	mov	r3, r7
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]
 800148e:	615a      	str	r2, [r3, #20]
 8001490:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001492:	4b3a      	ldr	r3, [pc, #232]	; (800157c <_ZL12MX_TIM2_Initv+0x11c>)
 8001494:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001498:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 800149a:	4b38      	ldr	r3, [pc, #224]	; (800157c <_ZL12MX_TIM2_Initv+0x11c>)
 800149c:	224f      	movs	r2, #79	; 0x4f
 800149e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a0:	4b36      	ldr	r3, [pc, #216]	; (800157c <_ZL12MX_TIM2_Initv+0x11c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 80014a6:	4b35      	ldr	r3, [pc, #212]	; (800157c <_ZL12MX_TIM2_Initv+0x11c>)
 80014a8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80014ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ae:	4b33      	ldr	r3, [pc, #204]	; (800157c <_ZL12MX_TIM2_Initv+0x11c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014b4:	4b31      	ldr	r3, [pc, #196]	; (800157c <_ZL12MX_TIM2_Initv+0x11c>)
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014ba:	4830      	ldr	r0, [pc, #192]	; (800157c <_ZL12MX_TIM2_Initv+0x11c>)
 80014bc:	f002 f82c 	bl	8003518 <HAL_TIM_Base_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	bf14      	ite	ne
 80014c6:	2301      	movne	r3, #1
 80014c8:	2300      	moveq	r3, #0
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 80014d0:	f000 f914 	bl	80016fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014de:	4619      	mov	r1, r3
 80014e0:	4826      	ldr	r0, [pc, #152]	; (800157c <_ZL12MX_TIM2_Initv+0x11c>)
 80014e2:	f002 fac3 	bl	8003a6c <HAL_TIM_ConfigClockSource>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	bf14      	ite	ne
 80014ec:	2301      	movne	r3, #1
 80014ee:	2300      	moveq	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 80014f6:	f000 f901 	bl	80016fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014fa:	4820      	ldr	r0, [pc, #128]	; (800157c <_ZL12MX_TIM2_Initv+0x11c>)
 80014fc:	f002 f863 	bl	80035c6 <HAL_TIM_PWM_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	bf14      	ite	ne
 8001506:	2301      	movne	r3, #1
 8001508:	2300      	moveq	r3, #0
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 8001510:	f000 f8f4 	bl	80016fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	4619      	mov	r1, r3
 8001522:	4816      	ldr	r0, [pc, #88]	; (800157c <_ZL12MX_TIM2_Initv+0x11c>)
 8001524:	f002 ff0e 	bl	8004344 <HAL_TIMEx_MasterConfigSynchronization>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	bf14      	ite	ne
 800152e:	2301      	movne	r3, #1
 8001530:	2300      	moveq	r3, #0
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8001538:	f000 f8e0 	bl	80016fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800153c:	2360      	movs	r3, #96	; 0x60
 800153e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800154c:	463b      	mov	r3, r7
 800154e:	2200      	movs	r2, #0
 8001550:	4619      	mov	r1, r3
 8001552:	480a      	ldr	r0, [pc, #40]	; (800157c <_ZL12MX_TIM2_Initv+0x11c>)
 8001554:	f002 f976 	bl	8003844 <HAL_TIM_PWM_ConfigChannel>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	bf14      	ite	ne
 800155e:	2301      	movne	r3, #1
 8001560:	2300      	moveq	r3, #0
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <_ZL12MX_TIM2_Initv+0x10c>
  {
    Error_Handler();
 8001568:	f000 f8c8 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800156c:	4803      	ldr	r0, [pc, #12]	; (800157c <_ZL12MX_TIM2_Initv+0x11c>)
 800156e:	f000 f929 	bl	80017c4 <HAL_TIM_MspPostInit>

}
 8001572:	bf00      	nop
 8001574:	3738      	adds	r7, #56	; 0x38
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000098 	.word	0x20000098

08001580 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001586:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <_ZL19MX_USART2_UART_Initv+0x64>)
 8001588:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800158c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001590:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 80015a6:	220c      	movs	r2, #12
 80015a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 80015be:	2200      	movs	r2, #0
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c2:	4807      	ldr	r0, [pc, #28]	; (80015e0 <_ZL19MX_USART2_UART_Initv+0x60>)
 80015c4:	f002 ff24 	bl	8004410 <HAL_UART_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	bf14      	ite	ne
 80015ce:	2301      	movne	r3, #1
 80015d0:	2300      	moveq	r3, #0
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80015d8:	f000 f890 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	200000e4 	.word	0x200000e4
 80015e4:	40004400 	.word	0x40004400

080015e8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fe:	4b3c      	ldr	r3, [pc, #240]	; (80016f0 <_ZL12MX_GPIO_Initv+0x108>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	4a3b      	ldr	r2, [pc, #236]	; (80016f0 <_ZL12MX_GPIO_Initv+0x108>)
 8001604:	f043 0304 	orr.w	r3, r3, #4
 8001608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160a:	4b39      	ldr	r3, [pc, #228]	; (80016f0 <_ZL12MX_GPIO_Initv+0x108>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001616:	4b36      	ldr	r3, [pc, #216]	; (80016f0 <_ZL12MX_GPIO_Initv+0x108>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	4a35      	ldr	r2, [pc, #212]	; (80016f0 <_ZL12MX_GPIO_Initv+0x108>)
 800161c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001622:	4b33      	ldr	r3, [pc, #204]	; (80016f0 <_ZL12MX_GPIO_Initv+0x108>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	4b30      	ldr	r3, [pc, #192]	; (80016f0 <_ZL12MX_GPIO_Initv+0x108>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001632:	4a2f      	ldr	r2, [pc, #188]	; (80016f0 <_ZL12MX_GPIO_Initv+0x108>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163a:	4b2d      	ldr	r3, [pc, #180]	; (80016f0 <_ZL12MX_GPIO_Initv+0x108>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <_ZL12MX_GPIO_Initv+0x108>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	4a29      	ldr	r2, [pc, #164]	; (80016f0 <_ZL12MX_GPIO_Initv+0x108>)
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001652:	4b27      	ldr	r3, [pc, #156]	; (80016f0 <_ZL12MX_GPIO_Initv+0x108>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	21b0      	movs	r1, #176	; 0xb0
 8001662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001666:	f000 fd67 	bl	8002138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001670:	4820      	ldr	r0, [pc, #128]	; (80016f4 <_ZL12MX_GPIO_Initv+0x10c>)
 8001672:	f000 fd61 	bl	8002138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001676:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800167a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800167c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	481a      	ldr	r0, [pc, #104]	; (80016f8 <_ZL12MX_GPIO_Initv+0x110>)
 800168e:	f000 fbd9 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8001692:	23b0      	movs	r3, #176	; 0xb0
 8001694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001696:	2301      	movs	r3, #1
 8001698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ac:	f000 fbca 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80016b0:	2340      	movs	r3, #64	; 0x40
 80016b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b8:	2301      	movs	r3, #1
 80016ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4619      	mov	r1, r3
 80016c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c6:	f000 fbbd 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80016ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d0:	2301      	movs	r3, #1
 80016d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4619      	mov	r1, r3
 80016e2:	4804      	ldr	r0, [pc, #16]	; (80016f4 <_ZL12MX_GPIO_Initv+0x10c>)
 80016e4:	f000 fbae 	bl	8001e44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016e8:	bf00      	nop
 80016ea:	3728      	adds	r7, #40	; 0x28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000
 80016f4:	48000400 	.word	0x48000400
 80016f8:	48000800 	.word	0x48000800

080016fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001700:	b672      	cpsid	i
}
 8001702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001704:	e7fe      	b.n	8001704 <Error_Handler+0x8>

08001706 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	ed87 0b02 	vstr	d0, [r7, #8]
 8001710:	6078      	str	r0, [r7, #4]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7fe ff06 	bl	8000524 <__aeabi_i2d>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	ec43 2b11 	vmov	d1, r2, r3
 8001720:	ed97 0b02 	vldr	d0, [r7, #8]
 8001724:	f003 fbf0 	bl	8004f08 <pow>
 8001728:	eeb0 7a40 	vmov.f32	s14, s0
 800172c:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001730:	eeb0 0a47 	vmov.f32	s0, s14
 8001734:	eef0 0a67 	vmov.f32	s1, s15
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <HAL_MspInit+0x44>)
 8001748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174a:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <HAL_MspInit+0x44>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6613      	str	r3, [r2, #96]	; 0x60
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <HAL_MspInit+0x44>)
 8001754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_MspInit+0x44>)
 8001760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001762:	4a08      	ldr	r2, [pc, #32]	; (8001784 <HAL_MspInit+0x44>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001768:	6593      	str	r3, [r2, #88]	; 0x58
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_MspInit+0x44>)
 800176c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000

08001788 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001798:	d10b      	bne.n	80017b2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_TIM_Base_MspInit+0x38>)
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179e:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <HAL_TIM_Base_MspInit+0x38>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6593      	str	r3, [r2, #88]	; 0x58
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_TIM_Base_MspInit+0x38>)
 80017a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017b2:	bf00      	nop
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000

080017c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e4:	d11c      	bne.n	8001820 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <HAL_TIM_MspPostInit+0x64>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ea:	4a0f      	ldr	r2, [pc, #60]	; (8001828 <HAL_TIM_MspPostInit+0x64>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <HAL_TIM_MspPostInit+0x64>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017fe:	2301      	movs	r3, #1
 8001800:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800180e:	2301      	movs	r3, #1
 8001810:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001812:	f107 030c 	add.w	r3, r7, #12
 8001816:	4619      	mov	r1, r3
 8001818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181c:	f000 fb12 	bl	8001e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001820:	bf00      	nop
 8001822:	3720      	adds	r7, #32
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40021000 	.word	0x40021000

0800182c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b0a2      	sub	sp, #136	; 0x88
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2260      	movs	r2, #96	; 0x60
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f004 ff1b 	bl	8006688 <memset>
  if(huart->Instance==USART2)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a20      	ldr	r2, [pc, #128]	; (80018d8 <HAL_UART_MspInit+0xac>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d138      	bne.n	80018ce <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800185c:	2302      	movs	r3, #2
 800185e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001860:	2300      	movs	r3, #0
 8001862:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4618      	mov	r0, r3
 800186a:	f001 fb19 	bl	8002ea0 <HAL_RCCEx_PeriphCLKConfig>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001874:	f7ff ff42 	bl	80016fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001878:	4b18      	ldr	r3, [pc, #96]	; (80018dc <HAL_UART_MspInit+0xb0>)
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	4a17      	ldr	r2, [pc, #92]	; (80018dc <HAL_UART_MspInit+0xb0>)
 800187e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001882:	6593      	str	r3, [r2, #88]	; 0x58
 8001884:	4b15      	ldr	r3, [pc, #84]	; (80018dc <HAL_UART_MspInit+0xb0>)
 8001886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_UART_MspInit+0xb0>)
 8001892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001894:	4a11      	ldr	r2, [pc, #68]	; (80018dc <HAL_UART_MspInit+0xb0>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_UART_MspInit+0xb0>)
 800189e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018a8:	230c      	movs	r3, #12
 80018aa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b4:	2303      	movs	r3, #3
 80018b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ba:	2307      	movs	r3, #7
 80018bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018c4:	4619      	mov	r1, r3
 80018c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ca:	f000 fabb 	bl	8001e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018ce:	bf00      	nop
 80018d0:	3788      	adds	r7, #136	; 0x88
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40004400 	.word	0x40004400
 80018dc:	40021000 	.word	0x40021000

080018e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <NMI_Handler+0x4>

080018e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <HardFault_Handler+0x4>

080018ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <MemManage_Handler+0x4>

080018f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <BusFault_Handler+0x4>

080018f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <UsageFault_Handler+0x4>

080018fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800192c:	f000 f960 	bl	8001bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}

08001934 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return 1;
 8001938:	2301      	movs	r3, #1
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <_kill>:

int _kill(int pid, int sig)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800194e:	f005 f8d1 	bl	8006af4 <__errno>
 8001952:	4603      	mov	r3, r0
 8001954:	2216      	movs	r2, #22
 8001956:	601a      	str	r2, [r3, #0]
  return -1;
 8001958:	f04f 33ff 	mov.w	r3, #4294967295
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <_exit>:

void _exit (int status)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800196c:	f04f 31ff 	mov.w	r1, #4294967295
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff ffe7 	bl	8001944 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001976:	e7fe      	b.n	8001976 <_exit+0x12>

08001978 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	e00a      	b.n	80019a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800198a:	f3af 8000 	nop.w
 800198e:	4601      	mov	r1, r0
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	60ba      	str	r2, [r7, #8]
 8001996:	b2ca      	uxtb	r2, r1
 8001998:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3301      	adds	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dbf0      	blt.n	800198a <_read+0x12>
  }

  return len;
 80019a8:	687b      	ldr	r3, [r7, #4]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	e009      	b.n	80019d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	60ba      	str	r2, [r7, #8]
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	3301      	adds	r3, #1
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	429a      	cmp	r2, r3
 80019de:	dbf1      	blt.n	80019c4 <_write+0x12>
  }
  return len;
 80019e0:	687b      	ldr	r3, [r7, #4]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <_close>:

int _close(int file)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a12:	605a      	str	r2, [r3, #4]
  return 0;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <_isatty>:

int _isatty(int file)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a2a:	2301      	movs	r3, #1
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a5c:	4a14      	ldr	r2, [pc, #80]	; (8001ab0 <_sbrk+0x5c>)
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <_sbrk+0x60>)
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a68:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <_sbrk+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d102      	bne.n	8001a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <_sbrk+0x64>)
 8001a72:	4a12      	ldr	r2, [pc, #72]	; (8001abc <_sbrk+0x68>)
 8001a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <_sbrk+0x64>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d207      	bcs.n	8001a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a84:	f005 f836 	bl	8006af4 <__errno>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a92:	e009      	b.n	8001aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <_sbrk+0x64>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a9a:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <_sbrk+0x64>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <_sbrk+0x64>)
 8001aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20010000 	.word	0x20010000
 8001ab4:	00000400 	.word	0x00000400
 8001ab8:	2000016c 	.word	0x2000016c
 8001abc:	200002c0 	.word	0x200002c0

08001ac0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <SystemInit+0x20>)
 8001ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aca:	4a05      	ldr	r2, [pc, #20]	; (8001ae0 <SystemInit+0x20>)
 8001acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ae8:	f7ff ffea 	bl	8001ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aec:	480c      	ldr	r0, [pc, #48]	; (8001b20 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aee:	490d      	ldr	r1, [pc, #52]	; (8001b24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001af0:	4a0d      	ldr	r2, [pc, #52]	; (8001b28 <LoopForever+0xe>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af4:	e002      	b.n	8001afc <LoopCopyDataInit>

08001af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afa:	3304      	adds	r3, #4

08001afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b00:	d3f9      	bcc.n	8001af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b02:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b04:	4c0a      	ldr	r4, [pc, #40]	; (8001b30 <LoopForever+0x16>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b08:	e001      	b.n	8001b0e <LoopFillZerobss>

08001b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b0c:	3204      	adds	r2, #4

08001b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b10:	d3fb      	bcc.n	8001b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b12:	f004 fff5 	bl	8006b00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b16:	f7ff fa23 	bl	8000f60 <main>

08001b1a <LoopForever>:

LoopForever:
    b LoopForever
 8001b1a:	e7fe      	b.n	8001b1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b1c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b24:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001b28:	080083d4 	.word	0x080083d4
  ldr r2, =_sbss
 8001b2c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001b30:	200002c0 	.word	0x200002c0

08001b34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b34:	e7fe      	b.n	8001b34 <ADC1_IRQHandler>
	...

08001b38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b42:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <HAL_Init+0x3c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <HAL_Init+0x3c>)
 8001b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b4e:	2003      	movs	r0, #3
 8001b50:	f000 f944 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b54:	2000      	movs	r0, #0
 8001b56:	f000 f80f 	bl	8001b78 <HAL_InitTick>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d002      	beq.n	8001b66 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	71fb      	strb	r3, [r7, #7]
 8001b64:	e001      	b.n	8001b6a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b66:	f7ff fdeb 	bl	8001740 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40022000 	.word	0x40022000

08001b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b84:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <HAL_InitTick+0x6c>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d023      	beq.n	8001bd4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b8c:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <HAL_InitTick+0x70>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <HAL_InitTick+0x6c>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 f941 	bl	8001e2a <HAL_SYSTICK_Config>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10f      	bne.n	8001bce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b0f      	cmp	r3, #15
 8001bb2:	d809      	bhi.n	8001bc8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bbc:	f000 f919 	bl	8001df2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <HAL_InitTick+0x74>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	e007      	b.n	8001bd8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	73fb      	strb	r3, [r7, #15]
 8001bcc:	e004      	b.n	8001bd8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	e001      	b.n	8001bd8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000008 	.word	0x20000008
 8001be8:	20000000 	.word	0x20000000
 8001bec:	20000004 	.word	0x20000004

08001bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_IncTick+0x20>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_IncTick+0x24>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <HAL_IncTick+0x24>)
 8001c02:	6013      	str	r3, [r2, #0]
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000008 	.word	0x20000008
 8001c14:	20000170 	.word	0x20000170

08001c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <HAL_GetTick+0x14>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000170 	.word	0x20000170

08001c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c38:	f7ff ffee 	bl	8001c18 <HAL_GetTick>
 8001c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c48:	d005      	beq.n	8001c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_Delay+0x44>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4413      	add	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c56:	bf00      	nop
 8001c58:	f7ff ffde 	bl	8001c18 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d8f7      	bhi.n	8001c58 <HAL_Delay+0x28>
  {
  }
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000008 	.word	0x20000008

08001c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <__NVIC_SetPriorityGrouping+0x44>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c94:	4013      	ands	r3, r2
 8001c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001caa:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <__NVIC_SetPriorityGrouping+0x44>)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	60d3      	str	r3, [r2, #12]
}
 8001cb0:	bf00      	nop
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc4:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	f003 0307 	and.w	r3, r3, #7
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	db0a      	blt.n	8001d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	490c      	ldr	r1, [pc, #48]	; (8001d28 <__NVIC_SetPriority+0x4c>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d04:	e00a      	b.n	8001d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4908      	ldr	r1, [pc, #32]	; (8001d2c <__NVIC_SetPriority+0x50>)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	3b04      	subs	r3, #4
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	440b      	add	r3, r1
 8001d1a:	761a      	strb	r2, [r3, #24]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000e100 	.word	0xe000e100
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f1c3 0307 	rsb	r3, r3, #7
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	bf28      	it	cs
 8001d4e:	2304      	movcs	r3, #4
 8001d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3304      	adds	r3, #4
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d902      	bls.n	8001d60 <NVIC_EncodePriority+0x30>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b03      	subs	r3, #3
 8001d5e:	e000      	b.n	8001d62 <NVIC_EncodePriority+0x32>
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	401a      	ands	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	4313      	orrs	r3, r2
         );
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3724      	adds	r7, #36	; 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da8:	d301      	bcc.n	8001dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00f      	b.n	8001dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <SysTick_Config+0x40>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db6:	210f      	movs	r1, #15
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f7ff ff8e 	bl	8001cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff47 	bl	8001c78 <__NVIC_SetPriorityGrouping>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e04:	f7ff ff5c 	bl	8001cc0 <__NVIC_GetPriorityGrouping>
 8001e08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	f7ff ff8e 	bl	8001d30 <NVIC_EncodePriority>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff5d 	bl	8001cdc <__NVIC_SetPriority>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff ffb0 	bl	8001d98 <SysTick_Config>
 8001e38:	4603      	mov	r3, r0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b087      	sub	sp, #28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e52:	e154      	b.n	80020fe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	2101      	movs	r1, #1
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e60:	4013      	ands	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8146 	beq.w	80020f8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d005      	beq.n	8001e84 <HAL_GPIO_Init+0x40>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d130      	bne.n	8001ee6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	2203      	movs	r2, #3
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eba:	2201      	movs	r2, #1
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	091b      	lsrs	r3, r3, #4
 8001ed0:	f003 0201 	and.w	r2, r3, #1
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d017      	beq.n	8001f22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	2203      	movs	r2, #3
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d123      	bne.n	8001f76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	08da      	lsrs	r2, r3, #3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3208      	adds	r2, #8
 8001f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	220f      	movs	r2, #15
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	691a      	ldr	r2, [r3, #16]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	08da      	lsrs	r2, r3, #3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3208      	adds	r2, #8
 8001f70:	6939      	ldr	r1, [r7, #16]
 8001f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	2203      	movs	r2, #3
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 0203 	and.w	r2, r3, #3
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 80a0 	beq.w	80020f8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb8:	4b58      	ldr	r3, [pc, #352]	; (800211c <HAL_GPIO_Init+0x2d8>)
 8001fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fbc:	4a57      	ldr	r2, [pc, #348]	; (800211c <HAL_GPIO_Init+0x2d8>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	6613      	str	r3, [r2, #96]	; 0x60
 8001fc4:	4b55      	ldr	r3, [pc, #340]	; (800211c <HAL_GPIO_Init+0x2d8>)
 8001fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fd0:	4a53      	ldr	r2, [pc, #332]	; (8002120 <HAL_GPIO_Init+0x2dc>)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	089b      	lsrs	r3, r3, #2
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ffa:	d019      	beq.n	8002030 <HAL_GPIO_Init+0x1ec>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a49      	ldr	r2, [pc, #292]	; (8002124 <HAL_GPIO_Init+0x2e0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d013      	beq.n	800202c <HAL_GPIO_Init+0x1e8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a48      	ldr	r2, [pc, #288]	; (8002128 <HAL_GPIO_Init+0x2e4>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d00d      	beq.n	8002028 <HAL_GPIO_Init+0x1e4>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a47      	ldr	r2, [pc, #284]	; (800212c <HAL_GPIO_Init+0x2e8>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d007      	beq.n	8002024 <HAL_GPIO_Init+0x1e0>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a46      	ldr	r2, [pc, #280]	; (8002130 <HAL_GPIO_Init+0x2ec>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d101      	bne.n	8002020 <HAL_GPIO_Init+0x1dc>
 800201c:	2304      	movs	r3, #4
 800201e:	e008      	b.n	8002032 <HAL_GPIO_Init+0x1ee>
 8002020:	2307      	movs	r3, #7
 8002022:	e006      	b.n	8002032 <HAL_GPIO_Init+0x1ee>
 8002024:	2303      	movs	r3, #3
 8002026:	e004      	b.n	8002032 <HAL_GPIO_Init+0x1ee>
 8002028:	2302      	movs	r3, #2
 800202a:	e002      	b.n	8002032 <HAL_GPIO_Init+0x1ee>
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <HAL_GPIO_Init+0x1ee>
 8002030:	2300      	movs	r3, #0
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	f002 0203 	and.w	r2, r2, #3
 8002038:	0092      	lsls	r2, r2, #2
 800203a:	4093      	lsls	r3, r2
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002042:	4937      	ldr	r1, [pc, #220]	; (8002120 <HAL_GPIO_Init+0x2dc>)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	3302      	adds	r3, #2
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002050:	4b38      	ldr	r3, [pc, #224]	; (8002134 <HAL_GPIO_Init+0x2f0>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	43db      	mvns	r3, r3
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002074:	4a2f      	ldr	r2, [pc, #188]	; (8002134 <HAL_GPIO_Init+0x2f0>)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800207a:	4b2e      	ldr	r3, [pc, #184]	; (8002134 <HAL_GPIO_Init+0x2f0>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	43db      	mvns	r3, r3
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4013      	ands	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800209e:	4a25      	ldr	r2, [pc, #148]	; (8002134 <HAL_GPIO_Init+0x2f0>)
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020a4:	4b23      	ldr	r3, [pc, #140]	; (8002134 <HAL_GPIO_Init+0x2f0>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020c8:	4a1a      	ldr	r2, [pc, #104]	; (8002134 <HAL_GPIO_Init+0x2f0>)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020ce:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_GPIO_Init+0x2f0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4013      	ands	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020f2:	4a10      	ldr	r2, [pc, #64]	; (8002134 <HAL_GPIO_Init+0x2f0>)
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	3301      	adds	r3, #1
 80020fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	fa22 f303 	lsr.w	r3, r2, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	f47f aea3 	bne.w	8001e54 <HAL_GPIO_Init+0x10>
  }
}
 800210e:	bf00      	nop
 8002110:	bf00      	nop
 8002112:	371c      	adds	r7, #28
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	40021000 	.word	0x40021000
 8002120:	40010000 	.word	0x40010000
 8002124:	48000400 	.word	0x48000400
 8002128:	48000800 	.word	0x48000800
 800212c:	48000c00 	.word	0x48000c00
 8002130:	48001000 	.word	0x48001000
 8002134:	40010400 	.word	0x40010400

08002138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	807b      	strh	r3, [r7, #2]
 8002144:	4613      	mov	r3, r2
 8002146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002148:	787b      	ldrb	r3, [r7, #1]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800214e:	887a      	ldrh	r2, [r7, #2]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002154:	e002      	b.n	800215c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002156:	887a      	ldrh	r2, [r7, #2]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <HAL_PWREx_GetVoltageRange+0x18>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40007000 	.word	0x40007000

08002184 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002192:	d130      	bne.n	80021f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002194:	4b23      	ldr	r3, [pc, #140]	; (8002224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800219c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021a0:	d038      	beq.n	8002214 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021a2:	4b20      	ldr	r3, [pc, #128]	; (8002224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021aa:	4a1e      	ldr	r2, [pc, #120]	; (8002224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021b2:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2232      	movs	r2, #50	; 0x32
 80021b8:	fb02 f303 	mul.w	r3, r2, r3
 80021bc:	4a1b      	ldr	r2, [pc, #108]	; (800222c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	0c9b      	lsrs	r3, r3, #18
 80021c4:	3301      	adds	r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021c8:	e002      	b.n	80021d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021d0:	4b14      	ldr	r3, [pc, #80]	; (8002224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021dc:	d102      	bne.n	80021e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1f2      	bne.n	80021ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021e4:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021f0:	d110      	bne.n	8002214 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e00f      	b.n	8002216 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002202:	d007      	beq.n	8002214 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002204:	4b07      	ldr	r3, [pc, #28]	; (8002224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800220c:	4a05      	ldr	r2, [pc, #20]	; (8002224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800220e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002212:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40007000 	.word	0x40007000
 8002228:	20000000 	.word	0x20000000
 800222c:	431bde83 	.word	0x431bde83

08002230 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d102      	bne.n	8002244 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	f000 bc02 	b.w	8002a48 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002244:	4b96      	ldr	r3, [pc, #600]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800224e:	4b94      	ldr	r3, [pc, #592]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0310 	and.w	r3, r3, #16
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80e4 	beq.w	800242e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d007      	beq.n	800227c <HAL_RCC_OscConfig+0x4c>
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2b0c      	cmp	r3, #12
 8002270:	f040 808b 	bne.w	800238a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	2b01      	cmp	r3, #1
 8002278:	f040 8087 	bne.w	800238a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800227c:	4b88      	ldr	r3, [pc, #544]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_RCC_OscConfig+0x64>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e3d9      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a1a      	ldr	r2, [r3, #32]
 8002298:	4b81      	ldr	r3, [pc, #516]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d004      	beq.n	80022ae <HAL_RCC_OscConfig+0x7e>
 80022a4:	4b7e      	ldr	r3, [pc, #504]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ac:	e005      	b.n	80022ba <HAL_RCC_OscConfig+0x8a>
 80022ae:	4b7c      	ldr	r3, [pc, #496]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80022b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d223      	bcs.n	8002306 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 fd8c 	bl	8002de0 <RCC_SetFlashLatencyFromMSIRange>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e3ba      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022d2:	4b73      	ldr	r3, [pc, #460]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a72      	ldr	r2, [pc, #456]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80022d8:	f043 0308 	orr.w	r3, r3, #8
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	4b70      	ldr	r3, [pc, #448]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	496d      	ldr	r1, [pc, #436]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022f0:	4b6b      	ldr	r3, [pc, #428]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	021b      	lsls	r3, r3, #8
 80022fe:	4968      	ldr	r1, [pc, #416]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]
 8002304:	e025      	b.n	8002352 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002306:	4b66      	ldr	r3, [pc, #408]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a65      	ldr	r2, [pc, #404]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 800230c:	f043 0308 	orr.w	r3, r3, #8
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	4b63      	ldr	r3, [pc, #396]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	4960      	ldr	r1, [pc, #384]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002320:	4313      	orrs	r3, r2
 8002322:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002324:	4b5e      	ldr	r3, [pc, #376]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	495b      	ldr	r1, [pc, #364]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	4618      	mov	r0, r3
 8002344:	f000 fd4c 	bl	8002de0 <RCC_SetFlashLatencyFromMSIRange>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e37a      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002352:	f000 fc81 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002356:	4602      	mov	r2, r0
 8002358:	4b51      	ldr	r3, [pc, #324]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	4950      	ldr	r1, [pc, #320]	; (80024a4 <HAL_RCC_OscConfig+0x274>)
 8002364:	5ccb      	ldrb	r3, [r1, r3]
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	fa22 f303 	lsr.w	r3, r2, r3
 800236e:	4a4e      	ldr	r2, [pc, #312]	; (80024a8 <HAL_RCC_OscConfig+0x278>)
 8002370:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002372:	4b4e      	ldr	r3, [pc, #312]	; (80024ac <HAL_RCC_OscConfig+0x27c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fbfe 	bl	8001b78 <HAL_InitTick>
 800237c:	4603      	mov	r3, r0
 800237e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d052      	beq.n	800242c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	e35e      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d032      	beq.n	80023f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002392:	4b43      	ldr	r3, [pc, #268]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a42      	ldr	r2, [pc, #264]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800239e:	f7ff fc3b 	bl	8001c18 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023a6:	f7ff fc37 	bl	8001c18 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e347      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023b8:	4b39      	ldr	r3, [pc, #228]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023c4:	4b36      	ldr	r3, [pc, #216]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a35      	ldr	r2, [pc, #212]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80023ca:	f043 0308 	orr.w	r3, r3, #8
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	4b33      	ldr	r3, [pc, #204]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4930      	ldr	r1, [pc, #192]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023e2:	4b2f      	ldr	r3, [pc, #188]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	021b      	lsls	r3, r3, #8
 80023f0:	492b      	ldr	r1, [pc, #172]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	604b      	str	r3, [r1, #4]
 80023f6:	e01a      	b.n	800242e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023f8:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a28      	ldr	r2, [pc, #160]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80023fe:	f023 0301 	bic.w	r3, r3, #1
 8002402:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002404:	f7ff fc08 	bl	8001c18 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800240c:	f7ff fc04 	bl	8001c18 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e314      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x1dc>
 800242a:	e000      	b.n	800242e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800242c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d073      	beq.n	8002522 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	2b08      	cmp	r3, #8
 800243e:	d005      	beq.n	800244c <HAL_RCC_OscConfig+0x21c>
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2b0c      	cmp	r3, #12
 8002444:	d10e      	bne.n	8002464 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2b03      	cmp	r3, #3
 800244a:	d10b      	bne.n	8002464 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244c:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d063      	beq.n	8002520 <HAL_RCC_OscConfig+0x2f0>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d15f      	bne.n	8002520 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e2f1      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800246c:	d106      	bne.n	800247c <HAL_RCC_OscConfig+0x24c>
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a0b      	ldr	r2, [pc, #44]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e025      	b.n	80024c8 <HAL_RCC_OscConfig+0x298>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002484:	d114      	bne.n	80024b0 <HAL_RCC_OscConfig+0x280>
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 800248c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a02      	ldr	r2, [pc, #8]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	e013      	b.n	80024c8 <HAL_RCC_OscConfig+0x298>
 80024a0:	40021000 	.word	0x40021000
 80024a4:	08007bd4 	.word	0x08007bd4
 80024a8:	20000000 	.word	0x20000000
 80024ac:	20000004 	.word	0x20000004
 80024b0:	4ba0      	ldr	r3, [pc, #640]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a9f      	ldr	r2, [pc, #636]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80024b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b9d      	ldr	r3, [pc, #628]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a9c      	ldr	r2, [pc, #624]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80024c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d013      	beq.n	80024f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7ff fba2 	bl	8001c18 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7ff fb9e 	bl	8001c18 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e2ae      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ea:	4b92      	ldr	r3, [pc, #584]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x2a8>
 80024f6:	e014      	b.n	8002522 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7ff fb8e 	bl	8001c18 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002500:	f7ff fb8a 	bl	8001c18 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	; 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e29a      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002512:	4b88      	ldr	r3, [pc, #544]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x2d0>
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d060      	beq.n	80025f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	2b04      	cmp	r3, #4
 8002532:	d005      	beq.n	8002540 <HAL_RCC_OscConfig+0x310>
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	2b0c      	cmp	r3, #12
 8002538:	d119      	bne.n	800256e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d116      	bne.n	800256e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002540:	4b7c      	ldr	r3, [pc, #496]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_RCC_OscConfig+0x328>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e277      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002558:	4b76      	ldr	r3, [pc, #472]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	061b      	lsls	r3, r3, #24
 8002566:	4973      	ldr	r1, [pc, #460]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002568:	4313      	orrs	r3, r2
 800256a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800256c:	e040      	b.n	80025f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d023      	beq.n	80025be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002576:	4b6f      	ldr	r3, [pc, #444]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a6e      	ldr	r2, [pc, #440]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 800257c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002582:	f7ff fb49 	bl	8001c18 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800258a:	f7ff fb45 	bl	8001c18 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e255      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800259c:	4b65      	ldr	r3, [pc, #404]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a8:	4b62      	ldr	r3, [pc, #392]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	061b      	lsls	r3, r3, #24
 80025b6:	495f      	ldr	r1, [pc, #380]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]
 80025bc:	e018      	b.n	80025f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025be:	4b5d      	ldr	r3, [pc, #372]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a5c      	ldr	r2, [pc, #368]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80025c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ca:	f7ff fb25 	bl	8001c18 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d2:	f7ff fb21 	bl	8001c18 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e231      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025e4:	4b53      	ldr	r3, [pc, #332]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f0      	bne.n	80025d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d03c      	beq.n	8002676 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d01c      	beq.n	800263e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002604:	4b4b      	ldr	r3, [pc, #300]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800260a:	4a4a      	ldr	r2, [pc, #296]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002614:	f7ff fb00 	bl	8001c18 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261c:	f7ff fafc 	bl	8001c18 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e20c      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800262e:	4b41      	ldr	r3, [pc, #260]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0ef      	beq.n	800261c <HAL_RCC_OscConfig+0x3ec>
 800263c:	e01b      	b.n	8002676 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800263e:	4b3d      	ldr	r3, [pc, #244]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002644:	4a3b      	ldr	r2, [pc, #236]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002646:	f023 0301 	bic.w	r3, r3, #1
 800264a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264e:	f7ff fae3 	bl	8001c18 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002656:	f7ff fadf 	bl	8001c18 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e1ef      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002668:	4b32      	ldr	r3, [pc, #200]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 800266a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1ef      	bne.n	8002656 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 80a6 	beq.w	80027d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002684:	2300      	movs	r3, #0
 8002686:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002688:	4b2a      	ldr	r3, [pc, #168]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 800268a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10d      	bne.n	80026b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002694:	4b27      	ldr	r3, [pc, #156]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002698:	4a26      	ldr	r2, [pc, #152]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 800269a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269e:	6593      	str	r3, [r2, #88]	; 0x58
 80026a0:	4b24      	ldr	r3, [pc, #144]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80026a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ac:	2301      	movs	r3, #1
 80026ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b0:	4b21      	ldr	r3, [pc, #132]	; (8002738 <HAL_RCC_OscConfig+0x508>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d118      	bne.n	80026ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026bc:	4b1e      	ldr	r3, [pc, #120]	; (8002738 <HAL_RCC_OscConfig+0x508>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a1d      	ldr	r2, [pc, #116]	; (8002738 <HAL_RCC_OscConfig+0x508>)
 80026c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c8:	f7ff faa6 	bl	8001c18 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d0:	f7ff faa2 	bl	8001c18 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e1b2      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e2:	4b15      	ldr	r3, [pc, #84]	; (8002738 <HAL_RCC_OscConfig+0x508>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d108      	bne.n	8002708 <HAL_RCC_OscConfig+0x4d8>
 80026f6:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80026f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fc:	4a0d      	ldr	r2, [pc, #52]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002706:	e029      	b.n	800275c <HAL_RCC_OscConfig+0x52c>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b05      	cmp	r3, #5
 800270e:	d115      	bne.n	800273c <HAL_RCC_OscConfig+0x50c>
 8002710:	4b08      	ldr	r3, [pc, #32]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002716:	4a07      	ldr	r2, [pc, #28]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002718:	f043 0304 	orr.w	r3, r3, #4
 800271c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002720:	4b04      	ldr	r3, [pc, #16]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002726:	4a03      	ldr	r2, [pc, #12]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002730:	e014      	b.n	800275c <HAL_RCC_OscConfig+0x52c>
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
 8002738:	40007000 	.word	0x40007000
 800273c:	4b9a      	ldr	r3, [pc, #616]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 800273e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002742:	4a99      	ldr	r2, [pc, #612]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002744:	f023 0301 	bic.w	r3, r3, #1
 8002748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800274c:	4b96      	ldr	r3, [pc, #600]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 800274e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002752:	4a95      	ldr	r2, [pc, #596]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002754:	f023 0304 	bic.w	r3, r3, #4
 8002758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d016      	beq.n	8002792 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002764:	f7ff fa58 	bl	8001c18 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800276a:	e00a      	b.n	8002782 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276c:	f7ff fa54 	bl	8001c18 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	; 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e162      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002782:	4b89      	ldr	r3, [pc, #548]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0ed      	beq.n	800276c <HAL_RCC_OscConfig+0x53c>
 8002790:	e015      	b.n	80027be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002792:	f7ff fa41 	bl	8001c18 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279a:	f7ff fa3d 	bl	8001c18 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e14b      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027b0:	4b7d      	ldr	r3, [pc, #500]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1ed      	bne.n	800279a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027be:	7ffb      	ldrb	r3, [r7, #31]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d105      	bne.n	80027d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c4:	4b78      	ldr	r3, [pc, #480]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 80027c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c8:	4a77      	ldr	r2, [pc, #476]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 80027ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0320 	and.w	r3, r3, #32
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d03c      	beq.n	8002856 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01c      	beq.n	800281e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027e4:	4b70      	ldr	r3, [pc, #448]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 80027e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027ea:	4a6f      	ldr	r2, [pc, #444]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f4:	f7ff fa10 	bl	8001c18 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027fc:	f7ff fa0c 	bl	8001c18 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e11c      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800280e:	4b66      	ldr	r3, [pc, #408]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002810:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0ef      	beq.n	80027fc <HAL_RCC_OscConfig+0x5cc>
 800281c:	e01b      	b.n	8002856 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800281e:	4b62      	ldr	r3, [pc, #392]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002820:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002824:	4a60      	ldr	r2, [pc, #384]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002826:	f023 0301 	bic.w	r3, r3, #1
 800282a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282e:	f7ff f9f3 	bl	8001c18 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002836:	f7ff f9ef 	bl	8001c18 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e0ff      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002848:	4b57      	ldr	r3, [pc, #348]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 800284a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1ef      	bne.n	8002836 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 80f3 	beq.w	8002a46 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	2b02      	cmp	r3, #2
 8002866:	f040 80c9 	bne.w	80029fc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800286a:	4b4f      	ldr	r3, [pc, #316]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f003 0203 	and.w	r2, r3, #3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	429a      	cmp	r2, r3
 800287c:	d12c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	3b01      	subs	r3, #1
 800288a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800288c:	429a      	cmp	r2, r3
 800288e:	d123      	bne.n	80028d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800289a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800289c:	429a      	cmp	r2, r3
 800289e:	d11b      	bne.n	80028d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d113      	bne.n	80028d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	3b01      	subs	r3, #1
 80028be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d109      	bne.n	80028d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	085b      	lsrs	r3, r3, #1
 80028d0:	3b01      	subs	r3, #1
 80028d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d06b      	beq.n	80029b0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2b0c      	cmp	r3, #12
 80028dc:	d062      	beq.n	80029a4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028de:	4b32      	ldr	r3, [pc, #200]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e0ac      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028ee:	4b2e      	ldr	r3, [pc, #184]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a2d      	ldr	r2, [pc, #180]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 80028f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028fa:	f7ff f98d 	bl	8001c18 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002902:	f7ff f989 	bl	8001c18 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e099      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002914:	4b24      	ldr	r3, [pc, #144]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f0      	bne.n	8002902 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002920:	4b21      	ldr	r3, [pc, #132]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	4b21      	ldr	r3, [pc, #132]	; (80029ac <HAL_RCC_OscConfig+0x77c>)
 8002926:	4013      	ands	r3, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002930:	3a01      	subs	r2, #1
 8002932:	0112      	lsls	r2, r2, #4
 8002934:	4311      	orrs	r1, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800293a:	0212      	lsls	r2, r2, #8
 800293c:	4311      	orrs	r1, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002942:	0852      	lsrs	r2, r2, #1
 8002944:	3a01      	subs	r2, #1
 8002946:	0552      	lsls	r2, r2, #21
 8002948:	4311      	orrs	r1, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800294e:	0852      	lsrs	r2, r2, #1
 8002950:	3a01      	subs	r2, #1
 8002952:	0652      	lsls	r2, r2, #25
 8002954:	4311      	orrs	r1, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800295a:	06d2      	lsls	r2, r2, #27
 800295c:	430a      	orrs	r2, r1
 800295e:	4912      	ldr	r1, [pc, #72]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002960:	4313      	orrs	r3, r2
 8002962:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002964:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0f      	ldr	r2, [pc, #60]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 800296a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800296e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002970:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4a0c      	ldr	r2, [pc, #48]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800297a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800297c:	f7ff f94c 	bl	8001c18 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002984:	f7ff f948 	bl	8001c18 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e058      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002996:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029a2:	e050      	b.n	8002a46 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e04f      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
 80029a8:	40021000 	.word	0x40021000
 80029ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b0:	4b27      	ldr	r3, [pc, #156]	; (8002a50 <HAL_RCC_OscConfig+0x820>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d144      	bne.n	8002a46 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029bc:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <HAL_RCC_OscConfig+0x820>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a23      	ldr	r2, [pc, #140]	; (8002a50 <HAL_RCC_OscConfig+0x820>)
 80029c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029c8:	4b21      	ldr	r3, [pc, #132]	; (8002a50 <HAL_RCC_OscConfig+0x820>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4a20      	ldr	r2, [pc, #128]	; (8002a50 <HAL_RCC_OscConfig+0x820>)
 80029ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029d4:	f7ff f920 	bl	8001c18 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029dc:	f7ff f91c 	bl	8001c18 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e02c      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ee:	4b18      	ldr	r3, [pc, #96]	; (8002a50 <HAL_RCC_OscConfig+0x820>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x7ac>
 80029fa:	e024      	b.n	8002a46 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2b0c      	cmp	r3, #12
 8002a00:	d01f      	beq.n	8002a42 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a02:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <HAL_RCC_OscConfig+0x820>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a12      	ldr	r2, [pc, #72]	; (8002a50 <HAL_RCC_OscConfig+0x820>)
 8002a08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0e:	f7ff f903 	bl	8001c18 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a16:	f7ff f8ff 	bl	8001c18 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e00f      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a28:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <HAL_RCC_OscConfig+0x820>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1f0      	bne.n	8002a16 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HAL_RCC_OscConfig+0x820>)
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	4905      	ldr	r1, [pc, #20]	; (8002a50 <HAL_RCC_OscConfig+0x820>)
 8002a3a:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_RCC_OscConfig+0x824>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60cb      	str	r3, [r1, #12]
 8002a40:	e001      	b.n	8002a46 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3720      	adds	r7, #32
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40021000 	.word	0x40021000
 8002a54:	feeefffc 	.word	0xfeeefffc

08002a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0e7      	b.n	8002c3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b75      	ldr	r3, [pc, #468]	; (8002c44 <HAL_RCC_ClockConfig+0x1ec>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d910      	bls.n	8002a9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b72      	ldr	r3, [pc, #456]	; (8002c44 <HAL_RCC_ClockConfig+0x1ec>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 0207 	bic.w	r2, r3, #7
 8002a82:	4970      	ldr	r1, [pc, #448]	; (8002c44 <HAL_RCC_ClockConfig+0x1ec>)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	4b6e      	ldr	r3, [pc, #440]	; (8002c44 <HAL_RCC_ClockConfig+0x1ec>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0cf      	b.n	8002c3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d010      	beq.n	8002aca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	4b66      	ldr	r3, [pc, #408]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d908      	bls.n	8002aca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab8:	4b63      	ldr	r3, [pc, #396]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4960      	ldr	r1, [pc, #384]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d04c      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d107      	bne.n	8002aee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ade:	4b5a      	ldr	r3, [pc, #360]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d121      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e0a6      	b.n	8002c3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002af6:	4b54      	ldr	r3, [pc, #336]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d115      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e09a      	b.n	8002c3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b0e:	4b4e      	ldr	r3, [pc, #312]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e08e      	b.n	8002c3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b1e:	4b4a      	ldr	r3, [pc, #296]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e086      	b.n	8002c3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b2e:	4b46      	ldr	r3, [pc, #280]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f023 0203 	bic.w	r2, r3, #3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	4943      	ldr	r1, [pc, #268]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b40:	f7ff f86a 	bl	8001c18 <HAL_GetTick>
 8002b44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b48:	f7ff f866 	bl	8001c18 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e06e      	b.n	8002c3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5e:	4b3a      	ldr	r3, [pc, #232]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 020c 	and.w	r2, r3, #12
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d1eb      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d010      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	4b31      	ldr	r3, [pc, #196]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d208      	bcs.n	8002b9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b8c:	4b2e      	ldr	r3, [pc, #184]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	492b      	ldr	r1, [pc, #172]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b9e:	4b29      	ldr	r3, [pc, #164]	; (8002c44 <HAL_RCC_ClockConfig+0x1ec>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d210      	bcs.n	8002bce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bac:	4b25      	ldr	r3, [pc, #148]	; (8002c44 <HAL_RCC_ClockConfig+0x1ec>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f023 0207 	bic.w	r2, r3, #7
 8002bb4:	4923      	ldr	r1, [pc, #140]	; (8002c44 <HAL_RCC_ClockConfig+0x1ec>)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bbc:	4b21      	ldr	r3, [pc, #132]	; (8002c44 <HAL_RCC_ClockConfig+0x1ec>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d001      	beq.n	8002bce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e036      	b.n	8002c3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d008      	beq.n	8002bec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bda:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	4918      	ldr	r1, [pc, #96]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0308 	and.w	r3, r3, #8
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d009      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bf8:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	4910      	ldr	r1, [pc, #64]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c0c:	f000 f824 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002c10:	4602      	mov	r2, r0
 8002c12:	4b0d      	ldr	r3, [pc, #52]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	091b      	lsrs	r3, r3, #4
 8002c18:	f003 030f 	and.w	r3, r3, #15
 8002c1c:	490b      	ldr	r1, [pc, #44]	; (8002c4c <HAL_RCC_ClockConfig+0x1f4>)
 8002c1e:	5ccb      	ldrb	r3, [r1, r3]
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
 8002c28:	4a09      	ldr	r2, [pc, #36]	; (8002c50 <HAL_RCC_ClockConfig+0x1f8>)
 8002c2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c2c:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_RCC_ClockConfig+0x1fc>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fe ffa1 	bl	8001b78 <HAL_InitTick>
 8002c36:	4603      	mov	r3, r0
 8002c38:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c3a:	7afb      	ldrb	r3, [r7, #11]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40022000 	.word	0x40022000
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	08007bd4 	.word	0x08007bd4
 8002c50:	20000000 	.word	0x20000000
 8002c54:	20000004 	.word	0x20000004

08002c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b089      	sub	sp, #36	; 0x24
 8002c5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
 8002c62:	2300      	movs	r3, #0
 8002c64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c66:	4b3e      	ldr	r3, [pc, #248]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c70:	4b3b      	ldr	r3, [pc, #236]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x34>
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	2b0c      	cmp	r3, #12
 8002c84:	d121      	bne.n	8002cca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d11e      	bne.n	8002cca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c8c:	4b34      	ldr	r3, [pc, #208]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d107      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c98:	4b31      	ldr	r3, [pc, #196]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c9e:	0a1b      	lsrs	r3, r3, #8
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	e005      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ca8:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cb4:	4a2b      	ldr	r2, [pc, #172]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10d      	bne.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cc8:	e00a      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d102      	bne.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cd0:	4b25      	ldr	r3, [pc, #148]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cd2:	61bb      	str	r3, [r7, #24]
 8002cd4:	e004      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cdc:	4b23      	ldr	r3, [pc, #140]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002cde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	2b0c      	cmp	r3, #12
 8002ce4:	d134      	bne.n	8002d50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ce6:	4b1e      	ldr	r3, [pc, #120]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d003      	beq.n	8002cfe <HAL_RCC_GetSysClockFreq+0xa6>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d003      	beq.n	8002d04 <HAL_RCC_GetSysClockFreq+0xac>
 8002cfc:	e005      	b.n	8002d0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cfe:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d00:	617b      	str	r3, [r7, #20]
      break;
 8002d02:	e005      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d04:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002d06:	617b      	str	r3, [r7, #20]
      break;
 8002d08:	e002      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	617b      	str	r3, [r7, #20]
      break;
 8002d0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d10:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d1e:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	0a1b      	lsrs	r3, r3, #8
 8002d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	fb03 f202 	mul.w	r2, r3, r2
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	0e5b      	lsrs	r3, r3, #25
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	3301      	adds	r3, #1
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d50:	69bb      	ldr	r3, [r7, #24]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3724      	adds	r7, #36	; 0x24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000
 8002d64:	08007bec 	.word	0x08007bec
 8002d68:	00f42400 	.word	0x00f42400
 8002d6c:	007a1200 	.word	0x007a1200

08002d70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d74:	4b03      	ldr	r3, [pc, #12]	; (8002d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d76:	681b      	ldr	r3, [r3, #0]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000000 	.word	0x20000000

08002d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d8c:	f7ff fff0 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	4904      	ldr	r1, [pc, #16]	; (8002db0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000
 8002db0:	08007be4 	.word	0x08007be4

08002db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002db8:	f7ff ffda 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	0adb      	lsrs	r3, r3, #11
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	4904      	ldr	r1, [pc, #16]	; (8002ddc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dca:	5ccb      	ldrb	r3, [r1, r3]
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	08007be4 	.word	0x08007be4

08002de0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002de8:	2300      	movs	r3, #0
 8002dea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002dec:	4b2a      	ldr	r3, [pc, #168]	; (8002e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002df8:	f7ff f9b6 	bl	8002168 <HAL_PWREx_GetVoltageRange>
 8002dfc:	6178      	str	r0, [r7, #20]
 8002dfe:	e014      	b.n	8002e2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e00:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e04:	4a24      	ldr	r2, [pc, #144]	; (8002e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e0c:	4b22      	ldr	r3, [pc, #136]	; (8002e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e18:	f7ff f9a6 	bl	8002168 <HAL_PWREx_GetVoltageRange>
 8002e1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e1e:	4b1e      	ldr	r3, [pc, #120]	; (8002e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e22:	4a1d      	ldr	r2, [pc, #116]	; (8002e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e30:	d10b      	bne.n	8002e4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b80      	cmp	r3, #128	; 0x80
 8002e36:	d919      	bls.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2ba0      	cmp	r3, #160	; 0xa0
 8002e3c:	d902      	bls.n	8002e44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e3e:	2302      	movs	r3, #2
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	e013      	b.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e44:	2301      	movs	r3, #1
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	e010      	b.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b80      	cmp	r3, #128	; 0x80
 8002e4e:	d902      	bls.n	8002e56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e50:	2303      	movs	r3, #3
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	e00a      	b.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b80      	cmp	r3, #128	; 0x80
 8002e5a:	d102      	bne.n	8002e62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	e004      	b.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b70      	cmp	r3, #112	; 0x70
 8002e66:	d101      	bne.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e68:	2301      	movs	r3, #1
 8002e6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f023 0207 	bic.w	r2, r3, #7
 8002e74:	4909      	ldr	r1, [pc, #36]	; (8002e9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e7c:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d001      	beq.n	8002e8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40022000 	.word	0x40022000

08002ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002eac:	2300      	movs	r3, #0
 8002eae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d031      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ec4:	d01a      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002ec6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002eca:	d814      	bhi.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d009      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ed0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ed4:	d10f      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002ed6:	4b5d      	ldr	r3, [pc, #372]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	4a5c      	ldr	r2, [pc, #368]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ee2:	e00c      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	2100      	movs	r1, #0
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fa22 	bl	8003334 <RCCEx_PLLSAI1_Config>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ef4:	e003      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	74fb      	strb	r3, [r7, #19]
      break;
 8002efa:	e000      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002efc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002efe:	7cfb      	ldrb	r3, [r7, #19]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10b      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f04:	4b51      	ldr	r3, [pc, #324]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	494e      	ldr	r1, [pc, #312]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f1a:	e001      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1c:	7cfb      	ldrb	r3, [r7, #19]
 8002f1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 809e 	beq.w	800306a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f32:	4b46      	ldr	r3, [pc, #280]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002f42:	2300      	movs	r3, #0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00d      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f48:	4b40      	ldr	r3, [pc, #256]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4c:	4a3f      	ldr	r2, [pc, #252]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f52:	6593      	str	r3, [r2, #88]	; 0x58
 8002f54:	4b3d      	ldr	r3, [pc, #244]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f60:	2301      	movs	r3, #1
 8002f62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f64:	4b3a      	ldr	r3, [pc, #232]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a39      	ldr	r2, [pc, #228]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f70:	f7fe fe52 	bl	8001c18 <HAL_GetTick>
 8002f74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f76:	e009      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f78:	f7fe fe4e 	bl	8001c18 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d902      	bls.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	74fb      	strb	r3, [r7, #19]
        break;
 8002f8a:	e005      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f8c:	4b30      	ldr	r3, [pc, #192]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ef      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002f98:	7cfb      	ldrb	r3, [r7, #19]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d15a      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f9e:	4b2b      	ldr	r3, [pc, #172]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01e      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d019      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fba:	4b24      	ldr	r3, [pc, #144]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fc6:	4b21      	ldr	r3, [pc, #132]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fcc:	4a1f      	ldr	r2, [pc, #124]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fd6:	4b1d      	ldr	r3, [pc, #116]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fdc:	4a1b      	ldr	r2, [pc, #108]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fe6:	4a19      	ldr	r2, [pc, #100]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d016      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fe0e 	bl	8001c18 <HAL_GetTick>
 8002ffc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ffe:	e00b      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003000:	f7fe fe0a 	bl	8001c18 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	; 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d902      	bls.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	74fb      	strb	r3, [r7, #19]
            break;
 8003016:	e006      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800301a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0ec      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003026:	7cfb      	ldrb	r3, [r7, #19]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10b      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800302c:	4b07      	ldr	r3, [pc, #28]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003032:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303a:	4904      	ldr	r1, [pc, #16]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003042:	e009      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003044:	7cfb      	ldrb	r3, [r7, #19]
 8003046:	74bb      	strb	r3, [r7, #18]
 8003048:	e006      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800304a:	bf00      	nop
 800304c:	40021000 	.word	0x40021000
 8003050:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003054:	7cfb      	ldrb	r3, [r7, #19]
 8003056:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003058:	7c7b      	ldrb	r3, [r7, #17]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d105      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800305e:	4b8d      	ldr	r3, [pc, #564]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003062:	4a8c      	ldr	r2, [pc, #560]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003068:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003076:	4b87      	ldr	r3, [pc, #540]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307c:	f023 0203 	bic.w	r2, r3, #3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	4983      	ldr	r1, [pc, #524]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003098:	4b7e      	ldr	r3, [pc, #504]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309e:	f023 020c 	bic.w	r2, r3, #12
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	497b      	ldr	r1, [pc, #492]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030ba:	4b76      	ldr	r3, [pc, #472]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	4972      	ldr	r1, [pc, #456]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030dc:	4b6d      	ldr	r3, [pc, #436]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	496a      	ldr	r1, [pc, #424]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030fe:	4b65      	ldr	r3, [pc, #404]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003104:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310c:	4961      	ldr	r1, [pc, #388]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003120:	4b5c      	ldr	r3, [pc, #368]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003126:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	4959      	ldr	r1, [pc, #356]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003142:	4b54      	ldr	r3, [pc, #336]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003148:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	4950      	ldr	r1, [pc, #320]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00a      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003164:	4b4b      	ldr	r3, [pc, #300]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003172:	4948      	ldr	r1, [pc, #288]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003186:	4b43      	ldr	r3, [pc, #268]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003194:	493f      	ldr	r1, [pc, #252]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003196:	4313      	orrs	r3, r2
 8003198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d028      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031a8:	4b3a      	ldr	r3, [pc, #232]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80031aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b6:	4937      	ldr	r1, [pc, #220]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031c6:	d106      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031c8:	4b32      	ldr	r3, [pc, #200]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4a31      	ldr	r2, [pc, #196]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80031ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031d2:	60d3      	str	r3, [r2, #12]
 80031d4:	e011      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031de:	d10c      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3304      	adds	r3, #4
 80031e4:	2101      	movs	r1, #1
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f8a4 	bl	8003334 <RCCEx_PLLSAI1_Config>
 80031ec:	4603      	mov	r3, r0
 80031ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031f0:	7cfb      	ldrb	r3, [r7, #19]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80031f6:	7cfb      	ldrb	r3, [r7, #19]
 80031f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d028      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003206:	4b23      	ldr	r3, [pc, #140]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003214:	491f      	ldr	r1, [pc, #124]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003220:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003224:	d106      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003226:	4b1b      	ldr	r3, [pc, #108]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	4a1a      	ldr	r2, [pc, #104]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800322c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003230:	60d3      	str	r3, [r2, #12]
 8003232:	e011      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003238:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800323c:	d10c      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3304      	adds	r3, #4
 8003242:	2101      	movs	r1, #1
 8003244:	4618      	mov	r0, r3
 8003246:	f000 f875 	bl	8003334 <RCCEx_PLLSAI1_Config>
 800324a:	4603      	mov	r3, r0
 800324c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800324e:	7cfb      	ldrb	r3, [r7, #19]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003254:	7cfb      	ldrb	r3, [r7, #19]
 8003256:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d02b      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003264:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003272:	4908      	ldr	r1, [pc, #32]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800327e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003282:	d109      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003284:	4b03      	ldr	r3, [pc, #12]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4a02      	ldr	r2, [pc, #8]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800328a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800328e:	60d3      	str	r3, [r2, #12]
 8003290:	e014      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003292:	bf00      	nop
 8003294:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032a0:	d10c      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3304      	adds	r3, #4
 80032a6:	2101      	movs	r1, #1
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 f843 	bl	8003334 <RCCEx_PLLSAI1_Config>
 80032ae:	4603      	mov	r3, r0
 80032b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032b2:	7cfb      	ldrb	r3, [r7, #19]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80032b8:	7cfb      	ldrb	r3, [r7, #19]
 80032ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01c      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032c8:	4b19      	ldr	r3, [pc, #100]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d6:	4916      	ldr	r1, [pc, #88]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032e6:	d10c      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3304      	adds	r3, #4
 80032ec:	2102      	movs	r1, #2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 f820 	bl	8003334 <RCCEx_PLLSAI1_Config>
 80032f4:	4603      	mov	r3, r0
 80032f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032f8:	7cfb      	ldrb	r3, [r7, #19]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80032fe:	7cfb      	ldrb	r3, [r7, #19]
 8003300:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800330e:	4b08      	ldr	r3, [pc, #32]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003314:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331c:	4904      	ldr	r1, [pc, #16]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003324:	7cbb      	ldrb	r3, [r7, #18]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40021000 	.word	0x40021000

08003334 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003342:	4b74      	ldr	r3, [pc, #464]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d018      	beq.n	8003380 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800334e:	4b71      	ldr	r3, [pc, #452]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f003 0203 	and.w	r2, r3, #3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d10d      	bne.n	800337a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
       ||
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003366:	4b6b      	ldr	r3, [pc, #428]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	091b      	lsrs	r3, r3, #4
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
       ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d047      	beq.n	800340a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	73fb      	strb	r3, [r7, #15]
 800337e:	e044      	b.n	800340a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b03      	cmp	r3, #3
 8003386:	d018      	beq.n	80033ba <RCCEx_PLLSAI1_Config+0x86>
 8003388:	2b03      	cmp	r3, #3
 800338a:	d825      	bhi.n	80033d8 <RCCEx_PLLSAI1_Config+0xa4>
 800338c:	2b01      	cmp	r3, #1
 800338e:	d002      	beq.n	8003396 <RCCEx_PLLSAI1_Config+0x62>
 8003390:	2b02      	cmp	r3, #2
 8003392:	d009      	beq.n	80033a8 <RCCEx_PLLSAI1_Config+0x74>
 8003394:	e020      	b.n	80033d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003396:	4b5f      	ldr	r3, [pc, #380]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d11d      	bne.n	80033de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a6:	e01a      	b.n	80033de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033a8:	4b5a      	ldr	r3, [pc, #360]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d116      	bne.n	80033e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033b8:	e013      	b.n	80033e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033ba:	4b56      	ldr	r3, [pc, #344]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10f      	bne.n	80033e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033c6:	4b53      	ldr	r3, [pc, #332]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d109      	bne.n	80033e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033d6:	e006      	b.n	80033e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
      break;
 80033dc:	e004      	b.n	80033e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033de:	bf00      	nop
 80033e0:	e002      	b.n	80033e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033e2:	bf00      	nop
 80033e4:	e000      	b.n	80033e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10d      	bne.n	800340a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033ee:	4b49      	ldr	r3, [pc, #292]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6819      	ldr	r1, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	3b01      	subs	r3, #1
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	430b      	orrs	r3, r1
 8003404:	4943      	ldr	r1, [pc, #268]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003406:	4313      	orrs	r3, r2
 8003408:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d17c      	bne.n	800350a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003410:	4b40      	ldr	r3, [pc, #256]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a3f      	ldr	r2, [pc, #252]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003416:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800341a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800341c:	f7fe fbfc 	bl	8001c18 <HAL_GetTick>
 8003420:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003422:	e009      	b.n	8003438 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003424:	f7fe fbf8 	bl	8001c18 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d902      	bls.n	8003438 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	73fb      	strb	r3, [r7, #15]
        break;
 8003436:	e005      	b.n	8003444 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003438:	4b36      	ldr	r3, [pc, #216]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e0>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1ef      	bne.n	8003424 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d15f      	bne.n	800350a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d110      	bne.n	8003472 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003450:	4b30      	ldr	r3, [pc, #192]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003458:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6892      	ldr	r2, [r2, #8]
 8003460:	0211      	lsls	r1, r2, #8
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68d2      	ldr	r2, [r2, #12]
 8003466:	06d2      	lsls	r2, r2, #27
 8003468:	430a      	orrs	r2, r1
 800346a:	492a      	ldr	r1, [pc, #168]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e0>)
 800346c:	4313      	orrs	r3, r2
 800346e:	610b      	str	r3, [r1, #16]
 8003470:	e027      	b.n	80034c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d112      	bne.n	800349e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003478:	4b26      	ldr	r3, [pc, #152]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e0>)
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003480:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6892      	ldr	r2, [r2, #8]
 8003488:	0211      	lsls	r1, r2, #8
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6912      	ldr	r2, [r2, #16]
 800348e:	0852      	lsrs	r2, r2, #1
 8003490:	3a01      	subs	r2, #1
 8003492:	0552      	lsls	r2, r2, #21
 8003494:	430a      	orrs	r2, r1
 8003496:	491f      	ldr	r1, [pc, #124]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003498:	4313      	orrs	r3, r2
 800349a:	610b      	str	r3, [r1, #16]
 800349c:	e011      	b.n	80034c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800349e:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6892      	ldr	r2, [r2, #8]
 80034ae:	0211      	lsls	r1, r2, #8
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6952      	ldr	r2, [r2, #20]
 80034b4:	0852      	lsrs	r2, r2, #1
 80034b6:	3a01      	subs	r2, #1
 80034b8:	0652      	lsls	r2, r2, #25
 80034ba:	430a      	orrs	r2, r1
 80034bc:	4915      	ldr	r1, [pc, #84]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80034c2:	4b14      	ldr	r3, [pc, #80]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a13      	ldr	r2, [pc, #76]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ce:	f7fe fba3 	bl	8001c18 <HAL_GetTick>
 80034d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034d4:	e009      	b.n	80034ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034d6:	f7fe fb9f 	bl	8001c18 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d902      	bls.n	80034ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	73fb      	strb	r3, [r7, #15]
          break;
 80034e8:	e005      	b.n	80034f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034ea:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0ef      	beq.n	80034d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d106      	bne.n	800350a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034fc:	4b05      	ldr	r3, [pc, #20]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	4903      	ldr	r1, [pc, #12]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003506:	4313      	orrs	r3, r2
 8003508:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800350a:	7bfb      	ldrb	r3, [r7, #15]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40021000 	.word	0x40021000

08003518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e049      	b.n	80035be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d106      	bne.n	8003544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fe f922 	bl	8001788 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3304      	adds	r3, #4
 8003554:	4619      	mov	r1, r3
 8003556:	4610      	mov	r0, r2
 8003558:	f000 fb52 	bl	8003c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e049      	b.n	800366c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d106      	bne.n	80035f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f841 	bl	8003674 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2202      	movs	r2, #2
 80035f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3304      	adds	r3, #4
 8003602:	4619      	mov	r1, r3
 8003604:	4610      	mov	r0, r2
 8003606:	f000 fafb 	bl	8003c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d109      	bne.n	80036ac <HAL_TIM_PWM_Start+0x24>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	bf14      	ite	ne
 80036a4:	2301      	movne	r3, #1
 80036a6:	2300      	moveq	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	e03c      	b.n	8003726 <HAL_TIM_PWM_Start+0x9e>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d109      	bne.n	80036c6 <HAL_TIM_PWM_Start+0x3e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	bf14      	ite	ne
 80036be:	2301      	movne	r3, #1
 80036c0:	2300      	moveq	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	e02f      	b.n	8003726 <HAL_TIM_PWM_Start+0x9e>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d109      	bne.n	80036e0 <HAL_TIM_PWM_Start+0x58>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	bf14      	ite	ne
 80036d8:	2301      	movne	r3, #1
 80036da:	2300      	moveq	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	e022      	b.n	8003726 <HAL_TIM_PWM_Start+0x9e>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2b0c      	cmp	r3, #12
 80036e4:	d109      	bne.n	80036fa <HAL_TIM_PWM_Start+0x72>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	bf14      	ite	ne
 80036f2:	2301      	movne	r3, #1
 80036f4:	2300      	moveq	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	e015      	b.n	8003726 <HAL_TIM_PWM_Start+0x9e>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b10      	cmp	r3, #16
 80036fe:	d109      	bne.n	8003714 <HAL_TIM_PWM_Start+0x8c>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b01      	cmp	r3, #1
 800370a:	bf14      	ite	ne
 800370c:	2301      	movne	r3, #1
 800370e:	2300      	moveq	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e008      	b.n	8003726 <HAL_TIM_PWM_Start+0x9e>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	bf14      	ite	ne
 8003720:	2301      	movne	r3, #1
 8003722:	2300      	moveq	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e07e      	b.n	800382c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d104      	bne.n	800373e <HAL_TIM_PWM_Start+0xb6>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800373c:	e023      	b.n	8003786 <HAL_TIM_PWM_Start+0xfe>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b04      	cmp	r3, #4
 8003742:	d104      	bne.n	800374e <HAL_TIM_PWM_Start+0xc6>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800374c:	e01b      	b.n	8003786 <HAL_TIM_PWM_Start+0xfe>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b08      	cmp	r3, #8
 8003752:	d104      	bne.n	800375e <HAL_TIM_PWM_Start+0xd6>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800375c:	e013      	b.n	8003786 <HAL_TIM_PWM_Start+0xfe>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b0c      	cmp	r3, #12
 8003762:	d104      	bne.n	800376e <HAL_TIM_PWM_Start+0xe6>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800376c:	e00b      	b.n	8003786 <HAL_TIM_PWM_Start+0xfe>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b10      	cmp	r3, #16
 8003772:	d104      	bne.n	800377e <HAL_TIM_PWM_Start+0xf6>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800377c:	e003      	b.n	8003786 <HAL_TIM_PWM_Start+0xfe>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2202      	movs	r2, #2
 8003782:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2201      	movs	r2, #1
 800378c:	6839      	ldr	r1, [r7, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fdb2 	bl	80042f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a26      	ldr	r2, [pc, #152]	; (8003834 <HAL_TIM_PWM_Start+0x1ac>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d009      	beq.n	80037b2 <HAL_TIM_PWM_Start+0x12a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a25      	ldr	r2, [pc, #148]	; (8003838 <HAL_TIM_PWM_Start+0x1b0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d004      	beq.n	80037b2 <HAL_TIM_PWM_Start+0x12a>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a23      	ldr	r2, [pc, #140]	; (800383c <HAL_TIM_PWM_Start+0x1b4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d101      	bne.n	80037b6 <HAL_TIM_PWM_Start+0x12e>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <HAL_TIM_PWM_Start+0x130>
 80037b6:	2300      	movs	r3, #0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d007      	beq.n	80037cc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a18      	ldr	r2, [pc, #96]	; (8003834 <HAL_TIM_PWM_Start+0x1ac>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d009      	beq.n	80037ea <HAL_TIM_PWM_Start+0x162>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037de:	d004      	beq.n	80037ea <HAL_TIM_PWM_Start+0x162>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a14      	ldr	r2, [pc, #80]	; (8003838 <HAL_TIM_PWM_Start+0x1b0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d115      	bne.n	8003816 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	4b13      	ldr	r3, [pc, #76]	; (8003840 <HAL_TIM_PWM_Start+0x1b8>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2b06      	cmp	r3, #6
 80037fa:	d015      	beq.n	8003828 <HAL_TIM_PWM_Start+0x1a0>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003802:	d011      	beq.n	8003828 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0201 	orr.w	r2, r2, #1
 8003812:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003814:	e008      	b.n	8003828 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0201 	orr.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	e000      	b.n	800382a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003828:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40012c00 	.word	0x40012c00
 8003838:	40014000 	.word	0x40014000
 800383c:	40014400 	.word	0x40014400
 8003840:	00010007 	.word	0x00010007

08003844 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800385e:	2302      	movs	r3, #2
 8003860:	e0ff      	b.n	8003a62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b14      	cmp	r3, #20
 800386e:	f200 80f0 	bhi.w	8003a52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003872:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003878:	080038cd 	.word	0x080038cd
 800387c:	08003a53 	.word	0x08003a53
 8003880:	08003a53 	.word	0x08003a53
 8003884:	08003a53 	.word	0x08003a53
 8003888:	0800390d 	.word	0x0800390d
 800388c:	08003a53 	.word	0x08003a53
 8003890:	08003a53 	.word	0x08003a53
 8003894:	08003a53 	.word	0x08003a53
 8003898:	0800394f 	.word	0x0800394f
 800389c:	08003a53 	.word	0x08003a53
 80038a0:	08003a53 	.word	0x08003a53
 80038a4:	08003a53 	.word	0x08003a53
 80038a8:	0800398f 	.word	0x0800398f
 80038ac:	08003a53 	.word	0x08003a53
 80038b0:	08003a53 	.word	0x08003a53
 80038b4:	08003a53 	.word	0x08003a53
 80038b8:	080039d1 	.word	0x080039d1
 80038bc:	08003a53 	.word	0x08003a53
 80038c0:	08003a53 	.word	0x08003a53
 80038c4:	08003a53 	.word	0x08003a53
 80038c8:	08003a11 	.word	0x08003a11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68b9      	ldr	r1, [r7, #8]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 f9f8 	bl	8003cc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0208 	orr.w	r2, r2, #8
 80038e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699a      	ldr	r2, [r3, #24]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0204 	bic.w	r2, r2, #4
 80038f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6999      	ldr	r1, [r3, #24]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	619a      	str	r2, [r3, #24]
      break;
 800390a:	e0a5      	b.n	8003a58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68b9      	ldr	r1, [r7, #8]
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fa54 	bl	8003dc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699a      	ldr	r2, [r3, #24]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003926:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003936:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6999      	ldr	r1, [r3, #24]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	021a      	lsls	r2, r3, #8
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	619a      	str	r2, [r3, #24]
      break;
 800394c:	e084      	b.n	8003a58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68b9      	ldr	r1, [r7, #8]
 8003954:	4618      	mov	r0, r3
 8003956:	f000 faad 	bl	8003eb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69da      	ldr	r2, [r3, #28]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 0208 	orr.w	r2, r2, #8
 8003968:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69da      	ldr	r2, [r3, #28]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0204 	bic.w	r2, r2, #4
 8003978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69d9      	ldr	r1, [r3, #28]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	61da      	str	r2, [r3, #28]
      break;
 800398c:	e064      	b.n	8003a58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68b9      	ldr	r1, [r7, #8]
 8003994:	4618      	mov	r0, r3
 8003996:	f000 fb05 	bl	8003fa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69da      	ldr	r2, [r3, #28]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69da      	ldr	r2, [r3, #28]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69d9      	ldr	r1, [r3, #28]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	021a      	lsls	r2, r3, #8
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	61da      	str	r2, [r3, #28]
      break;
 80039ce:	e043      	b.n	8003a58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 fb42 	bl	8004060 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0208 	orr.w	r2, r2, #8
 80039ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0204 	bic.w	r2, r2, #4
 80039fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	691a      	ldr	r2, [r3, #16]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a0e:	e023      	b.n	8003a58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68b9      	ldr	r1, [r7, #8]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fb7a 	bl	8004110 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	021a      	lsls	r2, r3, #8
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a50:	e002      	b.n	8003a58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	75fb      	strb	r3, [r7, #23]
      break;
 8003a56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop

08003a6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_TIM_ConfigClockSource+0x1c>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e0b6      	b.n	8003bf6 <HAL_TIM_ConfigClockSource+0x18a>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003aaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ab2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac4:	d03e      	beq.n	8003b44 <HAL_TIM_ConfigClockSource+0xd8>
 8003ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aca:	f200 8087 	bhi.w	8003bdc <HAL_TIM_ConfigClockSource+0x170>
 8003ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad2:	f000 8086 	beq.w	8003be2 <HAL_TIM_ConfigClockSource+0x176>
 8003ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ada:	d87f      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x170>
 8003adc:	2b70      	cmp	r3, #112	; 0x70
 8003ade:	d01a      	beq.n	8003b16 <HAL_TIM_ConfigClockSource+0xaa>
 8003ae0:	2b70      	cmp	r3, #112	; 0x70
 8003ae2:	d87b      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x170>
 8003ae4:	2b60      	cmp	r3, #96	; 0x60
 8003ae6:	d050      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x11e>
 8003ae8:	2b60      	cmp	r3, #96	; 0x60
 8003aea:	d877      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x170>
 8003aec:	2b50      	cmp	r3, #80	; 0x50
 8003aee:	d03c      	beq.n	8003b6a <HAL_TIM_ConfigClockSource+0xfe>
 8003af0:	2b50      	cmp	r3, #80	; 0x50
 8003af2:	d873      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x170>
 8003af4:	2b40      	cmp	r3, #64	; 0x40
 8003af6:	d058      	beq.n	8003baa <HAL_TIM_ConfigClockSource+0x13e>
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d86f      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x170>
 8003afc:	2b30      	cmp	r3, #48	; 0x30
 8003afe:	d064      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0x15e>
 8003b00:	2b30      	cmp	r3, #48	; 0x30
 8003b02:	d86b      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x170>
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	d060      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0x15e>
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d867      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x170>
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d05c      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0x15e>
 8003b10:	2b10      	cmp	r3, #16
 8003b12:	d05a      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0x15e>
 8003b14:	e062      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b26:	f000 fbc7 	bl	80042b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	609a      	str	r2, [r3, #8]
      break;
 8003b42:	e04f      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b54:	f000 fbb0 	bl	80042b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b66:	609a      	str	r2, [r3, #8]
      break;
 8003b68:	e03c      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b76:	461a      	mov	r2, r3
 8003b78:	f000 fb24 	bl	80041c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2150      	movs	r1, #80	; 0x50
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fb7d 	bl	8004282 <TIM_ITRx_SetConfig>
      break;
 8003b88:	e02c      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b96:	461a      	mov	r2, r3
 8003b98:	f000 fb43 	bl	8004222 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2160      	movs	r1, #96	; 0x60
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fb6d 	bl	8004282 <TIM_ITRx_SetConfig>
      break;
 8003ba8:	e01c      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f000 fb04 	bl	80041c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2140      	movs	r1, #64	; 0x40
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fb5d 	bl	8004282 <TIM_ITRx_SetConfig>
      break;
 8003bc8:	e00c      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	f000 fb54 	bl	8004282 <TIM_ITRx_SetConfig>
      break;
 8003bda:	e003      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
      break;
 8003be0:	e000      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003be2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a2a      	ldr	r2, [pc, #168]	; (8003cbc <TIM_Base_SetConfig+0xbc>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d003      	beq.n	8003c20 <TIM_Base_SetConfig+0x20>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1e:	d108      	bne.n	8003c32 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a21      	ldr	r2, [pc, #132]	; (8003cbc <TIM_Base_SetConfig+0xbc>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00b      	beq.n	8003c52 <TIM_Base_SetConfig+0x52>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c40:	d007      	beq.n	8003c52 <TIM_Base_SetConfig+0x52>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a1e      	ldr	r2, [pc, #120]	; (8003cc0 <TIM_Base_SetConfig+0xc0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d003      	beq.n	8003c52 <TIM_Base_SetConfig+0x52>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a1d      	ldr	r2, [pc, #116]	; (8003cc4 <TIM_Base_SetConfig+0xc4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d108      	bne.n	8003c64 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a0c      	ldr	r2, [pc, #48]	; (8003cbc <TIM_Base_SetConfig+0xbc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d007      	beq.n	8003ca0 <TIM_Base_SetConfig+0xa0>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a0b      	ldr	r2, [pc, #44]	; (8003cc0 <TIM_Base_SetConfig+0xc0>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d003      	beq.n	8003ca0 <TIM_Base_SetConfig+0xa0>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a0a      	ldr	r2, [pc, #40]	; (8003cc4 <TIM_Base_SetConfig+0xc4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d103      	bne.n	8003ca8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	615a      	str	r2, [r3, #20]
}
 8003cae:	bf00      	nop
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40012c00 	.word	0x40012c00
 8003cc0:	40014000 	.word	0x40014000
 8003cc4:	40014400 	.word	0x40014400

08003cc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	f023 0201 	bic.w	r2, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 0303 	bic.w	r3, r3, #3
 8003d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f023 0302 	bic.w	r3, r3, #2
 8003d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a24      	ldr	r2, [pc, #144]	; (8003db4 <TIM_OC1_SetConfig+0xec>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d007      	beq.n	8003d38 <TIM_OC1_SetConfig+0x70>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a23      	ldr	r2, [pc, #140]	; (8003db8 <TIM_OC1_SetConfig+0xf0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d003      	beq.n	8003d38 <TIM_OC1_SetConfig+0x70>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a22      	ldr	r2, [pc, #136]	; (8003dbc <TIM_OC1_SetConfig+0xf4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d10c      	bne.n	8003d52 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f023 0308 	bic.w	r3, r3, #8
 8003d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f023 0304 	bic.w	r3, r3, #4
 8003d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a17      	ldr	r2, [pc, #92]	; (8003db4 <TIM_OC1_SetConfig+0xec>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d007      	beq.n	8003d6a <TIM_OC1_SetConfig+0xa2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a16      	ldr	r2, [pc, #88]	; (8003db8 <TIM_OC1_SetConfig+0xf0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d003      	beq.n	8003d6a <TIM_OC1_SetConfig+0xa2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a15      	ldr	r2, [pc, #84]	; (8003dbc <TIM_OC1_SetConfig+0xf4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d111      	bne.n	8003d8e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	621a      	str	r2, [r3, #32]
}
 8003da8:	bf00      	nop
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	40012c00 	.word	0x40012c00
 8003db8:	40014000 	.word	0x40014000
 8003dbc:	40014400 	.word	0x40014400

08003dc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	f023 0210 	bic.w	r2, r3, #16
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	021b      	lsls	r3, r3, #8
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f023 0320 	bic.w	r3, r3, #32
 8003e0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a22      	ldr	r2, [pc, #136]	; (8003ea8 <TIM_OC2_SetConfig+0xe8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d10d      	bne.n	8003e40 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a19      	ldr	r2, [pc, #100]	; (8003ea8 <TIM_OC2_SetConfig+0xe8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d007      	beq.n	8003e58 <TIM_OC2_SetConfig+0x98>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a18      	ldr	r2, [pc, #96]	; (8003eac <TIM_OC2_SetConfig+0xec>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d003      	beq.n	8003e58 <TIM_OC2_SetConfig+0x98>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a17      	ldr	r2, [pc, #92]	; (8003eb0 <TIM_OC2_SetConfig+0xf0>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d113      	bne.n	8003e80 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	621a      	str	r2, [r3, #32]
}
 8003e9a:	bf00      	nop
 8003e9c:	371c      	adds	r7, #28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40012c00 	.word	0x40012c00
 8003eac:	40014000 	.word	0x40014000
 8003eb0:	40014400 	.word	0x40014400

08003eb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0303 	bic.w	r3, r3, #3
 8003eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a21      	ldr	r2, [pc, #132]	; (8003f98 <TIM_OC3_SetConfig+0xe4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d10d      	bne.n	8003f32 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a18      	ldr	r2, [pc, #96]	; (8003f98 <TIM_OC3_SetConfig+0xe4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d007      	beq.n	8003f4a <TIM_OC3_SetConfig+0x96>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a17      	ldr	r2, [pc, #92]	; (8003f9c <TIM_OC3_SetConfig+0xe8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d003      	beq.n	8003f4a <TIM_OC3_SetConfig+0x96>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a16      	ldr	r2, [pc, #88]	; (8003fa0 <TIM_OC3_SetConfig+0xec>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d113      	bne.n	8003f72 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	621a      	str	r2, [r3, #32]
}
 8003f8c:	bf00      	nop
 8003f8e:	371c      	adds	r7, #28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	40012c00 	.word	0x40012c00
 8003f9c:	40014000 	.word	0x40014000
 8003fa0:	40014400 	.word	0x40014400

08003fa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	021b      	lsls	r3, r3, #8
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	031b      	lsls	r3, r3, #12
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a14      	ldr	r2, [pc, #80]	; (8004054 <TIM_OC4_SetConfig+0xb0>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d007      	beq.n	8004018 <TIM_OC4_SetConfig+0x74>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a13      	ldr	r2, [pc, #76]	; (8004058 <TIM_OC4_SetConfig+0xb4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d003      	beq.n	8004018 <TIM_OC4_SetConfig+0x74>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a12      	ldr	r2, [pc, #72]	; (800405c <TIM_OC4_SetConfig+0xb8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d109      	bne.n	800402c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800401e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	019b      	lsls	r3, r3, #6
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4313      	orrs	r3, r2
 800402a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	621a      	str	r2, [r3, #32]
}
 8004046:	bf00      	nop
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40012c00 	.word	0x40012c00
 8004058:	40014000 	.word	0x40014000
 800405c:	40014400 	.word	0x40014400

08004060 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800408e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80040a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	041b      	lsls	r3, r3, #16
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a13      	ldr	r2, [pc, #76]	; (8004104 <TIM_OC5_SetConfig+0xa4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d007      	beq.n	80040ca <TIM_OC5_SetConfig+0x6a>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a12      	ldr	r2, [pc, #72]	; (8004108 <TIM_OC5_SetConfig+0xa8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_OC5_SetConfig+0x6a>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a11      	ldr	r2, [pc, #68]	; (800410c <TIM_OC5_SetConfig+0xac>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d109      	bne.n	80040de <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	021b      	lsls	r3, r3, #8
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	621a      	str	r2, [r3, #32]
}
 80040f8:	bf00      	nop
 80040fa:	371c      	adds	r7, #28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	40012c00 	.word	0x40012c00
 8004108:	40014000 	.word	0x40014000
 800410c:	40014400 	.word	0x40014400

08004110 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800413e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	021b      	lsls	r3, r3, #8
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4313      	orrs	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	051b      	lsls	r3, r3, #20
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a14      	ldr	r2, [pc, #80]	; (80041b8 <TIM_OC6_SetConfig+0xa8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d007      	beq.n	800417c <TIM_OC6_SetConfig+0x6c>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a13      	ldr	r2, [pc, #76]	; (80041bc <TIM_OC6_SetConfig+0xac>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d003      	beq.n	800417c <TIM_OC6_SetConfig+0x6c>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a12      	ldr	r2, [pc, #72]	; (80041c0 <TIM_OC6_SetConfig+0xb0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d109      	bne.n	8004190 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004182:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	029b      	lsls	r3, r3, #10
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40012c00 	.word	0x40012c00
 80041bc:	40014000 	.word	0x40014000
 80041c0:	40014400 	.word	0x40014400

080041c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	f023 0201 	bic.w	r2, r3, #1
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f023 030a 	bic.w	r3, r3, #10
 8004200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	621a      	str	r2, [r3, #32]
}
 8004216:	bf00      	nop
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004222:	b480      	push	{r7}
 8004224:	b087      	sub	sp, #28
 8004226:	af00      	add	r7, sp, #0
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f023 0210 	bic.w	r2, r3, #16
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800424c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	031b      	lsls	r3, r3, #12
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800425e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	621a      	str	r2, [r3, #32]
}
 8004276:	bf00      	nop
 8004278:	371c      	adds	r7, #28
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004282:	b480      	push	{r7}
 8004284:	b085      	sub	sp, #20
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004298:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	f043 0307 	orr.w	r3, r3, #7
 80042a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	609a      	str	r2, [r3, #8]
}
 80042ac:	bf00      	nop
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	021a      	lsls	r2, r3, #8
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	431a      	orrs	r2, r3
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4313      	orrs	r3, r2
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	609a      	str	r2, [r3, #8]
}
 80042ec:	bf00      	nop
 80042ee:	371c      	adds	r7, #28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	2201      	movs	r2, #1
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a1a      	ldr	r2, [r3, #32]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	43db      	mvns	r3, r3
 800431a:	401a      	ands	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a1a      	ldr	r2, [r3, #32]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f003 031f 	and.w	r3, r3, #31
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	fa01 f303 	lsl.w	r3, r1, r3
 8004330:	431a      	orrs	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	621a      	str	r2, [r3, #32]
}
 8004336:	bf00      	nop
 8004338:	371c      	adds	r7, #28
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004358:	2302      	movs	r3, #2
 800435a:	e04f      	b.n	80043fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a21      	ldr	r2, [pc, #132]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d108      	bne.n	8004398 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800438c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4313      	orrs	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a14      	ldr	r2, [pc, #80]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d009      	beq.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c4:	d004      	beq.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a10      	ldr	r2, [pc, #64]	; (800440c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d10c      	bne.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	40012c00 	.word	0x40012c00
 800440c:	40014000 	.word	0x40014000

08004410 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e040      	b.n	80044a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004426:	2b00      	cmp	r3, #0
 8004428:	d106      	bne.n	8004438 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fd f9fa 	bl	800182c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2224      	movs	r2, #36	; 0x24
 800443c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0201 	bic.w	r2, r2, #1
 800444c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fb0c 	bl	8004a74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f8af 	bl	80045c0 <UART_SetConfig>
 8004462:	4603      	mov	r3, r0
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e01b      	b.n	80044a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800447a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800448a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0201 	orr.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fb8b 	bl	8004bb8 <UART_CheckIdleState>
 80044a2:	4603      	mov	r3, r0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08a      	sub	sp, #40	; 0x28
 80044b0:	af02      	add	r7, sp, #8
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	4613      	mov	r3, r2
 80044ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d178      	bne.n	80045b6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <HAL_UART_Transmit+0x24>
 80044ca:	88fb      	ldrh	r3, [r7, #6]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e071      	b.n	80045b8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2221      	movs	r2, #33	; 0x21
 80044e0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044e2:	f7fd fb99 	bl	8001c18 <HAL_GetTick>
 80044e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	88fa      	ldrh	r2, [r7, #6]
 80044ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	88fa      	ldrh	r2, [r7, #6]
 80044f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004500:	d108      	bne.n	8004514 <HAL_UART_Transmit+0x68>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d104      	bne.n	8004514 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800450a:	2300      	movs	r3, #0
 800450c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	61bb      	str	r3, [r7, #24]
 8004512:	e003      	b.n	800451c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004518:	2300      	movs	r3, #0
 800451a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800451c:	e030      	b.n	8004580 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2200      	movs	r2, #0
 8004526:	2180      	movs	r1, #128	; 0x80
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 fbed 	bl	8004d08 <UART_WaitOnFlagUntilTimeout>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d004      	beq.n	800453e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e03c      	b.n	80045b8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10b      	bne.n	800455c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	881a      	ldrh	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004550:	b292      	uxth	r2, r2
 8004552:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	3302      	adds	r3, #2
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	e008      	b.n	800456e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	781a      	ldrb	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	b292      	uxth	r2, r2
 8004566:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	3301      	adds	r3, #1
 800456c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004574:	b29b      	uxth	r3, r3
 8004576:	3b01      	subs	r3, #1
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004586:	b29b      	uxth	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1c8      	bne.n	800451e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2200      	movs	r2, #0
 8004594:	2140      	movs	r1, #64	; 0x40
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 fbb6 	bl	8004d08 <UART_WaitOnFlagUntilTimeout>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d004      	beq.n	80045ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2220      	movs	r2, #32
 80045a6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e005      	b.n	80045b8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2220      	movs	r2, #32
 80045b0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	e000      	b.n	80045b8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80045b6:	2302      	movs	r3, #2
  }
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3720      	adds	r7, #32
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045c4:	b08a      	sub	sp, #40	; 0x28
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	431a      	orrs	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	431a      	orrs	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	4b9e      	ldr	r3, [pc, #632]	; (8004868 <UART_SetConfig+0x2a8>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	6812      	ldr	r2, [r2, #0]
 80045f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045f8:	430b      	orrs	r3, r1
 80045fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	68da      	ldr	r2, [r3, #12]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a93      	ldr	r2, [pc, #588]	; (800486c <UART_SetConfig+0x2ac>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d004      	beq.n	800462c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004628:	4313      	orrs	r3, r2
 800462a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463c:	430a      	orrs	r2, r1
 800463e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a8a      	ldr	r2, [pc, #552]	; (8004870 <UART_SetConfig+0x2b0>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d126      	bne.n	8004698 <UART_SetConfig+0xd8>
 800464a:	4b8a      	ldr	r3, [pc, #552]	; (8004874 <UART_SetConfig+0x2b4>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	2b03      	cmp	r3, #3
 8004656:	d81b      	bhi.n	8004690 <UART_SetConfig+0xd0>
 8004658:	a201      	add	r2, pc, #4	; (adr r2, 8004660 <UART_SetConfig+0xa0>)
 800465a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465e:	bf00      	nop
 8004660:	08004671 	.word	0x08004671
 8004664:	08004681 	.word	0x08004681
 8004668:	08004679 	.word	0x08004679
 800466c:	08004689 	.word	0x08004689
 8004670:	2301      	movs	r3, #1
 8004672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004676:	e0ab      	b.n	80047d0 <UART_SetConfig+0x210>
 8004678:	2302      	movs	r3, #2
 800467a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800467e:	e0a7      	b.n	80047d0 <UART_SetConfig+0x210>
 8004680:	2304      	movs	r3, #4
 8004682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004686:	e0a3      	b.n	80047d0 <UART_SetConfig+0x210>
 8004688:	2308      	movs	r3, #8
 800468a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800468e:	e09f      	b.n	80047d0 <UART_SetConfig+0x210>
 8004690:	2310      	movs	r3, #16
 8004692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004696:	e09b      	b.n	80047d0 <UART_SetConfig+0x210>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a76      	ldr	r2, [pc, #472]	; (8004878 <UART_SetConfig+0x2b8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d138      	bne.n	8004714 <UART_SetConfig+0x154>
 80046a2:	4b74      	ldr	r3, [pc, #464]	; (8004874 <UART_SetConfig+0x2b4>)
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a8:	f003 030c 	and.w	r3, r3, #12
 80046ac:	2b0c      	cmp	r3, #12
 80046ae:	d82d      	bhi.n	800470c <UART_SetConfig+0x14c>
 80046b0:	a201      	add	r2, pc, #4	; (adr r2, 80046b8 <UART_SetConfig+0xf8>)
 80046b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b6:	bf00      	nop
 80046b8:	080046ed 	.word	0x080046ed
 80046bc:	0800470d 	.word	0x0800470d
 80046c0:	0800470d 	.word	0x0800470d
 80046c4:	0800470d 	.word	0x0800470d
 80046c8:	080046fd 	.word	0x080046fd
 80046cc:	0800470d 	.word	0x0800470d
 80046d0:	0800470d 	.word	0x0800470d
 80046d4:	0800470d 	.word	0x0800470d
 80046d8:	080046f5 	.word	0x080046f5
 80046dc:	0800470d 	.word	0x0800470d
 80046e0:	0800470d 	.word	0x0800470d
 80046e4:	0800470d 	.word	0x0800470d
 80046e8:	08004705 	.word	0x08004705
 80046ec:	2300      	movs	r3, #0
 80046ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f2:	e06d      	b.n	80047d0 <UART_SetConfig+0x210>
 80046f4:	2302      	movs	r3, #2
 80046f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046fa:	e069      	b.n	80047d0 <UART_SetConfig+0x210>
 80046fc:	2304      	movs	r3, #4
 80046fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004702:	e065      	b.n	80047d0 <UART_SetConfig+0x210>
 8004704:	2308      	movs	r3, #8
 8004706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470a:	e061      	b.n	80047d0 <UART_SetConfig+0x210>
 800470c:	2310      	movs	r3, #16
 800470e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004712:	e05d      	b.n	80047d0 <UART_SetConfig+0x210>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a58      	ldr	r2, [pc, #352]	; (800487c <UART_SetConfig+0x2bc>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d125      	bne.n	800476a <UART_SetConfig+0x1aa>
 800471e:	4b55      	ldr	r3, [pc, #340]	; (8004874 <UART_SetConfig+0x2b4>)
 8004720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004724:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004728:	2b30      	cmp	r3, #48	; 0x30
 800472a:	d016      	beq.n	800475a <UART_SetConfig+0x19a>
 800472c:	2b30      	cmp	r3, #48	; 0x30
 800472e:	d818      	bhi.n	8004762 <UART_SetConfig+0x1a2>
 8004730:	2b20      	cmp	r3, #32
 8004732:	d00a      	beq.n	800474a <UART_SetConfig+0x18a>
 8004734:	2b20      	cmp	r3, #32
 8004736:	d814      	bhi.n	8004762 <UART_SetConfig+0x1a2>
 8004738:	2b00      	cmp	r3, #0
 800473a:	d002      	beq.n	8004742 <UART_SetConfig+0x182>
 800473c:	2b10      	cmp	r3, #16
 800473e:	d008      	beq.n	8004752 <UART_SetConfig+0x192>
 8004740:	e00f      	b.n	8004762 <UART_SetConfig+0x1a2>
 8004742:	2300      	movs	r3, #0
 8004744:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004748:	e042      	b.n	80047d0 <UART_SetConfig+0x210>
 800474a:	2302      	movs	r3, #2
 800474c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004750:	e03e      	b.n	80047d0 <UART_SetConfig+0x210>
 8004752:	2304      	movs	r3, #4
 8004754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004758:	e03a      	b.n	80047d0 <UART_SetConfig+0x210>
 800475a:	2308      	movs	r3, #8
 800475c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004760:	e036      	b.n	80047d0 <UART_SetConfig+0x210>
 8004762:	2310      	movs	r3, #16
 8004764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004768:	e032      	b.n	80047d0 <UART_SetConfig+0x210>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a3f      	ldr	r2, [pc, #252]	; (800486c <UART_SetConfig+0x2ac>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d12a      	bne.n	80047ca <UART_SetConfig+0x20a>
 8004774:	4b3f      	ldr	r3, [pc, #252]	; (8004874 <UART_SetConfig+0x2b4>)
 8004776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800477e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004782:	d01a      	beq.n	80047ba <UART_SetConfig+0x1fa>
 8004784:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004788:	d81b      	bhi.n	80047c2 <UART_SetConfig+0x202>
 800478a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800478e:	d00c      	beq.n	80047aa <UART_SetConfig+0x1ea>
 8004790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004794:	d815      	bhi.n	80047c2 <UART_SetConfig+0x202>
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <UART_SetConfig+0x1e2>
 800479a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800479e:	d008      	beq.n	80047b2 <UART_SetConfig+0x1f2>
 80047a0:	e00f      	b.n	80047c2 <UART_SetConfig+0x202>
 80047a2:	2300      	movs	r3, #0
 80047a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a8:	e012      	b.n	80047d0 <UART_SetConfig+0x210>
 80047aa:	2302      	movs	r3, #2
 80047ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047b0:	e00e      	b.n	80047d0 <UART_SetConfig+0x210>
 80047b2:	2304      	movs	r3, #4
 80047b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047b8:	e00a      	b.n	80047d0 <UART_SetConfig+0x210>
 80047ba:	2308      	movs	r3, #8
 80047bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047c0:	e006      	b.n	80047d0 <UART_SetConfig+0x210>
 80047c2:	2310      	movs	r3, #16
 80047c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047c8:	e002      	b.n	80047d0 <UART_SetConfig+0x210>
 80047ca:	2310      	movs	r3, #16
 80047cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a25      	ldr	r2, [pc, #148]	; (800486c <UART_SetConfig+0x2ac>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	f040 808a 	bne.w	80048f0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d824      	bhi.n	800482e <UART_SetConfig+0x26e>
 80047e4:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <UART_SetConfig+0x22c>)
 80047e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ea:	bf00      	nop
 80047ec:	08004811 	.word	0x08004811
 80047f0:	0800482f 	.word	0x0800482f
 80047f4:	08004819 	.word	0x08004819
 80047f8:	0800482f 	.word	0x0800482f
 80047fc:	0800481f 	.word	0x0800481f
 8004800:	0800482f 	.word	0x0800482f
 8004804:	0800482f 	.word	0x0800482f
 8004808:	0800482f 	.word	0x0800482f
 800480c:	08004827 	.word	0x08004827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004810:	f7fe faba 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8004814:	61f8      	str	r0, [r7, #28]
        break;
 8004816:	e010      	b.n	800483a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004818:	4b19      	ldr	r3, [pc, #100]	; (8004880 <UART_SetConfig+0x2c0>)
 800481a:	61fb      	str	r3, [r7, #28]
        break;
 800481c:	e00d      	b.n	800483a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800481e:	f7fe fa1b 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8004822:	61f8      	str	r0, [r7, #28]
        break;
 8004824:	e009      	b.n	800483a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800482a:	61fb      	str	r3, [r7, #28]
        break;
 800482c:	e005      	b.n	800483a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004838:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 8109 	beq.w	8004a54 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	4413      	add	r3, r2
 800484c:	69fa      	ldr	r2, [r7, #28]
 800484e:	429a      	cmp	r2, r3
 8004850:	d305      	bcc.n	800485e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004858:	69fa      	ldr	r2, [r7, #28]
 800485a:	429a      	cmp	r2, r3
 800485c:	d912      	bls.n	8004884 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004864:	e0f6      	b.n	8004a54 <UART_SetConfig+0x494>
 8004866:	bf00      	nop
 8004868:	efff69f3 	.word	0xefff69f3
 800486c:	40008000 	.word	0x40008000
 8004870:	40013800 	.word	0x40013800
 8004874:	40021000 	.word	0x40021000
 8004878:	40004400 	.word	0x40004400
 800487c:	40004800 	.word	0x40004800
 8004880:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	2200      	movs	r2, #0
 8004888:	461c      	mov	r4, r3
 800488a:	4615      	mov	r5, r2
 800488c:	f04f 0200 	mov.w	r2, #0
 8004890:	f04f 0300 	mov.w	r3, #0
 8004894:	022b      	lsls	r3, r5, #8
 8004896:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800489a:	0222      	lsls	r2, r4, #8
 800489c:	68f9      	ldr	r1, [r7, #12]
 800489e:	6849      	ldr	r1, [r1, #4]
 80048a0:	0849      	lsrs	r1, r1, #1
 80048a2:	2000      	movs	r0, #0
 80048a4:	4688      	mov	r8, r1
 80048a6:	4681      	mov	r9, r0
 80048a8:	eb12 0a08 	adds.w	sl, r2, r8
 80048ac:	eb43 0b09 	adc.w	fp, r3, r9
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	607a      	str	r2, [r7, #4]
 80048ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048be:	4650      	mov	r0, sl
 80048c0:	4659      	mov	r1, fp
 80048c2:	f7fc f971 	bl	8000ba8 <__aeabi_uldivmod>
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	4613      	mov	r3, r2
 80048cc:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048d4:	d308      	bcc.n	80048e8 <UART_SetConfig+0x328>
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048dc:	d204      	bcs.n	80048e8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	60da      	str	r2, [r3, #12]
 80048e6:	e0b5      	b.n	8004a54 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048ee:	e0b1      	b.n	8004a54 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f8:	d15d      	bne.n	80049b6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80048fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d827      	bhi.n	8004952 <UART_SetConfig+0x392>
 8004902:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <UART_SetConfig+0x348>)
 8004904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004908:	0800492d 	.word	0x0800492d
 800490c:	08004935 	.word	0x08004935
 8004910:	0800493d 	.word	0x0800493d
 8004914:	08004953 	.word	0x08004953
 8004918:	08004943 	.word	0x08004943
 800491c:	08004953 	.word	0x08004953
 8004920:	08004953 	.word	0x08004953
 8004924:	08004953 	.word	0x08004953
 8004928:	0800494b 	.word	0x0800494b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800492c:	f7fe fa2c 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8004930:	61f8      	str	r0, [r7, #28]
        break;
 8004932:	e014      	b.n	800495e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004934:	f7fe fa3e 	bl	8002db4 <HAL_RCC_GetPCLK2Freq>
 8004938:	61f8      	str	r0, [r7, #28]
        break;
 800493a:	e010      	b.n	800495e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800493c:	4b4c      	ldr	r3, [pc, #304]	; (8004a70 <UART_SetConfig+0x4b0>)
 800493e:	61fb      	str	r3, [r7, #28]
        break;
 8004940:	e00d      	b.n	800495e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004942:	f7fe f989 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8004946:	61f8      	str	r0, [r7, #28]
        break;
 8004948:	e009      	b.n	800495e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800494a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800494e:	61fb      	str	r3, [r7, #28]
        break;
 8004950:	e005      	b.n	800495e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800495c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d077      	beq.n	8004a54 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	005a      	lsls	r2, r3, #1
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	085b      	lsrs	r3, r3, #1
 800496e:	441a      	add	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	2b0f      	cmp	r3, #15
 800497e:	d916      	bls.n	80049ae <UART_SetConfig+0x3ee>
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004986:	d212      	bcs.n	80049ae <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	b29b      	uxth	r3, r3
 800498c:	f023 030f 	bic.w	r3, r3, #15
 8004990:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	085b      	lsrs	r3, r3, #1
 8004996:	b29b      	uxth	r3, r3
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	b29a      	uxth	r2, r3
 800499e:	8afb      	ldrh	r3, [r7, #22]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	8afa      	ldrh	r2, [r7, #22]
 80049aa:	60da      	str	r2, [r3, #12]
 80049ac:	e052      	b.n	8004a54 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049b4:	e04e      	b.n	8004a54 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d827      	bhi.n	8004a0e <UART_SetConfig+0x44e>
 80049be:	a201      	add	r2, pc, #4	; (adr r2, 80049c4 <UART_SetConfig+0x404>)
 80049c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c4:	080049e9 	.word	0x080049e9
 80049c8:	080049f1 	.word	0x080049f1
 80049cc:	080049f9 	.word	0x080049f9
 80049d0:	08004a0f 	.word	0x08004a0f
 80049d4:	080049ff 	.word	0x080049ff
 80049d8:	08004a0f 	.word	0x08004a0f
 80049dc:	08004a0f 	.word	0x08004a0f
 80049e0:	08004a0f 	.word	0x08004a0f
 80049e4:	08004a07 	.word	0x08004a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049e8:	f7fe f9ce 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 80049ec:	61f8      	str	r0, [r7, #28]
        break;
 80049ee:	e014      	b.n	8004a1a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049f0:	f7fe f9e0 	bl	8002db4 <HAL_RCC_GetPCLK2Freq>
 80049f4:	61f8      	str	r0, [r7, #28]
        break;
 80049f6:	e010      	b.n	8004a1a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049f8:	4b1d      	ldr	r3, [pc, #116]	; (8004a70 <UART_SetConfig+0x4b0>)
 80049fa:	61fb      	str	r3, [r7, #28]
        break;
 80049fc:	e00d      	b.n	8004a1a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049fe:	f7fe f92b 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8004a02:	61f8      	str	r0, [r7, #28]
        break;
 8004a04:	e009      	b.n	8004a1a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a0a:	61fb      	str	r3, [r7, #28]
        break;
 8004a0c:	e005      	b.n	8004a1a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a18:	bf00      	nop
    }

    if (pclk != 0U)
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d019      	beq.n	8004a54 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	085a      	lsrs	r2, r3, #1
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	441a      	add	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a32:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	2b0f      	cmp	r3, #15
 8004a38:	d909      	bls.n	8004a4e <UART_SetConfig+0x48e>
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a40:	d205      	bcs.n	8004a4e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	60da      	str	r2, [r3, #12]
 8004a4c:	e002      	b.n	8004a54 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004a60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3728      	adds	r7, #40	; 0x28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a6e:	bf00      	nop
 8004a70:	00f42400 	.word	0x00f42400

08004a74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00a      	beq.n	8004ae2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	f003 0304 	and.w	r3, r3, #4
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	f003 0310 	and.w	r3, r3, #16
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00a      	beq.n	8004b26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	f003 0320 	and.w	r3, r3, #32
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d01a      	beq.n	8004b8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b72:	d10a      	bne.n	8004b8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	605a      	str	r2, [r3, #4]
  }
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b098      	sub	sp, #96	; 0x60
 8004bbc:	af02      	add	r7, sp, #8
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bc8:	f7fd f826 	bl	8001c18 <HAL_GetTick>
 8004bcc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0308 	and.w	r3, r3, #8
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d12e      	bne.n	8004c3a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004be4:	2200      	movs	r2, #0
 8004be6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f88c 	bl	8004d08 <UART_WaitOnFlagUntilTimeout>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d021      	beq.n	8004c3a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfe:	e853 3f00 	ldrex	r3, [r3]
 8004c02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c0a:	653b      	str	r3, [r7, #80]	; 0x50
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c14:	647b      	str	r3, [r7, #68]	; 0x44
 8004c16:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c1c:	e841 2300 	strex	r3, r2, [r1]
 8004c20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1e6      	bne.n	8004bf6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e062      	b.n	8004d00 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	d149      	bne.n	8004cdc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c50:	2200      	movs	r2, #0
 8004c52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f856 	bl	8004d08 <UART_WaitOnFlagUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d03c      	beq.n	8004cdc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	e853 3f00 	ldrex	r3, [r3]
 8004c6e:	623b      	str	r3, [r7, #32]
   return(result);
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c80:	633b      	str	r3, [r7, #48]	; 0x30
 8004c82:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c88:	e841 2300 	strex	r3, r2, [r1]
 8004c8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e6      	bne.n	8004c62 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3308      	adds	r3, #8
 8004c9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	e853 3f00 	ldrex	r3, [r3]
 8004ca2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0301 	bic.w	r3, r3, #1
 8004caa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3308      	adds	r3, #8
 8004cb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cb4:	61fa      	str	r2, [r7, #28]
 8004cb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb8:	69b9      	ldr	r1, [r7, #24]
 8004cba:	69fa      	ldr	r2, [r7, #28]
 8004cbc:	e841 2300 	strex	r3, r2, [r1]
 8004cc0:	617b      	str	r3, [r7, #20]
   return(result);
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1e5      	bne.n	8004c94 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e011      	b.n	8004d00 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3758      	adds	r7, #88	; 0x58
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	4613      	mov	r3, r2
 8004d16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d18:	e049      	b.n	8004dae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d20:	d045      	beq.n	8004dae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d22:	f7fc ff79 	bl	8001c18 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d302      	bcc.n	8004d38 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e048      	b.n	8004dce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d031      	beq.n	8004dae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d110      	bne.n	8004d7a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2208      	movs	r2, #8
 8004d5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 f838 	bl	8004dd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2208      	movs	r2, #8
 8004d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e029      	b.n	8004dce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d88:	d111      	bne.n	8004dae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 f81e 	bl	8004dd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e00f      	b.n	8004dce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	69da      	ldr	r2, [r3, #28]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	4013      	ands	r3, r2
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	bf0c      	ite	eq
 8004dbe:	2301      	moveq	r3, #1
 8004dc0:	2300      	movne	r3, #0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	79fb      	ldrb	r3, [r7, #7]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d0a6      	beq.n	8004d1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b095      	sub	sp, #84	; 0x54
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de6:	e853 3f00 	ldrex	r3, [r3]
 8004dea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dfc:	643b      	str	r3, [r7, #64]	; 0x40
 8004dfe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e04:	e841 2300 	strex	r3, r2, [r1]
 8004e08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e6      	bne.n	8004dde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3308      	adds	r3, #8
 8004e16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	e853 3f00 	ldrex	r3, [r3]
 8004e1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f023 0301 	bic.w	r3, r3, #1
 8004e26:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3308      	adds	r3, #8
 8004e2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e38:	e841 2300 	strex	r3, r2, [r1]
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1e5      	bne.n	8004e10 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d118      	bne.n	8004e7e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	f023 0310 	bic.w	r3, r3, #16
 8004e60:	647b      	str	r3, [r7, #68]	; 0x44
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e6a:	61bb      	str	r3, [r7, #24]
 8004e6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	6979      	ldr	r1, [r7, #20]
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	613b      	str	r3, [r7, #16]
   return(result);
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e6      	bne.n	8004e4c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2220      	movs	r2, #32
 8004e82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e92:	bf00      	nop
 8004e94:	3754      	adds	r7, #84	; 0x54
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
	...

08004ea0 <acos>:
 8004ea0:	b538      	push	{r3, r4, r5, lr}
 8004ea2:	ed2d 8b02 	vpush	{d8}
 8004ea6:	ec55 4b10 	vmov	r4, r5, d0
 8004eaa:	f000 f9c1 	bl	8005230 <__ieee754_acos>
 8004eae:	4622      	mov	r2, r4
 8004eb0:	462b      	mov	r3, r5
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	eeb0 8a40 	vmov.f32	s16, s0
 8004eba:	eef0 8a60 	vmov.f32	s17, s1
 8004ebe:	f7fb fe35 	bl	8000b2c <__aeabi_dcmpun>
 8004ec2:	b9a8      	cbnz	r0, 8004ef0 <acos+0x50>
 8004ec4:	ec45 4b10 	vmov	d0, r4, r5
 8004ec8:	f000 f8ba 	bl	8005040 <fabs>
 8004ecc:	4b0c      	ldr	r3, [pc, #48]	; (8004f00 <acos+0x60>)
 8004ece:	ec51 0b10 	vmov	r0, r1, d0
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f7fb fe20 	bl	8000b18 <__aeabi_dcmpgt>
 8004ed8:	b150      	cbz	r0, 8004ef0 <acos+0x50>
 8004eda:	f001 fe0b 	bl	8006af4 <__errno>
 8004ede:	ecbd 8b02 	vpop	{d8}
 8004ee2:	2321      	movs	r3, #33	; 0x21
 8004ee4:	6003      	str	r3, [r0, #0]
 8004ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eea:	4806      	ldr	r0, [pc, #24]	; (8004f04 <acos+0x64>)
 8004eec:	f000 b8bc 	b.w	8005068 <nan>
 8004ef0:	eeb0 0a48 	vmov.f32	s0, s16
 8004ef4:	eef0 0a68 	vmov.f32	s1, s17
 8004ef8:	ecbd 8b02 	vpop	{d8}
 8004efc:	bd38      	pop	{r3, r4, r5, pc}
 8004efe:	bf00      	nop
 8004f00:	3ff00000 	.word	0x3ff00000
 8004f04:	08008390 	.word	0x08008390

08004f08 <pow>:
 8004f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0a:	ed2d 8b02 	vpush	{d8}
 8004f0e:	eeb0 8a40 	vmov.f32	s16, s0
 8004f12:	eef0 8a60 	vmov.f32	s17, s1
 8004f16:	ec55 4b11 	vmov	r4, r5, d1
 8004f1a:	f000 fbe9 	bl	80056f0 <__ieee754_pow>
 8004f1e:	4622      	mov	r2, r4
 8004f20:	462b      	mov	r3, r5
 8004f22:	4620      	mov	r0, r4
 8004f24:	4629      	mov	r1, r5
 8004f26:	ec57 6b10 	vmov	r6, r7, d0
 8004f2a:	f7fb fdff 	bl	8000b2c <__aeabi_dcmpun>
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	d13b      	bne.n	8004faa <pow+0xa2>
 8004f32:	ec51 0b18 	vmov	r0, r1, d8
 8004f36:	2200      	movs	r2, #0
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f7fb fdc5 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f3e:	b1b8      	cbz	r0, 8004f70 <pow+0x68>
 8004f40:	2200      	movs	r2, #0
 8004f42:	2300      	movs	r3, #0
 8004f44:	4620      	mov	r0, r4
 8004f46:	4629      	mov	r1, r5
 8004f48:	f7fb fdbe 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	d146      	bne.n	8004fde <pow+0xd6>
 8004f50:	ec45 4b10 	vmov	d0, r4, r5
 8004f54:	f000 f87d 	bl	8005052 <finite>
 8004f58:	b338      	cbz	r0, 8004faa <pow+0xa2>
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	4620      	mov	r0, r4
 8004f60:	4629      	mov	r1, r5
 8004f62:	f7fb fdbb 	bl	8000adc <__aeabi_dcmplt>
 8004f66:	b300      	cbz	r0, 8004faa <pow+0xa2>
 8004f68:	f001 fdc4 	bl	8006af4 <__errno>
 8004f6c:	2322      	movs	r3, #34	; 0x22
 8004f6e:	e01b      	b.n	8004fa8 <pow+0xa0>
 8004f70:	ec47 6b10 	vmov	d0, r6, r7
 8004f74:	f000 f86d 	bl	8005052 <finite>
 8004f78:	b9e0      	cbnz	r0, 8004fb4 <pow+0xac>
 8004f7a:	eeb0 0a48 	vmov.f32	s0, s16
 8004f7e:	eef0 0a68 	vmov.f32	s1, s17
 8004f82:	f000 f866 	bl	8005052 <finite>
 8004f86:	b1a8      	cbz	r0, 8004fb4 <pow+0xac>
 8004f88:	ec45 4b10 	vmov	d0, r4, r5
 8004f8c:	f000 f861 	bl	8005052 <finite>
 8004f90:	b180      	cbz	r0, 8004fb4 <pow+0xac>
 8004f92:	4632      	mov	r2, r6
 8004f94:	463b      	mov	r3, r7
 8004f96:	4630      	mov	r0, r6
 8004f98:	4639      	mov	r1, r7
 8004f9a:	f7fb fdc7 	bl	8000b2c <__aeabi_dcmpun>
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	d0e2      	beq.n	8004f68 <pow+0x60>
 8004fa2:	f001 fda7 	bl	8006af4 <__errno>
 8004fa6:	2321      	movs	r3, #33	; 0x21
 8004fa8:	6003      	str	r3, [r0, #0]
 8004faa:	ecbd 8b02 	vpop	{d8}
 8004fae:	ec47 6b10 	vmov	d0, r6, r7
 8004fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	4630      	mov	r0, r6
 8004fba:	4639      	mov	r1, r7
 8004fbc:	f7fb fd84 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	d0f2      	beq.n	8004faa <pow+0xa2>
 8004fc4:	eeb0 0a48 	vmov.f32	s0, s16
 8004fc8:	eef0 0a68 	vmov.f32	s1, s17
 8004fcc:	f000 f841 	bl	8005052 <finite>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	d0ea      	beq.n	8004faa <pow+0xa2>
 8004fd4:	ec45 4b10 	vmov	d0, r4, r5
 8004fd8:	f000 f83b 	bl	8005052 <finite>
 8004fdc:	e7c3      	b.n	8004f66 <pow+0x5e>
 8004fde:	4f01      	ldr	r7, [pc, #4]	; (8004fe4 <pow+0xdc>)
 8004fe0:	2600      	movs	r6, #0
 8004fe2:	e7e2      	b.n	8004faa <pow+0xa2>
 8004fe4:	3ff00000 	.word	0x3ff00000

08004fe8 <sqrt>:
 8004fe8:	b538      	push	{r3, r4, r5, lr}
 8004fea:	ed2d 8b02 	vpush	{d8}
 8004fee:	ec55 4b10 	vmov	r4, r5, d0
 8004ff2:	f000 f841 	bl	8005078 <__ieee754_sqrt>
 8004ff6:	4622      	mov	r2, r4
 8004ff8:	462b      	mov	r3, r5
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	eeb0 8a40 	vmov.f32	s16, s0
 8005002:	eef0 8a60 	vmov.f32	s17, s1
 8005006:	f7fb fd91 	bl	8000b2c <__aeabi_dcmpun>
 800500a:	b990      	cbnz	r0, 8005032 <sqrt+0x4a>
 800500c:	2200      	movs	r2, #0
 800500e:	2300      	movs	r3, #0
 8005010:	4620      	mov	r0, r4
 8005012:	4629      	mov	r1, r5
 8005014:	f7fb fd62 	bl	8000adc <__aeabi_dcmplt>
 8005018:	b158      	cbz	r0, 8005032 <sqrt+0x4a>
 800501a:	f001 fd6b 	bl	8006af4 <__errno>
 800501e:	2321      	movs	r3, #33	; 0x21
 8005020:	6003      	str	r3, [r0, #0]
 8005022:	2200      	movs	r2, #0
 8005024:	2300      	movs	r3, #0
 8005026:	4610      	mov	r0, r2
 8005028:	4619      	mov	r1, r3
 800502a:	f7fb fc0f 	bl	800084c <__aeabi_ddiv>
 800502e:	ec41 0b18 	vmov	d8, r0, r1
 8005032:	eeb0 0a48 	vmov.f32	s0, s16
 8005036:	eef0 0a68 	vmov.f32	s1, s17
 800503a:	ecbd 8b02 	vpop	{d8}
 800503e:	bd38      	pop	{r3, r4, r5, pc}

08005040 <fabs>:
 8005040:	ec51 0b10 	vmov	r0, r1, d0
 8005044:	ee10 2a10 	vmov	r2, s0
 8005048:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800504c:	ec43 2b10 	vmov	d0, r2, r3
 8005050:	4770      	bx	lr

08005052 <finite>:
 8005052:	b082      	sub	sp, #8
 8005054:	ed8d 0b00 	vstr	d0, [sp]
 8005058:	9801      	ldr	r0, [sp, #4]
 800505a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800505e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005062:	0fc0      	lsrs	r0, r0, #31
 8005064:	b002      	add	sp, #8
 8005066:	4770      	bx	lr

08005068 <nan>:
 8005068:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005070 <nan+0x8>
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	00000000 	.word	0x00000000
 8005074:	7ff80000 	.word	0x7ff80000

08005078 <__ieee754_sqrt>:
 8005078:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800507c:	ec55 4b10 	vmov	r4, r5, d0
 8005080:	4e67      	ldr	r6, [pc, #412]	; (8005220 <__ieee754_sqrt+0x1a8>)
 8005082:	43ae      	bics	r6, r5
 8005084:	ee10 0a10 	vmov	r0, s0
 8005088:	ee10 2a10 	vmov	r2, s0
 800508c:	4629      	mov	r1, r5
 800508e:	462b      	mov	r3, r5
 8005090:	d10d      	bne.n	80050ae <__ieee754_sqrt+0x36>
 8005092:	f7fb fab1 	bl	80005f8 <__aeabi_dmul>
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	4620      	mov	r0, r4
 800509c:	4629      	mov	r1, r5
 800509e:	f7fb f8f5 	bl	800028c <__adddf3>
 80050a2:	4604      	mov	r4, r0
 80050a4:	460d      	mov	r5, r1
 80050a6:	ec45 4b10 	vmov	d0, r4, r5
 80050aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ae:	2d00      	cmp	r5, #0
 80050b0:	dc0b      	bgt.n	80050ca <__ieee754_sqrt+0x52>
 80050b2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80050b6:	4326      	orrs	r6, r4
 80050b8:	d0f5      	beq.n	80050a6 <__ieee754_sqrt+0x2e>
 80050ba:	b135      	cbz	r5, 80050ca <__ieee754_sqrt+0x52>
 80050bc:	f7fb f8e4 	bl	8000288 <__aeabi_dsub>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	f7fb fbc2 	bl	800084c <__aeabi_ddiv>
 80050c8:	e7eb      	b.n	80050a2 <__ieee754_sqrt+0x2a>
 80050ca:	1509      	asrs	r1, r1, #20
 80050cc:	f000 808d 	beq.w	80051ea <__ieee754_sqrt+0x172>
 80050d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050d4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80050d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050dc:	07c9      	lsls	r1, r1, #31
 80050de:	bf5c      	itt	pl
 80050e0:	005b      	lslpl	r3, r3, #1
 80050e2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80050e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80050ea:	bf58      	it	pl
 80050ec:	0052      	lslpl	r2, r2, #1
 80050ee:	2500      	movs	r5, #0
 80050f0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80050f4:	1076      	asrs	r6, r6, #1
 80050f6:	0052      	lsls	r2, r2, #1
 80050f8:	f04f 0e16 	mov.w	lr, #22
 80050fc:	46ac      	mov	ip, r5
 80050fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005102:	eb0c 0001 	add.w	r0, ip, r1
 8005106:	4298      	cmp	r0, r3
 8005108:	bfde      	ittt	le
 800510a:	1a1b      	suble	r3, r3, r0
 800510c:	eb00 0c01 	addle.w	ip, r0, r1
 8005110:	186d      	addle	r5, r5, r1
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	f1be 0e01 	subs.w	lr, lr, #1
 8005118:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800511c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005120:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005124:	d1ed      	bne.n	8005102 <__ieee754_sqrt+0x8a>
 8005126:	4674      	mov	r4, lr
 8005128:	2720      	movs	r7, #32
 800512a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800512e:	4563      	cmp	r3, ip
 8005130:	eb01 000e 	add.w	r0, r1, lr
 8005134:	dc02      	bgt.n	800513c <__ieee754_sqrt+0xc4>
 8005136:	d113      	bne.n	8005160 <__ieee754_sqrt+0xe8>
 8005138:	4290      	cmp	r0, r2
 800513a:	d811      	bhi.n	8005160 <__ieee754_sqrt+0xe8>
 800513c:	2800      	cmp	r0, #0
 800513e:	eb00 0e01 	add.w	lr, r0, r1
 8005142:	da57      	bge.n	80051f4 <__ieee754_sqrt+0x17c>
 8005144:	f1be 0f00 	cmp.w	lr, #0
 8005148:	db54      	blt.n	80051f4 <__ieee754_sqrt+0x17c>
 800514a:	f10c 0801 	add.w	r8, ip, #1
 800514e:	eba3 030c 	sub.w	r3, r3, ip
 8005152:	4290      	cmp	r0, r2
 8005154:	bf88      	it	hi
 8005156:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800515a:	1a12      	subs	r2, r2, r0
 800515c:	440c      	add	r4, r1
 800515e:	46c4      	mov	ip, r8
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	3f01      	subs	r7, #1
 8005164:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005168:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800516c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005170:	d1dd      	bne.n	800512e <__ieee754_sqrt+0xb6>
 8005172:	4313      	orrs	r3, r2
 8005174:	d01b      	beq.n	80051ae <__ieee754_sqrt+0x136>
 8005176:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005224 <__ieee754_sqrt+0x1ac>
 800517a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8005228 <__ieee754_sqrt+0x1b0>
 800517e:	e9da 0100 	ldrd	r0, r1, [sl]
 8005182:	e9db 2300 	ldrd	r2, r3, [fp]
 8005186:	f7fb f87f 	bl	8000288 <__aeabi_dsub>
 800518a:	e9da 8900 	ldrd	r8, r9, [sl]
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4640      	mov	r0, r8
 8005194:	4649      	mov	r1, r9
 8005196:	f7fb fcab 	bl	8000af0 <__aeabi_dcmple>
 800519a:	b140      	cbz	r0, 80051ae <__ieee754_sqrt+0x136>
 800519c:	f1b4 3fff 	cmp.w	r4, #4294967295
 80051a0:	e9da 0100 	ldrd	r0, r1, [sl]
 80051a4:	e9db 2300 	ldrd	r2, r3, [fp]
 80051a8:	d126      	bne.n	80051f8 <__ieee754_sqrt+0x180>
 80051aa:	3501      	adds	r5, #1
 80051ac:	463c      	mov	r4, r7
 80051ae:	106a      	asrs	r2, r5, #1
 80051b0:	0863      	lsrs	r3, r4, #1
 80051b2:	07e9      	lsls	r1, r5, #31
 80051b4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80051b8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80051bc:	bf48      	it	mi
 80051be:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80051c2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80051c6:	461c      	mov	r4, r3
 80051c8:	e76d      	b.n	80050a6 <__ieee754_sqrt+0x2e>
 80051ca:	0ad3      	lsrs	r3, r2, #11
 80051cc:	3815      	subs	r0, #21
 80051ce:	0552      	lsls	r2, r2, #21
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0fa      	beq.n	80051ca <__ieee754_sqrt+0x152>
 80051d4:	02dc      	lsls	r4, r3, #11
 80051d6:	d50a      	bpl.n	80051ee <__ieee754_sqrt+0x176>
 80051d8:	f1c1 0420 	rsb	r4, r1, #32
 80051dc:	fa22 f404 	lsr.w	r4, r2, r4
 80051e0:	1e4d      	subs	r5, r1, #1
 80051e2:	408a      	lsls	r2, r1
 80051e4:	4323      	orrs	r3, r4
 80051e6:	1b41      	subs	r1, r0, r5
 80051e8:	e772      	b.n	80050d0 <__ieee754_sqrt+0x58>
 80051ea:	4608      	mov	r0, r1
 80051ec:	e7f0      	b.n	80051d0 <__ieee754_sqrt+0x158>
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	3101      	adds	r1, #1
 80051f2:	e7ef      	b.n	80051d4 <__ieee754_sqrt+0x15c>
 80051f4:	46e0      	mov	r8, ip
 80051f6:	e7aa      	b.n	800514e <__ieee754_sqrt+0xd6>
 80051f8:	f7fb f848 	bl	800028c <__adddf3>
 80051fc:	e9da 8900 	ldrd	r8, r9, [sl]
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4640      	mov	r0, r8
 8005206:	4649      	mov	r1, r9
 8005208:	f7fb fc68 	bl	8000adc <__aeabi_dcmplt>
 800520c:	b120      	cbz	r0, 8005218 <__ieee754_sqrt+0x1a0>
 800520e:	1ca0      	adds	r0, r4, #2
 8005210:	bf08      	it	eq
 8005212:	3501      	addeq	r5, #1
 8005214:	3402      	adds	r4, #2
 8005216:	e7ca      	b.n	80051ae <__ieee754_sqrt+0x136>
 8005218:	3401      	adds	r4, #1
 800521a:	f024 0401 	bic.w	r4, r4, #1
 800521e:	e7c6      	b.n	80051ae <__ieee754_sqrt+0x136>
 8005220:	7ff00000 	.word	0x7ff00000
 8005224:	20000010 	.word	0x20000010
 8005228:	20000018 	.word	0x20000018
 800522c:	00000000 	.word	0x00000000

08005230 <__ieee754_acos>:
 8005230:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005234:	ec55 4b10 	vmov	r4, r5, d0
 8005238:	49b7      	ldr	r1, [pc, #732]	; (8005518 <__ieee754_acos+0x2e8>)
 800523a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800523e:	428b      	cmp	r3, r1
 8005240:	dd1b      	ble.n	800527a <__ieee754_acos+0x4a>
 8005242:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8005246:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800524a:	4323      	orrs	r3, r4
 800524c:	d106      	bne.n	800525c <__ieee754_acos+0x2c>
 800524e:	2d00      	cmp	r5, #0
 8005250:	f300 8211 	bgt.w	8005676 <__ieee754_acos+0x446>
 8005254:	ed9f 0b96 	vldr	d0, [pc, #600]	; 80054b0 <__ieee754_acos+0x280>
 8005258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800525c:	ee10 2a10 	vmov	r2, s0
 8005260:	462b      	mov	r3, r5
 8005262:	ee10 0a10 	vmov	r0, s0
 8005266:	4629      	mov	r1, r5
 8005268:	f7fb f80e 	bl	8000288 <__aeabi_dsub>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	f7fb faec 	bl	800084c <__aeabi_ddiv>
 8005274:	ec41 0b10 	vmov	d0, r0, r1
 8005278:	e7ee      	b.n	8005258 <__ieee754_acos+0x28>
 800527a:	49a8      	ldr	r1, [pc, #672]	; (800551c <__ieee754_acos+0x2ec>)
 800527c:	428b      	cmp	r3, r1
 800527e:	f300 8087 	bgt.w	8005390 <__ieee754_acos+0x160>
 8005282:	4aa7      	ldr	r2, [pc, #668]	; (8005520 <__ieee754_acos+0x2f0>)
 8005284:	4293      	cmp	r3, r2
 8005286:	f340 81f9 	ble.w	800567c <__ieee754_acos+0x44c>
 800528a:	ee10 2a10 	vmov	r2, s0
 800528e:	ee10 0a10 	vmov	r0, s0
 8005292:	462b      	mov	r3, r5
 8005294:	4629      	mov	r1, r5
 8005296:	f7fb f9af 	bl	80005f8 <__aeabi_dmul>
 800529a:	a387      	add	r3, pc, #540	; (adr r3, 80054b8 <__ieee754_acos+0x288>)
 800529c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a0:	4606      	mov	r6, r0
 80052a2:	460f      	mov	r7, r1
 80052a4:	f7fb f9a8 	bl	80005f8 <__aeabi_dmul>
 80052a8:	a385      	add	r3, pc, #532	; (adr r3, 80054c0 <__ieee754_acos+0x290>)
 80052aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ae:	f7fa ffed 	bl	800028c <__adddf3>
 80052b2:	4632      	mov	r2, r6
 80052b4:	463b      	mov	r3, r7
 80052b6:	f7fb f99f 	bl	80005f8 <__aeabi_dmul>
 80052ba:	a383      	add	r3, pc, #524	; (adr r3, 80054c8 <__ieee754_acos+0x298>)
 80052bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c0:	f7fa ffe2 	bl	8000288 <__aeabi_dsub>
 80052c4:	4632      	mov	r2, r6
 80052c6:	463b      	mov	r3, r7
 80052c8:	f7fb f996 	bl	80005f8 <__aeabi_dmul>
 80052cc:	a380      	add	r3, pc, #512	; (adr r3, 80054d0 <__ieee754_acos+0x2a0>)
 80052ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d2:	f7fa ffdb 	bl	800028c <__adddf3>
 80052d6:	4632      	mov	r2, r6
 80052d8:	463b      	mov	r3, r7
 80052da:	f7fb f98d 	bl	80005f8 <__aeabi_dmul>
 80052de:	a37e      	add	r3, pc, #504	; (adr r3, 80054d8 <__ieee754_acos+0x2a8>)
 80052e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e4:	f7fa ffd0 	bl	8000288 <__aeabi_dsub>
 80052e8:	4632      	mov	r2, r6
 80052ea:	463b      	mov	r3, r7
 80052ec:	f7fb f984 	bl	80005f8 <__aeabi_dmul>
 80052f0:	a37b      	add	r3, pc, #492	; (adr r3, 80054e0 <__ieee754_acos+0x2b0>)
 80052f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f6:	f7fa ffc9 	bl	800028c <__adddf3>
 80052fa:	4632      	mov	r2, r6
 80052fc:	463b      	mov	r3, r7
 80052fe:	f7fb f97b 	bl	80005f8 <__aeabi_dmul>
 8005302:	a379      	add	r3, pc, #484	; (adr r3, 80054e8 <__ieee754_acos+0x2b8>)
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	4680      	mov	r8, r0
 800530a:	4689      	mov	r9, r1
 800530c:	4630      	mov	r0, r6
 800530e:	4639      	mov	r1, r7
 8005310:	f7fb f972 	bl	80005f8 <__aeabi_dmul>
 8005314:	a376      	add	r3, pc, #472	; (adr r3, 80054f0 <__ieee754_acos+0x2c0>)
 8005316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531a:	f7fa ffb5 	bl	8000288 <__aeabi_dsub>
 800531e:	4632      	mov	r2, r6
 8005320:	463b      	mov	r3, r7
 8005322:	f7fb f969 	bl	80005f8 <__aeabi_dmul>
 8005326:	a374      	add	r3, pc, #464	; (adr r3, 80054f8 <__ieee754_acos+0x2c8>)
 8005328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532c:	f7fa ffae 	bl	800028c <__adddf3>
 8005330:	4632      	mov	r2, r6
 8005332:	463b      	mov	r3, r7
 8005334:	f7fb f960 	bl	80005f8 <__aeabi_dmul>
 8005338:	a371      	add	r3, pc, #452	; (adr r3, 8005500 <__ieee754_acos+0x2d0>)
 800533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533e:	f7fa ffa3 	bl	8000288 <__aeabi_dsub>
 8005342:	4632      	mov	r2, r6
 8005344:	463b      	mov	r3, r7
 8005346:	f7fb f957 	bl	80005f8 <__aeabi_dmul>
 800534a:	4b76      	ldr	r3, [pc, #472]	; (8005524 <__ieee754_acos+0x2f4>)
 800534c:	2200      	movs	r2, #0
 800534e:	f7fa ff9d 	bl	800028c <__adddf3>
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	4640      	mov	r0, r8
 8005358:	4649      	mov	r1, r9
 800535a:	f7fb fa77 	bl	800084c <__aeabi_ddiv>
 800535e:	4622      	mov	r2, r4
 8005360:	462b      	mov	r3, r5
 8005362:	f7fb f949 	bl	80005f8 <__aeabi_dmul>
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	a167      	add	r1, pc, #412	; (adr r1, 8005508 <__ieee754_acos+0x2d8>)
 800536c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005370:	f7fa ff8a 	bl	8000288 <__aeabi_dsub>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4620      	mov	r0, r4
 800537a:	4629      	mov	r1, r5
 800537c:	f7fa ff84 	bl	8000288 <__aeabi_dsub>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	a162      	add	r1, pc, #392	; (adr r1, 8005510 <__ieee754_acos+0x2e0>)
 8005386:	e9d1 0100 	ldrd	r0, r1, [r1]
 800538a:	f7fa ff7d 	bl	8000288 <__aeabi_dsub>
 800538e:	e771      	b.n	8005274 <__ieee754_acos+0x44>
 8005390:	2d00      	cmp	r5, #0
 8005392:	f280 80cb 	bge.w	800552c <__ieee754_acos+0x2fc>
 8005396:	ee10 0a10 	vmov	r0, s0
 800539a:	4b62      	ldr	r3, [pc, #392]	; (8005524 <__ieee754_acos+0x2f4>)
 800539c:	2200      	movs	r2, #0
 800539e:	4629      	mov	r1, r5
 80053a0:	f7fa ff74 	bl	800028c <__adddf3>
 80053a4:	4b60      	ldr	r3, [pc, #384]	; (8005528 <__ieee754_acos+0x2f8>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	f7fb f926 	bl	80005f8 <__aeabi_dmul>
 80053ac:	a342      	add	r3, pc, #264	; (adr r3, 80054b8 <__ieee754_acos+0x288>)
 80053ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b2:	4604      	mov	r4, r0
 80053b4:	460d      	mov	r5, r1
 80053b6:	f7fb f91f 	bl	80005f8 <__aeabi_dmul>
 80053ba:	a341      	add	r3, pc, #260	; (adr r3, 80054c0 <__ieee754_acos+0x290>)
 80053bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c0:	f7fa ff64 	bl	800028c <__adddf3>
 80053c4:	4622      	mov	r2, r4
 80053c6:	462b      	mov	r3, r5
 80053c8:	f7fb f916 	bl	80005f8 <__aeabi_dmul>
 80053cc:	a33e      	add	r3, pc, #248	; (adr r3, 80054c8 <__ieee754_acos+0x298>)
 80053ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d2:	f7fa ff59 	bl	8000288 <__aeabi_dsub>
 80053d6:	4622      	mov	r2, r4
 80053d8:	462b      	mov	r3, r5
 80053da:	f7fb f90d 	bl	80005f8 <__aeabi_dmul>
 80053de:	a33c      	add	r3, pc, #240	; (adr r3, 80054d0 <__ieee754_acos+0x2a0>)
 80053e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e4:	f7fa ff52 	bl	800028c <__adddf3>
 80053e8:	4622      	mov	r2, r4
 80053ea:	462b      	mov	r3, r5
 80053ec:	f7fb f904 	bl	80005f8 <__aeabi_dmul>
 80053f0:	a339      	add	r3, pc, #228	; (adr r3, 80054d8 <__ieee754_acos+0x2a8>)
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	f7fa ff47 	bl	8000288 <__aeabi_dsub>
 80053fa:	4622      	mov	r2, r4
 80053fc:	462b      	mov	r3, r5
 80053fe:	f7fb f8fb 	bl	80005f8 <__aeabi_dmul>
 8005402:	a337      	add	r3, pc, #220	; (adr r3, 80054e0 <__ieee754_acos+0x2b0>)
 8005404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005408:	f7fa ff40 	bl	800028c <__adddf3>
 800540c:	4622      	mov	r2, r4
 800540e:	462b      	mov	r3, r5
 8005410:	f7fb f8f2 	bl	80005f8 <__aeabi_dmul>
 8005414:	ec45 4b10 	vmov	d0, r4, r5
 8005418:	4680      	mov	r8, r0
 800541a:	4689      	mov	r9, r1
 800541c:	f7ff fe2c 	bl	8005078 <__ieee754_sqrt>
 8005420:	a331      	add	r3, pc, #196	; (adr r3, 80054e8 <__ieee754_acos+0x2b8>)
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	4620      	mov	r0, r4
 8005428:	4629      	mov	r1, r5
 800542a:	ec57 6b10 	vmov	r6, r7, d0
 800542e:	f7fb f8e3 	bl	80005f8 <__aeabi_dmul>
 8005432:	a32f      	add	r3, pc, #188	; (adr r3, 80054f0 <__ieee754_acos+0x2c0>)
 8005434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005438:	f7fa ff26 	bl	8000288 <__aeabi_dsub>
 800543c:	4622      	mov	r2, r4
 800543e:	462b      	mov	r3, r5
 8005440:	f7fb f8da 	bl	80005f8 <__aeabi_dmul>
 8005444:	a32c      	add	r3, pc, #176	; (adr r3, 80054f8 <__ieee754_acos+0x2c8>)
 8005446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544a:	f7fa ff1f 	bl	800028c <__adddf3>
 800544e:	4622      	mov	r2, r4
 8005450:	462b      	mov	r3, r5
 8005452:	f7fb f8d1 	bl	80005f8 <__aeabi_dmul>
 8005456:	a32a      	add	r3, pc, #168	; (adr r3, 8005500 <__ieee754_acos+0x2d0>)
 8005458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545c:	f7fa ff14 	bl	8000288 <__aeabi_dsub>
 8005460:	4622      	mov	r2, r4
 8005462:	462b      	mov	r3, r5
 8005464:	f7fb f8c8 	bl	80005f8 <__aeabi_dmul>
 8005468:	4b2e      	ldr	r3, [pc, #184]	; (8005524 <__ieee754_acos+0x2f4>)
 800546a:	2200      	movs	r2, #0
 800546c:	f7fa ff0e 	bl	800028c <__adddf3>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4640      	mov	r0, r8
 8005476:	4649      	mov	r1, r9
 8005478:	f7fb f9e8 	bl	800084c <__aeabi_ddiv>
 800547c:	4632      	mov	r2, r6
 800547e:	463b      	mov	r3, r7
 8005480:	f7fb f8ba 	bl	80005f8 <__aeabi_dmul>
 8005484:	a320      	add	r3, pc, #128	; (adr r3, 8005508 <__ieee754_acos+0x2d8>)
 8005486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548a:	f7fa fefd 	bl	8000288 <__aeabi_dsub>
 800548e:	4632      	mov	r2, r6
 8005490:	463b      	mov	r3, r7
 8005492:	f7fa fefb 	bl	800028c <__adddf3>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	f7fa fef7 	bl	800028c <__adddf3>
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	a103      	add	r1, pc, #12	; (adr r1, 80054b0 <__ieee754_acos+0x280>)
 80054a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054a8:	e76f      	b.n	800538a <__ieee754_acos+0x15a>
 80054aa:	bf00      	nop
 80054ac:	f3af 8000 	nop.w
 80054b0:	54442d18 	.word	0x54442d18
 80054b4:	400921fb 	.word	0x400921fb
 80054b8:	0dfdf709 	.word	0x0dfdf709
 80054bc:	3f023de1 	.word	0x3f023de1
 80054c0:	7501b288 	.word	0x7501b288
 80054c4:	3f49efe0 	.word	0x3f49efe0
 80054c8:	b5688f3b 	.word	0xb5688f3b
 80054cc:	3fa48228 	.word	0x3fa48228
 80054d0:	0e884455 	.word	0x0e884455
 80054d4:	3fc9c155 	.word	0x3fc9c155
 80054d8:	03eb6f7d 	.word	0x03eb6f7d
 80054dc:	3fd4d612 	.word	0x3fd4d612
 80054e0:	55555555 	.word	0x55555555
 80054e4:	3fc55555 	.word	0x3fc55555
 80054e8:	b12e9282 	.word	0xb12e9282
 80054ec:	3fb3b8c5 	.word	0x3fb3b8c5
 80054f0:	1b8d0159 	.word	0x1b8d0159
 80054f4:	3fe6066c 	.word	0x3fe6066c
 80054f8:	9c598ac8 	.word	0x9c598ac8
 80054fc:	40002ae5 	.word	0x40002ae5
 8005500:	1c8a2d4b 	.word	0x1c8a2d4b
 8005504:	40033a27 	.word	0x40033a27
 8005508:	33145c07 	.word	0x33145c07
 800550c:	3c91a626 	.word	0x3c91a626
 8005510:	54442d18 	.word	0x54442d18
 8005514:	3ff921fb 	.word	0x3ff921fb
 8005518:	3fefffff 	.word	0x3fefffff
 800551c:	3fdfffff 	.word	0x3fdfffff
 8005520:	3c600000 	.word	0x3c600000
 8005524:	3ff00000 	.word	0x3ff00000
 8005528:	3fe00000 	.word	0x3fe00000
 800552c:	ee10 2a10 	vmov	r2, s0
 8005530:	462b      	mov	r3, r5
 8005532:	496d      	ldr	r1, [pc, #436]	; (80056e8 <__ieee754_acos+0x4b8>)
 8005534:	2000      	movs	r0, #0
 8005536:	f7fa fea7 	bl	8000288 <__aeabi_dsub>
 800553a:	4b6c      	ldr	r3, [pc, #432]	; (80056ec <__ieee754_acos+0x4bc>)
 800553c:	2200      	movs	r2, #0
 800553e:	f7fb f85b 	bl	80005f8 <__aeabi_dmul>
 8005542:	4604      	mov	r4, r0
 8005544:	460d      	mov	r5, r1
 8005546:	ec45 4b10 	vmov	d0, r4, r5
 800554a:	f7ff fd95 	bl	8005078 <__ieee754_sqrt>
 800554e:	a34e      	add	r3, pc, #312	; (adr r3, 8005688 <__ieee754_acos+0x458>)
 8005550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005554:	4620      	mov	r0, r4
 8005556:	4629      	mov	r1, r5
 8005558:	ec59 8b10 	vmov	r8, r9, d0
 800555c:	f7fb f84c 	bl	80005f8 <__aeabi_dmul>
 8005560:	a34b      	add	r3, pc, #300	; (adr r3, 8005690 <__ieee754_acos+0x460>)
 8005562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005566:	f7fa fe91 	bl	800028c <__adddf3>
 800556a:	4622      	mov	r2, r4
 800556c:	462b      	mov	r3, r5
 800556e:	f7fb f843 	bl	80005f8 <__aeabi_dmul>
 8005572:	a349      	add	r3, pc, #292	; (adr r3, 8005698 <__ieee754_acos+0x468>)
 8005574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005578:	f7fa fe86 	bl	8000288 <__aeabi_dsub>
 800557c:	4622      	mov	r2, r4
 800557e:	462b      	mov	r3, r5
 8005580:	f7fb f83a 	bl	80005f8 <__aeabi_dmul>
 8005584:	a346      	add	r3, pc, #280	; (adr r3, 80056a0 <__ieee754_acos+0x470>)
 8005586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558a:	f7fa fe7f 	bl	800028c <__adddf3>
 800558e:	4622      	mov	r2, r4
 8005590:	462b      	mov	r3, r5
 8005592:	f7fb f831 	bl	80005f8 <__aeabi_dmul>
 8005596:	a344      	add	r3, pc, #272	; (adr r3, 80056a8 <__ieee754_acos+0x478>)
 8005598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559c:	f7fa fe74 	bl	8000288 <__aeabi_dsub>
 80055a0:	4622      	mov	r2, r4
 80055a2:	462b      	mov	r3, r5
 80055a4:	f7fb f828 	bl	80005f8 <__aeabi_dmul>
 80055a8:	a341      	add	r3, pc, #260	; (adr r3, 80056b0 <__ieee754_acos+0x480>)
 80055aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ae:	f7fa fe6d 	bl	800028c <__adddf3>
 80055b2:	4622      	mov	r2, r4
 80055b4:	462b      	mov	r3, r5
 80055b6:	f7fb f81f 	bl	80005f8 <__aeabi_dmul>
 80055ba:	a33f      	add	r3, pc, #252	; (adr r3, 80056b8 <__ieee754_acos+0x488>)
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	4682      	mov	sl, r0
 80055c2:	468b      	mov	fp, r1
 80055c4:	4620      	mov	r0, r4
 80055c6:	4629      	mov	r1, r5
 80055c8:	f7fb f816 	bl	80005f8 <__aeabi_dmul>
 80055cc:	a33c      	add	r3, pc, #240	; (adr r3, 80056c0 <__ieee754_acos+0x490>)
 80055ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d2:	f7fa fe59 	bl	8000288 <__aeabi_dsub>
 80055d6:	4622      	mov	r2, r4
 80055d8:	462b      	mov	r3, r5
 80055da:	f7fb f80d 	bl	80005f8 <__aeabi_dmul>
 80055de:	a33a      	add	r3, pc, #232	; (adr r3, 80056c8 <__ieee754_acos+0x498>)
 80055e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e4:	f7fa fe52 	bl	800028c <__adddf3>
 80055e8:	4622      	mov	r2, r4
 80055ea:	462b      	mov	r3, r5
 80055ec:	f7fb f804 	bl	80005f8 <__aeabi_dmul>
 80055f0:	a337      	add	r3, pc, #220	; (adr r3, 80056d0 <__ieee754_acos+0x4a0>)
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f7fa fe47 	bl	8000288 <__aeabi_dsub>
 80055fa:	4622      	mov	r2, r4
 80055fc:	462b      	mov	r3, r5
 80055fe:	f7fa fffb 	bl	80005f8 <__aeabi_dmul>
 8005602:	4b39      	ldr	r3, [pc, #228]	; (80056e8 <__ieee754_acos+0x4b8>)
 8005604:	2200      	movs	r2, #0
 8005606:	f7fa fe41 	bl	800028c <__adddf3>
 800560a:	4602      	mov	r2, r0
 800560c:	460b      	mov	r3, r1
 800560e:	4650      	mov	r0, sl
 8005610:	4659      	mov	r1, fp
 8005612:	f7fb f91b 	bl	800084c <__aeabi_ddiv>
 8005616:	4642      	mov	r2, r8
 8005618:	464b      	mov	r3, r9
 800561a:	f7fa ffed 	bl	80005f8 <__aeabi_dmul>
 800561e:	2600      	movs	r6, #0
 8005620:	4682      	mov	sl, r0
 8005622:	468b      	mov	fp, r1
 8005624:	4632      	mov	r2, r6
 8005626:	464b      	mov	r3, r9
 8005628:	4630      	mov	r0, r6
 800562a:	4649      	mov	r1, r9
 800562c:	f7fa ffe4 	bl	80005f8 <__aeabi_dmul>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	4620      	mov	r0, r4
 8005636:	4629      	mov	r1, r5
 8005638:	f7fa fe26 	bl	8000288 <__aeabi_dsub>
 800563c:	4632      	mov	r2, r6
 800563e:	4604      	mov	r4, r0
 8005640:	460d      	mov	r5, r1
 8005642:	464b      	mov	r3, r9
 8005644:	4640      	mov	r0, r8
 8005646:	4649      	mov	r1, r9
 8005648:	f7fa fe20 	bl	800028c <__adddf3>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4620      	mov	r0, r4
 8005652:	4629      	mov	r1, r5
 8005654:	f7fb f8fa 	bl	800084c <__aeabi_ddiv>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4650      	mov	r0, sl
 800565e:	4659      	mov	r1, fp
 8005660:	f7fa fe14 	bl	800028c <__adddf3>
 8005664:	4632      	mov	r2, r6
 8005666:	464b      	mov	r3, r9
 8005668:	f7fa fe10 	bl	800028c <__adddf3>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	f7fa fe0c 	bl	800028c <__adddf3>
 8005674:	e5fe      	b.n	8005274 <__ieee754_acos+0x44>
 8005676:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80056d8 <__ieee754_acos+0x4a8>
 800567a:	e5ed      	b.n	8005258 <__ieee754_acos+0x28>
 800567c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80056e0 <__ieee754_acos+0x4b0>
 8005680:	e5ea      	b.n	8005258 <__ieee754_acos+0x28>
 8005682:	bf00      	nop
 8005684:	f3af 8000 	nop.w
 8005688:	0dfdf709 	.word	0x0dfdf709
 800568c:	3f023de1 	.word	0x3f023de1
 8005690:	7501b288 	.word	0x7501b288
 8005694:	3f49efe0 	.word	0x3f49efe0
 8005698:	b5688f3b 	.word	0xb5688f3b
 800569c:	3fa48228 	.word	0x3fa48228
 80056a0:	0e884455 	.word	0x0e884455
 80056a4:	3fc9c155 	.word	0x3fc9c155
 80056a8:	03eb6f7d 	.word	0x03eb6f7d
 80056ac:	3fd4d612 	.word	0x3fd4d612
 80056b0:	55555555 	.word	0x55555555
 80056b4:	3fc55555 	.word	0x3fc55555
 80056b8:	b12e9282 	.word	0xb12e9282
 80056bc:	3fb3b8c5 	.word	0x3fb3b8c5
 80056c0:	1b8d0159 	.word	0x1b8d0159
 80056c4:	3fe6066c 	.word	0x3fe6066c
 80056c8:	9c598ac8 	.word	0x9c598ac8
 80056cc:	40002ae5 	.word	0x40002ae5
 80056d0:	1c8a2d4b 	.word	0x1c8a2d4b
 80056d4:	40033a27 	.word	0x40033a27
	...
 80056e0:	54442d18 	.word	0x54442d18
 80056e4:	3ff921fb 	.word	0x3ff921fb
 80056e8:	3ff00000 	.word	0x3ff00000
 80056ec:	3fe00000 	.word	0x3fe00000

080056f0 <__ieee754_pow>:
 80056f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f4:	ed2d 8b06 	vpush	{d8-d10}
 80056f8:	b089      	sub	sp, #36	; 0x24
 80056fa:	ed8d 1b00 	vstr	d1, [sp]
 80056fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005702:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005706:	ea58 0102 	orrs.w	r1, r8, r2
 800570a:	ec57 6b10 	vmov	r6, r7, d0
 800570e:	d115      	bne.n	800573c <__ieee754_pow+0x4c>
 8005710:	19b3      	adds	r3, r6, r6
 8005712:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005716:	4152      	adcs	r2, r2
 8005718:	4299      	cmp	r1, r3
 800571a:	4b89      	ldr	r3, [pc, #548]	; (8005940 <__ieee754_pow+0x250>)
 800571c:	4193      	sbcs	r3, r2
 800571e:	f080 84d1 	bcs.w	80060c4 <__ieee754_pow+0x9d4>
 8005722:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005726:	4630      	mov	r0, r6
 8005728:	4639      	mov	r1, r7
 800572a:	f7fa fdaf 	bl	800028c <__adddf3>
 800572e:	ec41 0b10 	vmov	d0, r0, r1
 8005732:	b009      	add	sp, #36	; 0x24
 8005734:	ecbd 8b06 	vpop	{d8-d10}
 8005738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573c:	4b81      	ldr	r3, [pc, #516]	; (8005944 <__ieee754_pow+0x254>)
 800573e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005742:	429c      	cmp	r4, r3
 8005744:	ee10 aa10 	vmov	sl, s0
 8005748:	463d      	mov	r5, r7
 800574a:	dc06      	bgt.n	800575a <__ieee754_pow+0x6a>
 800574c:	d101      	bne.n	8005752 <__ieee754_pow+0x62>
 800574e:	2e00      	cmp	r6, #0
 8005750:	d1e7      	bne.n	8005722 <__ieee754_pow+0x32>
 8005752:	4598      	cmp	r8, r3
 8005754:	dc01      	bgt.n	800575a <__ieee754_pow+0x6a>
 8005756:	d10f      	bne.n	8005778 <__ieee754_pow+0x88>
 8005758:	b172      	cbz	r2, 8005778 <__ieee754_pow+0x88>
 800575a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800575e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005762:	ea55 050a 	orrs.w	r5, r5, sl
 8005766:	d1dc      	bne.n	8005722 <__ieee754_pow+0x32>
 8005768:	e9dd 3200 	ldrd	r3, r2, [sp]
 800576c:	18db      	adds	r3, r3, r3
 800576e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005772:	4152      	adcs	r2, r2
 8005774:	429d      	cmp	r5, r3
 8005776:	e7d0      	b.n	800571a <__ieee754_pow+0x2a>
 8005778:	2d00      	cmp	r5, #0
 800577a:	da3b      	bge.n	80057f4 <__ieee754_pow+0x104>
 800577c:	4b72      	ldr	r3, [pc, #456]	; (8005948 <__ieee754_pow+0x258>)
 800577e:	4598      	cmp	r8, r3
 8005780:	dc51      	bgt.n	8005826 <__ieee754_pow+0x136>
 8005782:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005786:	4598      	cmp	r8, r3
 8005788:	f340 84ab 	ble.w	80060e2 <__ieee754_pow+0x9f2>
 800578c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005790:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005794:	2b14      	cmp	r3, #20
 8005796:	dd0f      	ble.n	80057b8 <__ieee754_pow+0xc8>
 8005798:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800579c:	fa22 f103 	lsr.w	r1, r2, r3
 80057a0:	fa01 f303 	lsl.w	r3, r1, r3
 80057a4:	4293      	cmp	r3, r2
 80057a6:	f040 849c 	bne.w	80060e2 <__ieee754_pow+0x9f2>
 80057aa:	f001 0101 	and.w	r1, r1, #1
 80057ae:	f1c1 0302 	rsb	r3, r1, #2
 80057b2:	9304      	str	r3, [sp, #16]
 80057b4:	b182      	cbz	r2, 80057d8 <__ieee754_pow+0xe8>
 80057b6:	e05f      	b.n	8005878 <__ieee754_pow+0x188>
 80057b8:	2a00      	cmp	r2, #0
 80057ba:	d15b      	bne.n	8005874 <__ieee754_pow+0x184>
 80057bc:	f1c3 0314 	rsb	r3, r3, #20
 80057c0:	fa48 f103 	asr.w	r1, r8, r3
 80057c4:	fa01 f303 	lsl.w	r3, r1, r3
 80057c8:	4543      	cmp	r3, r8
 80057ca:	f040 8487 	bne.w	80060dc <__ieee754_pow+0x9ec>
 80057ce:	f001 0101 	and.w	r1, r1, #1
 80057d2:	f1c1 0302 	rsb	r3, r1, #2
 80057d6:	9304      	str	r3, [sp, #16]
 80057d8:	4b5c      	ldr	r3, [pc, #368]	; (800594c <__ieee754_pow+0x25c>)
 80057da:	4598      	cmp	r8, r3
 80057dc:	d132      	bne.n	8005844 <__ieee754_pow+0x154>
 80057de:	f1b9 0f00 	cmp.w	r9, #0
 80057e2:	f280 8477 	bge.w	80060d4 <__ieee754_pow+0x9e4>
 80057e6:	4959      	ldr	r1, [pc, #356]	; (800594c <__ieee754_pow+0x25c>)
 80057e8:	4632      	mov	r2, r6
 80057ea:	463b      	mov	r3, r7
 80057ec:	2000      	movs	r0, #0
 80057ee:	f7fb f82d 	bl	800084c <__aeabi_ddiv>
 80057f2:	e79c      	b.n	800572e <__ieee754_pow+0x3e>
 80057f4:	2300      	movs	r3, #0
 80057f6:	9304      	str	r3, [sp, #16]
 80057f8:	2a00      	cmp	r2, #0
 80057fa:	d13d      	bne.n	8005878 <__ieee754_pow+0x188>
 80057fc:	4b51      	ldr	r3, [pc, #324]	; (8005944 <__ieee754_pow+0x254>)
 80057fe:	4598      	cmp	r8, r3
 8005800:	d1ea      	bne.n	80057d8 <__ieee754_pow+0xe8>
 8005802:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005806:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800580a:	ea53 030a 	orrs.w	r3, r3, sl
 800580e:	f000 8459 	beq.w	80060c4 <__ieee754_pow+0x9d4>
 8005812:	4b4f      	ldr	r3, [pc, #316]	; (8005950 <__ieee754_pow+0x260>)
 8005814:	429c      	cmp	r4, r3
 8005816:	dd08      	ble.n	800582a <__ieee754_pow+0x13a>
 8005818:	f1b9 0f00 	cmp.w	r9, #0
 800581c:	f2c0 8456 	blt.w	80060cc <__ieee754_pow+0x9dc>
 8005820:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005824:	e783      	b.n	800572e <__ieee754_pow+0x3e>
 8005826:	2302      	movs	r3, #2
 8005828:	e7e5      	b.n	80057f6 <__ieee754_pow+0x106>
 800582a:	f1b9 0f00 	cmp.w	r9, #0
 800582e:	f04f 0000 	mov.w	r0, #0
 8005832:	f04f 0100 	mov.w	r1, #0
 8005836:	f6bf af7a 	bge.w	800572e <__ieee754_pow+0x3e>
 800583a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800583e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005842:	e774      	b.n	800572e <__ieee754_pow+0x3e>
 8005844:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005848:	d106      	bne.n	8005858 <__ieee754_pow+0x168>
 800584a:	4632      	mov	r2, r6
 800584c:	463b      	mov	r3, r7
 800584e:	4630      	mov	r0, r6
 8005850:	4639      	mov	r1, r7
 8005852:	f7fa fed1 	bl	80005f8 <__aeabi_dmul>
 8005856:	e76a      	b.n	800572e <__ieee754_pow+0x3e>
 8005858:	4b3e      	ldr	r3, [pc, #248]	; (8005954 <__ieee754_pow+0x264>)
 800585a:	4599      	cmp	r9, r3
 800585c:	d10c      	bne.n	8005878 <__ieee754_pow+0x188>
 800585e:	2d00      	cmp	r5, #0
 8005860:	db0a      	blt.n	8005878 <__ieee754_pow+0x188>
 8005862:	ec47 6b10 	vmov	d0, r6, r7
 8005866:	b009      	add	sp, #36	; 0x24
 8005868:	ecbd 8b06 	vpop	{d8-d10}
 800586c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005870:	f7ff bc02 	b.w	8005078 <__ieee754_sqrt>
 8005874:	2300      	movs	r3, #0
 8005876:	9304      	str	r3, [sp, #16]
 8005878:	ec47 6b10 	vmov	d0, r6, r7
 800587c:	f7ff fbe0 	bl	8005040 <fabs>
 8005880:	ec51 0b10 	vmov	r0, r1, d0
 8005884:	f1ba 0f00 	cmp.w	sl, #0
 8005888:	d129      	bne.n	80058de <__ieee754_pow+0x1ee>
 800588a:	b124      	cbz	r4, 8005896 <__ieee754_pow+0x1a6>
 800588c:	4b2f      	ldr	r3, [pc, #188]	; (800594c <__ieee754_pow+0x25c>)
 800588e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005892:	429a      	cmp	r2, r3
 8005894:	d123      	bne.n	80058de <__ieee754_pow+0x1ee>
 8005896:	f1b9 0f00 	cmp.w	r9, #0
 800589a:	da05      	bge.n	80058a8 <__ieee754_pow+0x1b8>
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	2000      	movs	r0, #0
 80058a2:	492a      	ldr	r1, [pc, #168]	; (800594c <__ieee754_pow+0x25c>)
 80058a4:	f7fa ffd2 	bl	800084c <__aeabi_ddiv>
 80058a8:	2d00      	cmp	r5, #0
 80058aa:	f6bf af40 	bge.w	800572e <__ieee754_pow+0x3e>
 80058ae:	9b04      	ldr	r3, [sp, #16]
 80058b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80058b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80058b8:	431c      	orrs	r4, r3
 80058ba:	d108      	bne.n	80058ce <__ieee754_pow+0x1de>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4610      	mov	r0, r2
 80058c2:	4619      	mov	r1, r3
 80058c4:	f7fa fce0 	bl	8000288 <__aeabi_dsub>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	e78f      	b.n	80057ee <__ieee754_pow+0xfe>
 80058ce:	9b04      	ldr	r3, [sp, #16]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	f47f af2c 	bne.w	800572e <__ieee754_pow+0x3e>
 80058d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058da:	4619      	mov	r1, r3
 80058dc:	e727      	b.n	800572e <__ieee754_pow+0x3e>
 80058de:	0feb      	lsrs	r3, r5, #31
 80058e0:	3b01      	subs	r3, #1
 80058e2:	9306      	str	r3, [sp, #24]
 80058e4:	9a06      	ldr	r2, [sp, #24]
 80058e6:	9b04      	ldr	r3, [sp, #16]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	d102      	bne.n	80058f2 <__ieee754_pow+0x202>
 80058ec:	4632      	mov	r2, r6
 80058ee:	463b      	mov	r3, r7
 80058f0:	e7e6      	b.n	80058c0 <__ieee754_pow+0x1d0>
 80058f2:	4b19      	ldr	r3, [pc, #100]	; (8005958 <__ieee754_pow+0x268>)
 80058f4:	4598      	cmp	r8, r3
 80058f6:	f340 80fb 	ble.w	8005af0 <__ieee754_pow+0x400>
 80058fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80058fe:	4598      	cmp	r8, r3
 8005900:	4b13      	ldr	r3, [pc, #76]	; (8005950 <__ieee754_pow+0x260>)
 8005902:	dd0c      	ble.n	800591e <__ieee754_pow+0x22e>
 8005904:	429c      	cmp	r4, r3
 8005906:	dc0f      	bgt.n	8005928 <__ieee754_pow+0x238>
 8005908:	f1b9 0f00 	cmp.w	r9, #0
 800590c:	da0f      	bge.n	800592e <__ieee754_pow+0x23e>
 800590e:	2000      	movs	r0, #0
 8005910:	b009      	add	sp, #36	; 0x24
 8005912:	ecbd 8b06 	vpop	{d8-d10}
 8005916:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591a:	f000 bcba 	b.w	8006292 <__math_oflow>
 800591e:	429c      	cmp	r4, r3
 8005920:	dbf2      	blt.n	8005908 <__ieee754_pow+0x218>
 8005922:	4b0a      	ldr	r3, [pc, #40]	; (800594c <__ieee754_pow+0x25c>)
 8005924:	429c      	cmp	r4, r3
 8005926:	dd19      	ble.n	800595c <__ieee754_pow+0x26c>
 8005928:	f1b9 0f00 	cmp.w	r9, #0
 800592c:	dcef      	bgt.n	800590e <__ieee754_pow+0x21e>
 800592e:	2000      	movs	r0, #0
 8005930:	b009      	add	sp, #36	; 0x24
 8005932:	ecbd 8b06 	vpop	{d8-d10}
 8005936:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800593a:	f000 bca1 	b.w	8006280 <__math_uflow>
 800593e:	bf00      	nop
 8005940:	fff00000 	.word	0xfff00000
 8005944:	7ff00000 	.word	0x7ff00000
 8005948:	433fffff 	.word	0x433fffff
 800594c:	3ff00000 	.word	0x3ff00000
 8005950:	3fefffff 	.word	0x3fefffff
 8005954:	3fe00000 	.word	0x3fe00000
 8005958:	41e00000 	.word	0x41e00000
 800595c:	4b60      	ldr	r3, [pc, #384]	; (8005ae0 <__ieee754_pow+0x3f0>)
 800595e:	2200      	movs	r2, #0
 8005960:	f7fa fc92 	bl	8000288 <__aeabi_dsub>
 8005964:	a354      	add	r3, pc, #336	; (adr r3, 8005ab8 <__ieee754_pow+0x3c8>)
 8005966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596a:	4604      	mov	r4, r0
 800596c:	460d      	mov	r5, r1
 800596e:	f7fa fe43 	bl	80005f8 <__aeabi_dmul>
 8005972:	a353      	add	r3, pc, #332	; (adr r3, 8005ac0 <__ieee754_pow+0x3d0>)
 8005974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005978:	4606      	mov	r6, r0
 800597a:	460f      	mov	r7, r1
 800597c:	4620      	mov	r0, r4
 800597e:	4629      	mov	r1, r5
 8005980:	f7fa fe3a 	bl	80005f8 <__aeabi_dmul>
 8005984:	4b57      	ldr	r3, [pc, #348]	; (8005ae4 <__ieee754_pow+0x3f4>)
 8005986:	4682      	mov	sl, r0
 8005988:	468b      	mov	fp, r1
 800598a:	2200      	movs	r2, #0
 800598c:	4620      	mov	r0, r4
 800598e:	4629      	mov	r1, r5
 8005990:	f7fa fe32 	bl	80005f8 <__aeabi_dmul>
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	a14b      	add	r1, pc, #300	; (adr r1, 8005ac8 <__ieee754_pow+0x3d8>)
 800599a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800599e:	f7fa fc73 	bl	8000288 <__aeabi_dsub>
 80059a2:	4622      	mov	r2, r4
 80059a4:	462b      	mov	r3, r5
 80059a6:	f7fa fe27 	bl	80005f8 <__aeabi_dmul>
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	2000      	movs	r0, #0
 80059b0:	494d      	ldr	r1, [pc, #308]	; (8005ae8 <__ieee754_pow+0x3f8>)
 80059b2:	f7fa fc69 	bl	8000288 <__aeabi_dsub>
 80059b6:	4622      	mov	r2, r4
 80059b8:	4680      	mov	r8, r0
 80059ba:	4689      	mov	r9, r1
 80059bc:	462b      	mov	r3, r5
 80059be:	4620      	mov	r0, r4
 80059c0:	4629      	mov	r1, r5
 80059c2:	f7fa fe19 	bl	80005f8 <__aeabi_dmul>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4640      	mov	r0, r8
 80059cc:	4649      	mov	r1, r9
 80059ce:	f7fa fe13 	bl	80005f8 <__aeabi_dmul>
 80059d2:	a33f      	add	r3, pc, #252	; (adr r3, 8005ad0 <__ieee754_pow+0x3e0>)
 80059d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d8:	f7fa fe0e 	bl	80005f8 <__aeabi_dmul>
 80059dc:	4602      	mov	r2, r0
 80059de:	460b      	mov	r3, r1
 80059e0:	4650      	mov	r0, sl
 80059e2:	4659      	mov	r1, fp
 80059e4:	f7fa fc50 	bl	8000288 <__aeabi_dsub>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4680      	mov	r8, r0
 80059ee:	4689      	mov	r9, r1
 80059f0:	4630      	mov	r0, r6
 80059f2:	4639      	mov	r1, r7
 80059f4:	f7fa fc4a 	bl	800028c <__adddf3>
 80059f8:	2000      	movs	r0, #0
 80059fa:	4632      	mov	r2, r6
 80059fc:	463b      	mov	r3, r7
 80059fe:	4604      	mov	r4, r0
 8005a00:	460d      	mov	r5, r1
 8005a02:	f7fa fc41 	bl	8000288 <__aeabi_dsub>
 8005a06:	4602      	mov	r2, r0
 8005a08:	460b      	mov	r3, r1
 8005a0a:	4640      	mov	r0, r8
 8005a0c:	4649      	mov	r1, r9
 8005a0e:	f7fa fc3b 	bl	8000288 <__aeabi_dsub>
 8005a12:	9b04      	ldr	r3, [sp, #16]
 8005a14:	9a06      	ldr	r2, [sp, #24]
 8005a16:	3b01      	subs	r3, #1
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	4682      	mov	sl, r0
 8005a1c:	468b      	mov	fp, r1
 8005a1e:	f040 81e7 	bne.w	8005df0 <__ieee754_pow+0x700>
 8005a22:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005ad8 <__ieee754_pow+0x3e8>
 8005a26:	eeb0 8a47 	vmov.f32	s16, s14
 8005a2a:	eef0 8a67 	vmov.f32	s17, s15
 8005a2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005a32:	2600      	movs	r6, #0
 8005a34:	4632      	mov	r2, r6
 8005a36:	463b      	mov	r3, r7
 8005a38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a3c:	f7fa fc24 	bl	8000288 <__aeabi_dsub>
 8005a40:	4622      	mov	r2, r4
 8005a42:	462b      	mov	r3, r5
 8005a44:	f7fa fdd8 	bl	80005f8 <__aeabi_dmul>
 8005a48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a4c:	4680      	mov	r8, r0
 8005a4e:	4689      	mov	r9, r1
 8005a50:	4650      	mov	r0, sl
 8005a52:	4659      	mov	r1, fp
 8005a54:	f7fa fdd0 	bl	80005f8 <__aeabi_dmul>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4640      	mov	r0, r8
 8005a5e:	4649      	mov	r1, r9
 8005a60:	f7fa fc14 	bl	800028c <__adddf3>
 8005a64:	4632      	mov	r2, r6
 8005a66:	463b      	mov	r3, r7
 8005a68:	4680      	mov	r8, r0
 8005a6a:	4689      	mov	r9, r1
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	4629      	mov	r1, r5
 8005a70:	f7fa fdc2 	bl	80005f8 <__aeabi_dmul>
 8005a74:	460b      	mov	r3, r1
 8005a76:	4604      	mov	r4, r0
 8005a78:	460d      	mov	r5, r1
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	4649      	mov	r1, r9
 8005a7e:	4640      	mov	r0, r8
 8005a80:	f7fa fc04 	bl	800028c <__adddf3>
 8005a84:	4b19      	ldr	r3, [pc, #100]	; (8005aec <__ieee754_pow+0x3fc>)
 8005a86:	4299      	cmp	r1, r3
 8005a88:	ec45 4b19 	vmov	d9, r4, r5
 8005a8c:	4606      	mov	r6, r0
 8005a8e:	460f      	mov	r7, r1
 8005a90:	468b      	mov	fp, r1
 8005a92:	f340 82f0 	ble.w	8006076 <__ieee754_pow+0x986>
 8005a96:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005a9a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005a9e:	4303      	orrs	r3, r0
 8005aa0:	f000 81e4 	beq.w	8005e6c <__ieee754_pow+0x77c>
 8005aa4:	ec51 0b18 	vmov	r0, r1, d8
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	2300      	movs	r3, #0
 8005aac:	f7fb f816 	bl	8000adc <__aeabi_dcmplt>
 8005ab0:	3800      	subs	r0, #0
 8005ab2:	bf18      	it	ne
 8005ab4:	2001      	movne	r0, #1
 8005ab6:	e72b      	b.n	8005910 <__ieee754_pow+0x220>
 8005ab8:	60000000 	.word	0x60000000
 8005abc:	3ff71547 	.word	0x3ff71547
 8005ac0:	f85ddf44 	.word	0xf85ddf44
 8005ac4:	3e54ae0b 	.word	0x3e54ae0b
 8005ac8:	55555555 	.word	0x55555555
 8005acc:	3fd55555 	.word	0x3fd55555
 8005ad0:	652b82fe 	.word	0x652b82fe
 8005ad4:	3ff71547 	.word	0x3ff71547
 8005ad8:	00000000 	.word	0x00000000
 8005adc:	bff00000 	.word	0xbff00000
 8005ae0:	3ff00000 	.word	0x3ff00000
 8005ae4:	3fd00000 	.word	0x3fd00000
 8005ae8:	3fe00000 	.word	0x3fe00000
 8005aec:	408fffff 	.word	0x408fffff
 8005af0:	4bd5      	ldr	r3, [pc, #852]	; (8005e48 <__ieee754_pow+0x758>)
 8005af2:	402b      	ands	r3, r5
 8005af4:	2200      	movs	r2, #0
 8005af6:	b92b      	cbnz	r3, 8005b04 <__ieee754_pow+0x414>
 8005af8:	4bd4      	ldr	r3, [pc, #848]	; (8005e4c <__ieee754_pow+0x75c>)
 8005afa:	f7fa fd7d 	bl	80005f8 <__aeabi_dmul>
 8005afe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005b02:	460c      	mov	r4, r1
 8005b04:	1523      	asrs	r3, r4, #20
 8005b06:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005b0a:	4413      	add	r3, r2
 8005b0c:	9305      	str	r3, [sp, #20]
 8005b0e:	4bd0      	ldr	r3, [pc, #832]	; (8005e50 <__ieee754_pow+0x760>)
 8005b10:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005b14:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005b18:	429c      	cmp	r4, r3
 8005b1a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005b1e:	dd08      	ble.n	8005b32 <__ieee754_pow+0x442>
 8005b20:	4bcc      	ldr	r3, [pc, #816]	; (8005e54 <__ieee754_pow+0x764>)
 8005b22:	429c      	cmp	r4, r3
 8005b24:	f340 8162 	ble.w	8005dec <__ieee754_pow+0x6fc>
 8005b28:	9b05      	ldr	r3, [sp, #20]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	9305      	str	r3, [sp, #20]
 8005b2e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005b32:	2400      	movs	r4, #0
 8005b34:	00e3      	lsls	r3, r4, #3
 8005b36:	9307      	str	r3, [sp, #28]
 8005b38:	4bc7      	ldr	r3, [pc, #796]	; (8005e58 <__ieee754_pow+0x768>)
 8005b3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b3e:	ed93 7b00 	vldr	d7, [r3]
 8005b42:	4629      	mov	r1, r5
 8005b44:	ec53 2b17 	vmov	r2, r3, d7
 8005b48:	eeb0 9a47 	vmov.f32	s18, s14
 8005b4c:	eef0 9a67 	vmov.f32	s19, s15
 8005b50:	4682      	mov	sl, r0
 8005b52:	f7fa fb99 	bl	8000288 <__aeabi_dsub>
 8005b56:	4652      	mov	r2, sl
 8005b58:	4606      	mov	r6, r0
 8005b5a:	460f      	mov	r7, r1
 8005b5c:	462b      	mov	r3, r5
 8005b5e:	ec51 0b19 	vmov	r0, r1, d9
 8005b62:	f7fa fb93 	bl	800028c <__adddf3>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	49bb      	ldr	r1, [pc, #748]	; (8005e5c <__ieee754_pow+0x76c>)
 8005b6e:	f7fa fe6d 	bl	800084c <__aeabi_ddiv>
 8005b72:	ec41 0b1a 	vmov	d10, r0, r1
 8005b76:	4602      	mov	r2, r0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	4639      	mov	r1, r7
 8005b7e:	f7fa fd3b 	bl	80005f8 <__aeabi_dmul>
 8005b82:	2300      	movs	r3, #0
 8005b84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b88:	9302      	str	r3, [sp, #8]
 8005b8a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005b8e:	46ab      	mov	fp, r5
 8005b90:	106d      	asrs	r5, r5, #1
 8005b92:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005b96:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005b9a:	ec41 0b18 	vmov	d8, r0, r1
 8005b9e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	4640      	mov	r0, r8
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	4614      	mov	r4, r2
 8005baa:	461d      	mov	r5, r3
 8005bac:	f7fa fd24 	bl	80005f8 <__aeabi_dmul>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	4639      	mov	r1, r7
 8005bb8:	f7fa fb66 	bl	8000288 <__aeabi_dsub>
 8005bbc:	ec53 2b19 	vmov	r2, r3, d9
 8005bc0:	4606      	mov	r6, r0
 8005bc2:	460f      	mov	r7, r1
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	f7fa fb5e 	bl	8000288 <__aeabi_dsub>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4650      	mov	r0, sl
 8005bd2:	4659      	mov	r1, fp
 8005bd4:	f7fa fb58 	bl	8000288 <__aeabi_dsub>
 8005bd8:	4642      	mov	r2, r8
 8005bda:	464b      	mov	r3, r9
 8005bdc:	f7fa fd0c 	bl	80005f8 <__aeabi_dmul>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4630      	mov	r0, r6
 8005be6:	4639      	mov	r1, r7
 8005be8:	f7fa fb4e 	bl	8000288 <__aeabi_dsub>
 8005bec:	ec53 2b1a 	vmov	r2, r3, d10
 8005bf0:	f7fa fd02 	bl	80005f8 <__aeabi_dmul>
 8005bf4:	ec53 2b18 	vmov	r2, r3, d8
 8005bf8:	ec41 0b19 	vmov	d9, r0, r1
 8005bfc:	ec51 0b18 	vmov	r0, r1, d8
 8005c00:	f7fa fcfa 	bl	80005f8 <__aeabi_dmul>
 8005c04:	a37c      	add	r3, pc, #496	; (adr r3, 8005df8 <__ieee754_pow+0x708>)
 8005c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	460d      	mov	r5, r1
 8005c0e:	f7fa fcf3 	bl	80005f8 <__aeabi_dmul>
 8005c12:	a37b      	add	r3, pc, #492	; (adr r3, 8005e00 <__ieee754_pow+0x710>)
 8005c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c18:	f7fa fb38 	bl	800028c <__adddf3>
 8005c1c:	4622      	mov	r2, r4
 8005c1e:	462b      	mov	r3, r5
 8005c20:	f7fa fcea 	bl	80005f8 <__aeabi_dmul>
 8005c24:	a378      	add	r3, pc, #480	; (adr r3, 8005e08 <__ieee754_pow+0x718>)
 8005c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2a:	f7fa fb2f 	bl	800028c <__adddf3>
 8005c2e:	4622      	mov	r2, r4
 8005c30:	462b      	mov	r3, r5
 8005c32:	f7fa fce1 	bl	80005f8 <__aeabi_dmul>
 8005c36:	a376      	add	r3, pc, #472	; (adr r3, 8005e10 <__ieee754_pow+0x720>)
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	f7fa fb26 	bl	800028c <__adddf3>
 8005c40:	4622      	mov	r2, r4
 8005c42:	462b      	mov	r3, r5
 8005c44:	f7fa fcd8 	bl	80005f8 <__aeabi_dmul>
 8005c48:	a373      	add	r3, pc, #460	; (adr r3, 8005e18 <__ieee754_pow+0x728>)
 8005c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4e:	f7fa fb1d 	bl	800028c <__adddf3>
 8005c52:	4622      	mov	r2, r4
 8005c54:	462b      	mov	r3, r5
 8005c56:	f7fa fccf 	bl	80005f8 <__aeabi_dmul>
 8005c5a:	a371      	add	r3, pc, #452	; (adr r3, 8005e20 <__ieee754_pow+0x730>)
 8005c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c60:	f7fa fb14 	bl	800028c <__adddf3>
 8005c64:	4622      	mov	r2, r4
 8005c66:	4606      	mov	r6, r0
 8005c68:	460f      	mov	r7, r1
 8005c6a:	462b      	mov	r3, r5
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	4629      	mov	r1, r5
 8005c70:	f7fa fcc2 	bl	80005f8 <__aeabi_dmul>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	4630      	mov	r0, r6
 8005c7a:	4639      	mov	r1, r7
 8005c7c:	f7fa fcbc 	bl	80005f8 <__aeabi_dmul>
 8005c80:	4642      	mov	r2, r8
 8005c82:	4604      	mov	r4, r0
 8005c84:	460d      	mov	r5, r1
 8005c86:	464b      	mov	r3, r9
 8005c88:	ec51 0b18 	vmov	r0, r1, d8
 8005c8c:	f7fa fafe 	bl	800028c <__adddf3>
 8005c90:	ec53 2b19 	vmov	r2, r3, d9
 8005c94:	f7fa fcb0 	bl	80005f8 <__aeabi_dmul>
 8005c98:	4622      	mov	r2, r4
 8005c9a:	462b      	mov	r3, r5
 8005c9c:	f7fa faf6 	bl	800028c <__adddf3>
 8005ca0:	4642      	mov	r2, r8
 8005ca2:	4682      	mov	sl, r0
 8005ca4:	468b      	mov	fp, r1
 8005ca6:	464b      	mov	r3, r9
 8005ca8:	4640      	mov	r0, r8
 8005caa:	4649      	mov	r1, r9
 8005cac:	f7fa fca4 	bl	80005f8 <__aeabi_dmul>
 8005cb0:	4b6b      	ldr	r3, [pc, #428]	; (8005e60 <__ieee754_pow+0x770>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	4606      	mov	r6, r0
 8005cb6:	460f      	mov	r7, r1
 8005cb8:	f7fa fae8 	bl	800028c <__adddf3>
 8005cbc:	4652      	mov	r2, sl
 8005cbe:	465b      	mov	r3, fp
 8005cc0:	f7fa fae4 	bl	800028c <__adddf3>
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	4604      	mov	r4, r0
 8005cc8:	460d      	mov	r5, r1
 8005cca:	4602      	mov	r2, r0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	4640      	mov	r0, r8
 8005cd0:	4649      	mov	r1, r9
 8005cd2:	f7fa fc91 	bl	80005f8 <__aeabi_dmul>
 8005cd6:	4b62      	ldr	r3, [pc, #392]	; (8005e60 <__ieee754_pow+0x770>)
 8005cd8:	4680      	mov	r8, r0
 8005cda:	4689      	mov	r9, r1
 8005cdc:	2200      	movs	r2, #0
 8005cde:	4620      	mov	r0, r4
 8005ce0:	4629      	mov	r1, r5
 8005ce2:	f7fa fad1 	bl	8000288 <__aeabi_dsub>
 8005ce6:	4632      	mov	r2, r6
 8005ce8:	463b      	mov	r3, r7
 8005cea:	f7fa facd 	bl	8000288 <__aeabi_dsub>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	4650      	mov	r0, sl
 8005cf4:	4659      	mov	r1, fp
 8005cf6:	f7fa fac7 	bl	8000288 <__aeabi_dsub>
 8005cfa:	ec53 2b18 	vmov	r2, r3, d8
 8005cfe:	f7fa fc7b 	bl	80005f8 <__aeabi_dmul>
 8005d02:	4622      	mov	r2, r4
 8005d04:	4606      	mov	r6, r0
 8005d06:	460f      	mov	r7, r1
 8005d08:	462b      	mov	r3, r5
 8005d0a:	ec51 0b19 	vmov	r0, r1, d9
 8005d0e:	f7fa fc73 	bl	80005f8 <__aeabi_dmul>
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	4630      	mov	r0, r6
 8005d18:	4639      	mov	r1, r7
 8005d1a:	f7fa fab7 	bl	800028c <__adddf3>
 8005d1e:	4606      	mov	r6, r0
 8005d20:	460f      	mov	r7, r1
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	4640      	mov	r0, r8
 8005d28:	4649      	mov	r1, r9
 8005d2a:	f7fa faaf 	bl	800028c <__adddf3>
 8005d2e:	a33e      	add	r3, pc, #248	; (adr r3, 8005e28 <__ieee754_pow+0x738>)
 8005d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d34:	2000      	movs	r0, #0
 8005d36:	4604      	mov	r4, r0
 8005d38:	460d      	mov	r5, r1
 8005d3a:	f7fa fc5d 	bl	80005f8 <__aeabi_dmul>
 8005d3e:	4642      	mov	r2, r8
 8005d40:	ec41 0b18 	vmov	d8, r0, r1
 8005d44:	464b      	mov	r3, r9
 8005d46:	4620      	mov	r0, r4
 8005d48:	4629      	mov	r1, r5
 8005d4a:	f7fa fa9d 	bl	8000288 <__aeabi_dsub>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4630      	mov	r0, r6
 8005d54:	4639      	mov	r1, r7
 8005d56:	f7fa fa97 	bl	8000288 <__aeabi_dsub>
 8005d5a:	a335      	add	r3, pc, #212	; (adr r3, 8005e30 <__ieee754_pow+0x740>)
 8005d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d60:	f7fa fc4a 	bl	80005f8 <__aeabi_dmul>
 8005d64:	a334      	add	r3, pc, #208	; (adr r3, 8005e38 <__ieee754_pow+0x748>)
 8005d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6a:	4606      	mov	r6, r0
 8005d6c:	460f      	mov	r7, r1
 8005d6e:	4620      	mov	r0, r4
 8005d70:	4629      	mov	r1, r5
 8005d72:	f7fa fc41 	bl	80005f8 <__aeabi_dmul>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4630      	mov	r0, r6
 8005d7c:	4639      	mov	r1, r7
 8005d7e:	f7fa fa85 	bl	800028c <__adddf3>
 8005d82:	9a07      	ldr	r2, [sp, #28]
 8005d84:	4b37      	ldr	r3, [pc, #220]	; (8005e64 <__ieee754_pow+0x774>)
 8005d86:	4413      	add	r3, r2
 8005d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8c:	f7fa fa7e 	bl	800028c <__adddf3>
 8005d90:	4682      	mov	sl, r0
 8005d92:	9805      	ldr	r0, [sp, #20]
 8005d94:	468b      	mov	fp, r1
 8005d96:	f7fa fbc5 	bl	8000524 <__aeabi_i2d>
 8005d9a:	9a07      	ldr	r2, [sp, #28]
 8005d9c:	4b32      	ldr	r3, [pc, #200]	; (8005e68 <__ieee754_pow+0x778>)
 8005d9e:	4413      	add	r3, r2
 8005da0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005da4:	4606      	mov	r6, r0
 8005da6:	460f      	mov	r7, r1
 8005da8:	4652      	mov	r2, sl
 8005daa:	465b      	mov	r3, fp
 8005dac:	ec51 0b18 	vmov	r0, r1, d8
 8005db0:	f7fa fa6c 	bl	800028c <__adddf3>
 8005db4:	4642      	mov	r2, r8
 8005db6:	464b      	mov	r3, r9
 8005db8:	f7fa fa68 	bl	800028c <__adddf3>
 8005dbc:	4632      	mov	r2, r6
 8005dbe:	463b      	mov	r3, r7
 8005dc0:	f7fa fa64 	bl	800028c <__adddf3>
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	4632      	mov	r2, r6
 8005dc8:	463b      	mov	r3, r7
 8005dca:	4604      	mov	r4, r0
 8005dcc:	460d      	mov	r5, r1
 8005dce:	f7fa fa5b 	bl	8000288 <__aeabi_dsub>
 8005dd2:	4642      	mov	r2, r8
 8005dd4:	464b      	mov	r3, r9
 8005dd6:	f7fa fa57 	bl	8000288 <__aeabi_dsub>
 8005dda:	ec53 2b18 	vmov	r2, r3, d8
 8005dde:	f7fa fa53 	bl	8000288 <__aeabi_dsub>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	4650      	mov	r0, sl
 8005de8:	4659      	mov	r1, fp
 8005dea:	e610      	b.n	8005a0e <__ieee754_pow+0x31e>
 8005dec:	2401      	movs	r4, #1
 8005dee:	e6a1      	b.n	8005b34 <__ieee754_pow+0x444>
 8005df0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005e40 <__ieee754_pow+0x750>
 8005df4:	e617      	b.n	8005a26 <__ieee754_pow+0x336>
 8005df6:	bf00      	nop
 8005df8:	4a454eef 	.word	0x4a454eef
 8005dfc:	3fca7e28 	.word	0x3fca7e28
 8005e00:	93c9db65 	.word	0x93c9db65
 8005e04:	3fcd864a 	.word	0x3fcd864a
 8005e08:	a91d4101 	.word	0xa91d4101
 8005e0c:	3fd17460 	.word	0x3fd17460
 8005e10:	518f264d 	.word	0x518f264d
 8005e14:	3fd55555 	.word	0x3fd55555
 8005e18:	db6fabff 	.word	0xdb6fabff
 8005e1c:	3fdb6db6 	.word	0x3fdb6db6
 8005e20:	33333303 	.word	0x33333303
 8005e24:	3fe33333 	.word	0x3fe33333
 8005e28:	e0000000 	.word	0xe0000000
 8005e2c:	3feec709 	.word	0x3feec709
 8005e30:	dc3a03fd 	.word	0xdc3a03fd
 8005e34:	3feec709 	.word	0x3feec709
 8005e38:	145b01f5 	.word	0x145b01f5
 8005e3c:	be3e2fe0 	.word	0xbe3e2fe0
 8005e40:	00000000 	.word	0x00000000
 8005e44:	3ff00000 	.word	0x3ff00000
 8005e48:	7ff00000 	.word	0x7ff00000
 8005e4c:	43400000 	.word	0x43400000
 8005e50:	0003988e 	.word	0x0003988e
 8005e54:	000bb679 	.word	0x000bb679
 8005e58:	08007c20 	.word	0x08007c20
 8005e5c:	3ff00000 	.word	0x3ff00000
 8005e60:	40080000 	.word	0x40080000
 8005e64:	08007c40 	.word	0x08007c40
 8005e68:	08007c30 	.word	0x08007c30
 8005e6c:	a3b3      	add	r3, pc, #716	; (adr r3, 800613c <__ieee754_pow+0xa4c>)
 8005e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e72:	4640      	mov	r0, r8
 8005e74:	4649      	mov	r1, r9
 8005e76:	f7fa fa09 	bl	800028c <__adddf3>
 8005e7a:	4622      	mov	r2, r4
 8005e7c:	ec41 0b1a 	vmov	d10, r0, r1
 8005e80:	462b      	mov	r3, r5
 8005e82:	4630      	mov	r0, r6
 8005e84:	4639      	mov	r1, r7
 8005e86:	f7fa f9ff 	bl	8000288 <__aeabi_dsub>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	ec51 0b1a 	vmov	r0, r1, d10
 8005e92:	f7fa fe41 	bl	8000b18 <__aeabi_dcmpgt>
 8005e96:	2800      	cmp	r0, #0
 8005e98:	f47f ae04 	bne.w	8005aa4 <__ieee754_pow+0x3b4>
 8005e9c:	4aa2      	ldr	r2, [pc, #648]	; (8006128 <__ieee754_pow+0xa38>)
 8005e9e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	f340 8107 	ble.w	80060b6 <__ieee754_pow+0x9c6>
 8005ea8:	151b      	asrs	r3, r3, #20
 8005eaa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005eae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005eb2:	fa4a fa03 	asr.w	sl, sl, r3
 8005eb6:	44da      	add	sl, fp
 8005eb8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005ebc:	489b      	ldr	r0, [pc, #620]	; (800612c <__ieee754_pow+0xa3c>)
 8005ebe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005ec2:	4108      	asrs	r0, r1
 8005ec4:	ea00 030a 	and.w	r3, r0, sl
 8005ec8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8005ecc:	f1c1 0114 	rsb	r1, r1, #20
 8005ed0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005ed4:	fa4a fa01 	asr.w	sl, sl, r1
 8005ed8:	f1bb 0f00 	cmp.w	fp, #0
 8005edc:	f04f 0200 	mov.w	r2, #0
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	bfb8      	it	lt
 8005ee6:	f1ca 0a00 	rsblt	sl, sl, #0
 8005eea:	f7fa f9cd 	bl	8000288 <__aeabi_dsub>
 8005eee:	ec41 0b19 	vmov	d9, r0, r1
 8005ef2:	4642      	mov	r2, r8
 8005ef4:	464b      	mov	r3, r9
 8005ef6:	ec51 0b19 	vmov	r0, r1, d9
 8005efa:	f7fa f9c7 	bl	800028c <__adddf3>
 8005efe:	a37a      	add	r3, pc, #488	; (adr r3, 80060e8 <__ieee754_pow+0x9f8>)
 8005f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f04:	2000      	movs	r0, #0
 8005f06:	4604      	mov	r4, r0
 8005f08:	460d      	mov	r5, r1
 8005f0a:	f7fa fb75 	bl	80005f8 <__aeabi_dmul>
 8005f0e:	ec53 2b19 	vmov	r2, r3, d9
 8005f12:	4606      	mov	r6, r0
 8005f14:	460f      	mov	r7, r1
 8005f16:	4620      	mov	r0, r4
 8005f18:	4629      	mov	r1, r5
 8005f1a:	f7fa f9b5 	bl	8000288 <__aeabi_dsub>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	4640      	mov	r0, r8
 8005f24:	4649      	mov	r1, r9
 8005f26:	f7fa f9af 	bl	8000288 <__aeabi_dsub>
 8005f2a:	a371      	add	r3, pc, #452	; (adr r3, 80060f0 <__ieee754_pow+0xa00>)
 8005f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f30:	f7fa fb62 	bl	80005f8 <__aeabi_dmul>
 8005f34:	a370      	add	r3, pc, #448	; (adr r3, 80060f8 <__ieee754_pow+0xa08>)
 8005f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3a:	4680      	mov	r8, r0
 8005f3c:	4689      	mov	r9, r1
 8005f3e:	4620      	mov	r0, r4
 8005f40:	4629      	mov	r1, r5
 8005f42:	f7fa fb59 	bl	80005f8 <__aeabi_dmul>
 8005f46:	4602      	mov	r2, r0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	4640      	mov	r0, r8
 8005f4c:	4649      	mov	r1, r9
 8005f4e:	f7fa f99d 	bl	800028c <__adddf3>
 8005f52:	4604      	mov	r4, r0
 8005f54:	460d      	mov	r5, r1
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	4630      	mov	r0, r6
 8005f5c:	4639      	mov	r1, r7
 8005f5e:	f7fa f995 	bl	800028c <__adddf3>
 8005f62:	4632      	mov	r2, r6
 8005f64:	463b      	mov	r3, r7
 8005f66:	4680      	mov	r8, r0
 8005f68:	4689      	mov	r9, r1
 8005f6a:	f7fa f98d 	bl	8000288 <__aeabi_dsub>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	4620      	mov	r0, r4
 8005f74:	4629      	mov	r1, r5
 8005f76:	f7fa f987 	bl	8000288 <__aeabi_dsub>
 8005f7a:	4642      	mov	r2, r8
 8005f7c:	4606      	mov	r6, r0
 8005f7e:	460f      	mov	r7, r1
 8005f80:	464b      	mov	r3, r9
 8005f82:	4640      	mov	r0, r8
 8005f84:	4649      	mov	r1, r9
 8005f86:	f7fa fb37 	bl	80005f8 <__aeabi_dmul>
 8005f8a:	a35d      	add	r3, pc, #372	; (adr r3, 8006100 <__ieee754_pow+0xa10>)
 8005f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f90:	4604      	mov	r4, r0
 8005f92:	460d      	mov	r5, r1
 8005f94:	f7fa fb30 	bl	80005f8 <__aeabi_dmul>
 8005f98:	a35b      	add	r3, pc, #364	; (adr r3, 8006108 <__ieee754_pow+0xa18>)
 8005f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9e:	f7fa f973 	bl	8000288 <__aeabi_dsub>
 8005fa2:	4622      	mov	r2, r4
 8005fa4:	462b      	mov	r3, r5
 8005fa6:	f7fa fb27 	bl	80005f8 <__aeabi_dmul>
 8005faa:	a359      	add	r3, pc, #356	; (adr r3, 8006110 <__ieee754_pow+0xa20>)
 8005fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb0:	f7fa f96c 	bl	800028c <__adddf3>
 8005fb4:	4622      	mov	r2, r4
 8005fb6:	462b      	mov	r3, r5
 8005fb8:	f7fa fb1e 	bl	80005f8 <__aeabi_dmul>
 8005fbc:	a356      	add	r3, pc, #344	; (adr r3, 8006118 <__ieee754_pow+0xa28>)
 8005fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc2:	f7fa f961 	bl	8000288 <__aeabi_dsub>
 8005fc6:	4622      	mov	r2, r4
 8005fc8:	462b      	mov	r3, r5
 8005fca:	f7fa fb15 	bl	80005f8 <__aeabi_dmul>
 8005fce:	a354      	add	r3, pc, #336	; (adr r3, 8006120 <__ieee754_pow+0xa30>)
 8005fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd4:	f7fa f95a 	bl	800028c <__adddf3>
 8005fd8:	4622      	mov	r2, r4
 8005fda:	462b      	mov	r3, r5
 8005fdc:	f7fa fb0c 	bl	80005f8 <__aeabi_dmul>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	4640      	mov	r0, r8
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	f7fa f94e 	bl	8000288 <__aeabi_dsub>
 8005fec:	4604      	mov	r4, r0
 8005fee:	460d      	mov	r5, r1
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4640      	mov	r0, r8
 8005ff6:	4649      	mov	r1, r9
 8005ff8:	f7fa fafe 	bl	80005f8 <__aeabi_dmul>
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	ec41 0b19 	vmov	d9, r0, r1
 8006002:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006006:	4620      	mov	r0, r4
 8006008:	4629      	mov	r1, r5
 800600a:	f7fa f93d 	bl	8000288 <__aeabi_dsub>
 800600e:	4602      	mov	r2, r0
 8006010:	460b      	mov	r3, r1
 8006012:	ec51 0b19 	vmov	r0, r1, d9
 8006016:	f7fa fc19 	bl	800084c <__aeabi_ddiv>
 800601a:	4632      	mov	r2, r6
 800601c:	4604      	mov	r4, r0
 800601e:	460d      	mov	r5, r1
 8006020:	463b      	mov	r3, r7
 8006022:	4640      	mov	r0, r8
 8006024:	4649      	mov	r1, r9
 8006026:	f7fa fae7 	bl	80005f8 <__aeabi_dmul>
 800602a:	4632      	mov	r2, r6
 800602c:	463b      	mov	r3, r7
 800602e:	f7fa f92d 	bl	800028c <__adddf3>
 8006032:	4602      	mov	r2, r0
 8006034:	460b      	mov	r3, r1
 8006036:	4620      	mov	r0, r4
 8006038:	4629      	mov	r1, r5
 800603a:	f7fa f925 	bl	8000288 <__aeabi_dsub>
 800603e:	4642      	mov	r2, r8
 8006040:	464b      	mov	r3, r9
 8006042:	f7fa f921 	bl	8000288 <__aeabi_dsub>
 8006046:	460b      	mov	r3, r1
 8006048:	4602      	mov	r2, r0
 800604a:	4939      	ldr	r1, [pc, #228]	; (8006130 <__ieee754_pow+0xa40>)
 800604c:	2000      	movs	r0, #0
 800604e:	f7fa f91b 	bl	8000288 <__aeabi_dsub>
 8006052:	ec41 0b10 	vmov	d0, r0, r1
 8006056:	ee10 3a90 	vmov	r3, s1
 800605a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800605e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006062:	da2b      	bge.n	80060bc <__ieee754_pow+0x9cc>
 8006064:	4650      	mov	r0, sl
 8006066:	f000 f86f 	bl	8006148 <scalbn>
 800606a:	ec51 0b10 	vmov	r0, r1, d0
 800606e:	ec53 2b18 	vmov	r2, r3, d8
 8006072:	f7ff bbee 	b.w	8005852 <__ieee754_pow+0x162>
 8006076:	4b2f      	ldr	r3, [pc, #188]	; (8006134 <__ieee754_pow+0xa44>)
 8006078:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800607c:	429e      	cmp	r6, r3
 800607e:	f77f af0d 	ble.w	8005e9c <__ieee754_pow+0x7ac>
 8006082:	4b2d      	ldr	r3, [pc, #180]	; (8006138 <__ieee754_pow+0xa48>)
 8006084:	440b      	add	r3, r1
 8006086:	4303      	orrs	r3, r0
 8006088:	d009      	beq.n	800609e <__ieee754_pow+0x9ae>
 800608a:	ec51 0b18 	vmov	r0, r1, d8
 800608e:	2200      	movs	r2, #0
 8006090:	2300      	movs	r3, #0
 8006092:	f7fa fd23 	bl	8000adc <__aeabi_dcmplt>
 8006096:	3800      	subs	r0, #0
 8006098:	bf18      	it	ne
 800609a:	2001      	movne	r0, #1
 800609c:	e448      	b.n	8005930 <__ieee754_pow+0x240>
 800609e:	4622      	mov	r2, r4
 80060a0:	462b      	mov	r3, r5
 80060a2:	f7fa f8f1 	bl	8000288 <__aeabi_dsub>
 80060a6:	4642      	mov	r2, r8
 80060a8:	464b      	mov	r3, r9
 80060aa:	f7fa fd2b 	bl	8000b04 <__aeabi_dcmpge>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	f43f aef4 	beq.w	8005e9c <__ieee754_pow+0x7ac>
 80060b4:	e7e9      	b.n	800608a <__ieee754_pow+0x99a>
 80060b6:	f04f 0a00 	mov.w	sl, #0
 80060ba:	e71a      	b.n	8005ef2 <__ieee754_pow+0x802>
 80060bc:	ec51 0b10 	vmov	r0, r1, d0
 80060c0:	4619      	mov	r1, r3
 80060c2:	e7d4      	b.n	800606e <__ieee754_pow+0x97e>
 80060c4:	491a      	ldr	r1, [pc, #104]	; (8006130 <__ieee754_pow+0xa40>)
 80060c6:	2000      	movs	r0, #0
 80060c8:	f7ff bb31 	b.w	800572e <__ieee754_pow+0x3e>
 80060cc:	2000      	movs	r0, #0
 80060ce:	2100      	movs	r1, #0
 80060d0:	f7ff bb2d 	b.w	800572e <__ieee754_pow+0x3e>
 80060d4:	4630      	mov	r0, r6
 80060d6:	4639      	mov	r1, r7
 80060d8:	f7ff bb29 	b.w	800572e <__ieee754_pow+0x3e>
 80060dc:	9204      	str	r2, [sp, #16]
 80060de:	f7ff bb7b 	b.w	80057d8 <__ieee754_pow+0xe8>
 80060e2:	2300      	movs	r3, #0
 80060e4:	f7ff bb65 	b.w	80057b2 <__ieee754_pow+0xc2>
 80060e8:	00000000 	.word	0x00000000
 80060ec:	3fe62e43 	.word	0x3fe62e43
 80060f0:	fefa39ef 	.word	0xfefa39ef
 80060f4:	3fe62e42 	.word	0x3fe62e42
 80060f8:	0ca86c39 	.word	0x0ca86c39
 80060fc:	be205c61 	.word	0xbe205c61
 8006100:	72bea4d0 	.word	0x72bea4d0
 8006104:	3e663769 	.word	0x3e663769
 8006108:	c5d26bf1 	.word	0xc5d26bf1
 800610c:	3ebbbd41 	.word	0x3ebbbd41
 8006110:	af25de2c 	.word	0xaf25de2c
 8006114:	3f11566a 	.word	0x3f11566a
 8006118:	16bebd93 	.word	0x16bebd93
 800611c:	3f66c16c 	.word	0x3f66c16c
 8006120:	5555553e 	.word	0x5555553e
 8006124:	3fc55555 	.word	0x3fc55555
 8006128:	3fe00000 	.word	0x3fe00000
 800612c:	fff00000 	.word	0xfff00000
 8006130:	3ff00000 	.word	0x3ff00000
 8006134:	4090cbff 	.word	0x4090cbff
 8006138:	3f6f3400 	.word	0x3f6f3400
 800613c:	652b82fe 	.word	0x652b82fe
 8006140:	3c971547 	.word	0x3c971547
 8006144:	00000000 	.word	0x00000000

08006148 <scalbn>:
 8006148:	b570      	push	{r4, r5, r6, lr}
 800614a:	ec55 4b10 	vmov	r4, r5, d0
 800614e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006152:	4606      	mov	r6, r0
 8006154:	462b      	mov	r3, r5
 8006156:	b999      	cbnz	r1, 8006180 <scalbn+0x38>
 8006158:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800615c:	4323      	orrs	r3, r4
 800615e:	d03f      	beq.n	80061e0 <scalbn+0x98>
 8006160:	4b35      	ldr	r3, [pc, #212]	; (8006238 <scalbn+0xf0>)
 8006162:	4629      	mov	r1, r5
 8006164:	ee10 0a10 	vmov	r0, s0
 8006168:	2200      	movs	r2, #0
 800616a:	f7fa fa45 	bl	80005f8 <__aeabi_dmul>
 800616e:	4b33      	ldr	r3, [pc, #204]	; (800623c <scalbn+0xf4>)
 8006170:	429e      	cmp	r6, r3
 8006172:	4604      	mov	r4, r0
 8006174:	460d      	mov	r5, r1
 8006176:	da10      	bge.n	800619a <scalbn+0x52>
 8006178:	a327      	add	r3, pc, #156	; (adr r3, 8006218 <scalbn+0xd0>)
 800617a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617e:	e01f      	b.n	80061c0 <scalbn+0x78>
 8006180:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006184:	4291      	cmp	r1, r2
 8006186:	d10c      	bne.n	80061a2 <scalbn+0x5a>
 8006188:	ee10 2a10 	vmov	r2, s0
 800618c:	4620      	mov	r0, r4
 800618e:	4629      	mov	r1, r5
 8006190:	f7fa f87c 	bl	800028c <__adddf3>
 8006194:	4604      	mov	r4, r0
 8006196:	460d      	mov	r5, r1
 8006198:	e022      	b.n	80061e0 <scalbn+0x98>
 800619a:	460b      	mov	r3, r1
 800619c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80061a0:	3936      	subs	r1, #54	; 0x36
 80061a2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80061a6:	4296      	cmp	r6, r2
 80061a8:	dd0d      	ble.n	80061c6 <scalbn+0x7e>
 80061aa:	2d00      	cmp	r5, #0
 80061ac:	a11c      	add	r1, pc, #112	; (adr r1, 8006220 <scalbn+0xd8>)
 80061ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061b2:	da02      	bge.n	80061ba <scalbn+0x72>
 80061b4:	a11c      	add	r1, pc, #112	; (adr r1, 8006228 <scalbn+0xe0>)
 80061b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061ba:	a319      	add	r3, pc, #100	; (adr r3, 8006220 <scalbn+0xd8>)
 80061bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c0:	f7fa fa1a 	bl	80005f8 <__aeabi_dmul>
 80061c4:	e7e6      	b.n	8006194 <scalbn+0x4c>
 80061c6:	1872      	adds	r2, r6, r1
 80061c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80061cc:	428a      	cmp	r2, r1
 80061ce:	dcec      	bgt.n	80061aa <scalbn+0x62>
 80061d0:	2a00      	cmp	r2, #0
 80061d2:	dd08      	ble.n	80061e6 <scalbn+0x9e>
 80061d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80061d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80061dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80061e0:	ec45 4b10 	vmov	d0, r4, r5
 80061e4:	bd70      	pop	{r4, r5, r6, pc}
 80061e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80061ea:	da08      	bge.n	80061fe <scalbn+0xb6>
 80061ec:	2d00      	cmp	r5, #0
 80061ee:	a10a      	add	r1, pc, #40	; (adr r1, 8006218 <scalbn+0xd0>)
 80061f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061f4:	dac0      	bge.n	8006178 <scalbn+0x30>
 80061f6:	a10e      	add	r1, pc, #56	; (adr r1, 8006230 <scalbn+0xe8>)
 80061f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061fc:	e7bc      	b.n	8006178 <scalbn+0x30>
 80061fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006202:	3236      	adds	r2, #54	; 0x36
 8006204:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006208:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800620c:	4620      	mov	r0, r4
 800620e:	4b0c      	ldr	r3, [pc, #48]	; (8006240 <scalbn+0xf8>)
 8006210:	2200      	movs	r2, #0
 8006212:	e7d5      	b.n	80061c0 <scalbn+0x78>
 8006214:	f3af 8000 	nop.w
 8006218:	c2f8f359 	.word	0xc2f8f359
 800621c:	01a56e1f 	.word	0x01a56e1f
 8006220:	8800759c 	.word	0x8800759c
 8006224:	7e37e43c 	.word	0x7e37e43c
 8006228:	8800759c 	.word	0x8800759c
 800622c:	fe37e43c 	.word	0xfe37e43c
 8006230:	c2f8f359 	.word	0xc2f8f359
 8006234:	81a56e1f 	.word	0x81a56e1f
 8006238:	43500000 	.word	0x43500000
 800623c:	ffff3cb0 	.word	0xffff3cb0
 8006240:	3c900000 	.word	0x3c900000

08006244 <with_errno>:
 8006244:	b570      	push	{r4, r5, r6, lr}
 8006246:	4604      	mov	r4, r0
 8006248:	460d      	mov	r5, r1
 800624a:	4616      	mov	r6, r2
 800624c:	f000 fc52 	bl	8006af4 <__errno>
 8006250:	4629      	mov	r1, r5
 8006252:	6006      	str	r6, [r0, #0]
 8006254:	4620      	mov	r0, r4
 8006256:	bd70      	pop	{r4, r5, r6, pc}

08006258 <xflow>:
 8006258:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800625a:	4614      	mov	r4, r2
 800625c:	461d      	mov	r5, r3
 800625e:	b108      	cbz	r0, 8006264 <xflow+0xc>
 8006260:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006264:	e9cd 2300 	strd	r2, r3, [sp]
 8006268:	e9dd 2300 	ldrd	r2, r3, [sp]
 800626c:	4620      	mov	r0, r4
 800626e:	4629      	mov	r1, r5
 8006270:	f7fa f9c2 	bl	80005f8 <__aeabi_dmul>
 8006274:	2222      	movs	r2, #34	; 0x22
 8006276:	b003      	add	sp, #12
 8006278:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800627c:	f7ff bfe2 	b.w	8006244 <with_errno>

08006280 <__math_uflow>:
 8006280:	b508      	push	{r3, lr}
 8006282:	2200      	movs	r2, #0
 8006284:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006288:	f7ff ffe6 	bl	8006258 <xflow>
 800628c:	ec41 0b10 	vmov	d0, r0, r1
 8006290:	bd08      	pop	{r3, pc}

08006292 <__math_oflow>:
 8006292:	b508      	push	{r3, lr}
 8006294:	2200      	movs	r2, #0
 8006296:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800629a:	f7ff ffdd 	bl	8006258 <xflow>
 800629e:	ec41 0b10 	vmov	d0, r0, r1
 80062a2:	bd08      	pop	{r3, pc}

080062a4 <rand>:
 80062a4:	4b16      	ldr	r3, [pc, #88]	; (8006300 <rand+0x5c>)
 80062a6:	b510      	push	{r4, lr}
 80062a8:	681c      	ldr	r4, [r3, #0]
 80062aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80062ac:	b9b3      	cbnz	r3, 80062dc <rand+0x38>
 80062ae:	2018      	movs	r0, #24
 80062b0:	f000 fcb8 	bl	8006c24 <malloc>
 80062b4:	4602      	mov	r2, r0
 80062b6:	6320      	str	r0, [r4, #48]	; 0x30
 80062b8:	b920      	cbnz	r0, 80062c4 <rand+0x20>
 80062ba:	4b12      	ldr	r3, [pc, #72]	; (8006304 <rand+0x60>)
 80062bc:	4812      	ldr	r0, [pc, #72]	; (8006308 <rand+0x64>)
 80062be:	2152      	movs	r1, #82	; 0x52
 80062c0:	f000 fc46 	bl	8006b50 <__assert_func>
 80062c4:	4911      	ldr	r1, [pc, #68]	; (800630c <rand+0x68>)
 80062c6:	4b12      	ldr	r3, [pc, #72]	; (8006310 <rand+0x6c>)
 80062c8:	e9c0 1300 	strd	r1, r3, [r0]
 80062cc:	4b11      	ldr	r3, [pc, #68]	; (8006314 <rand+0x70>)
 80062ce:	6083      	str	r3, [r0, #8]
 80062d0:	230b      	movs	r3, #11
 80062d2:	8183      	strh	r3, [r0, #12]
 80062d4:	2100      	movs	r1, #0
 80062d6:	2001      	movs	r0, #1
 80062d8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80062dc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80062de:	480e      	ldr	r0, [pc, #56]	; (8006318 <rand+0x74>)
 80062e0:	690b      	ldr	r3, [r1, #16]
 80062e2:	694c      	ldr	r4, [r1, #20]
 80062e4:	4a0d      	ldr	r2, [pc, #52]	; (800631c <rand+0x78>)
 80062e6:	4358      	muls	r0, r3
 80062e8:	fb02 0004 	mla	r0, r2, r4, r0
 80062ec:	fba3 3202 	umull	r3, r2, r3, r2
 80062f0:	3301      	adds	r3, #1
 80062f2:	eb40 0002 	adc.w	r0, r0, r2
 80062f6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80062fa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80062fe:	bd10      	pop	{r4, pc}
 8006300:	20000078 	.word	0x20000078
 8006304:	08007c50 	.word	0x08007c50
 8006308:	08007c67 	.word	0x08007c67
 800630c:	abcd330e 	.word	0xabcd330e
 8006310:	e66d1234 	.word	0xe66d1234
 8006314:	0005deec 	.word	0x0005deec
 8006318:	5851f42d 	.word	0x5851f42d
 800631c:	4c957f2d 	.word	0x4c957f2d

08006320 <std>:
 8006320:	2300      	movs	r3, #0
 8006322:	b510      	push	{r4, lr}
 8006324:	4604      	mov	r4, r0
 8006326:	e9c0 3300 	strd	r3, r3, [r0]
 800632a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800632e:	6083      	str	r3, [r0, #8]
 8006330:	8181      	strh	r1, [r0, #12]
 8006332:	6643      	str	r3, [r0, #100]	; 0x64
 8006334:	81c2      	strh	r2, [r0, #14]
 8006336:	6183      	str	r3, [r0, #24]
 8006338:	4619      	mov	r1, r3
 800633a:	2208      	movs	r2, #8
 800633c:	305c      	adds	r0, #92	; 0x5c
 800633e:	f000 f9a3 	bl	8006688 <memset>
 8006342:	4b0d      	ldr	r3, [pc, #52]	; (8006378 <std+0x58>)
 8006344:	6263      	str	r3, [r4, #36]	; 0x24
 8006346:	4b0d      	ldr	r3, [pc, #52]	; (800637c <std+0x5c>)
 8006348:	62a3      	str	r3, [r4, #40]	; 0x28
 800634a:	4b0d      	ldr	r3, [pc, #52]	; (8006380 <std+0x60>)
 800634c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800634e:	4b0d      	ldr	r3, [pc, #52]	; (8006384 <std+0x64>)
 8006350:	6323      	str	r3, [r4, #48]	; 0x30
 8006352:	4b0d      	ldr	r3, [pc, #52]	; (8006388 <std+0x68>)
 8006354:	6224      	str	r4, [r4, #32]
 8006356:	429c      	cmp	r4, r3
 8006358:	d006      	beq.n	8006368 <std+0x48>
 800635a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800635e:	4294      	cmp	r4, r2
 8006360:	d002      	beq.n	8006368 <std+0x48>
 8006362:	33d0      	adds	r3, #208	; 0xd0
 8006364:	429c      	cmp	r4, r3
 8006366:	d105      	bne.n	8006374 <std+0x54>
 8006368:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800636c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006370:	f000 bbea 	b.w	8006b48 <__retarget_lock_init_recursive>
 8006374:	bd10      	pop	{r4, pc}
 8006376:	bf00      	nop
 8006378:	080065c1 	.word	0x080065c1
 800637c:	080065e3 	.word	0x080065e3
 8006380:	0800661b 	.word	0x0800661b
 8006384:	0800663f 	.word	0x0800663f
 8006388:	20000174 	.word	0x20000174

0800638c <stdio_exit_handler>:
 800638c:	4a02      	ldr	r2, [pc, #8]	; (8006398 <stdio_exit_handler+0xc>)
 800638e:	4903      	ldr	r1, [pc, #12]	; (800639c <stdio_exit_handler+0x10>)
 8006390:	4803      	ldr	r0, [pc, #12]	; (80063a0 <stdio_exit_handler+0x14>)
 8006392:	f000 b869 	b.w	8006468 <_fwalk_sglue>
 8006396:	bf00      	nop
 8006398:	20000020 	.word	0x20000020
 800639c:	08007469 	.word	0x08007469
 80063a0:	2000002c 	.word	0x2000002c

080063a4 <cleanup_stdio>:
 80063a4:	6841      	ldr	r1, [r0, #4]
 80063a6:	4b0c      	ldr	r3, [pc, #48]	; (80063d8 <cleanup_stdio+0x34>)
 80063a8:	4299      	cmp	r1, r3
 80063aa:	b510      	push	{r4, lr}
 80063ac:	4604      	mov	r4, r0
 80063ae:	d001      	beq.n	80063b4 <cleanup_stdio+0x10>
 80063b0:	f001 f85a 	bl	8007468 <_fflush_r>
 80063b4:	68a1      	ldr	r1, [r4, #8]
 80063b6:	4b09      	ldr	r3, [pc, #36]	; (80063dc <cleanup_stdio+0x38>)
 80063b8:	4299      	cmp	r1, r3
 80063ba:	d002      	beq.n	80063c2 <cleanup_stdio+0x1e>
 80063bc:	4620      	mov	r0, r4
 80063be:	f001 f853 	bl	8007468 <_fflush_r>
 80063c2:	68e1      	ldr	r1, [r4, #12]
 80063c4:	4b06      	ldr	r3, [pc, #24]	; (80063e0 <cleanup_stdio+0x3c>)
 80063c6:	4299      	cmp	r1, r3
 80063c8:	d004      	beq.n	80063d4 <cleanup_stdio+0x30>
 80063ca:	4620      	mov	r0, r4
 80063cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063d0:	f001 b84a 	b.w	8007468 <_fflush_r>
 80063d4:	bd10      	pop	{r4, pc}
 80063d6:	bf00      	nop
 80063d8:	20000174 	.word	0x20000174
 80063dc:	200001dc 	.word	0x200001dc
 80063e0:	20000244 	.word	0x20000244

080063e4 <global_stdio_init.part.0>:
 80063e4:	b510      	push	{r4, lr}
 80063e6:	4b0b      	ldr	r3, [pc, #44]	; (8006414 <global_stdio_init.part.0+0x30>)
 80063e8:	4c0b      	ldr	r4, [pc, #44]	; (8006418 <global_stdio_init.part.0+0x34>)
 80063ea:	4a0c      	ldr	r2, [pc, #48]	; (800641c <global_stdio_init.part.0+0x38>)
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	4620      	mov	r0, r4
 80063f0:	2200      	movs	r2, #0
 80063f2:	2104      	movs	r1, #4
 80063f4:	f7ff ff94 	bl	8006320 <std>
 80063f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80063fc:	2201      	movs	r2, #1
 80063fe:	2109      	movs	r1, #9
 8006400:	f7ff ff8e 	bl	8006320 <std>
 8006404:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006408:	2202      	movs	r2, #2
 800640a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800640e:	2112      	movs	r1, #18
 8006410:	f7ff bf86 	b.w	8006320 <std>
 8006414:	200002ac 	.word	0x200002ac
 8006418:	20000174 	.word	0x20000174
 800641c:	0800638d 	.word	0x0800638d

08006420 <__sfp_lock_acquire>:
 8006420:	4801      	ldr	r0, [pc, #4]	; (8006428 <__sfp_lock_acquire+0x8>)
 8006422:	f000 bb92 	b.w	8006b4a <__retarget_lock_acquire_recursive>
 8006426:	bf00      	nop
 8006428:	200002b5 	.word	0x200002b5

0800642c <__sfp_lock_release>:
 800642c:	4801      	ldr	r0, [pc, #4]	; (8006434 <__sfp_lock_release+0x8>)
 800642e:	f000 bb8d 	b.w	8006b4c <__retarget_lock_release_recursive>
 8006432:	bf00      	nop
 8006434:	200002b5 	.word	0x200002b5

08006438 <__sinit>:
 8006438:	b510      	push	{r4, lr}
 800643a:	4604      	mov	r4, r0
 800643c:	f7ff fff0 	bl	8006420 <__sfp_lock_acquire>
 8006440:	6a23      	ldr	r3, [r4, #32]
 8006442:	b11b      	cbz	r3, 800644c <__sinit+0x14>
 8006444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006448:	f7ff bff0 	b.w	800642c <__sfp_lock_release>
 800644c:	4b04      	ldr	r3, [pc, #16]	; (8006460 <__sinit+0x28>)
 800644e:	6223      	str	r3, [r4, #32]
 8006450:	4b04      	ldr	r3, [pc, #16]	; (8006464 <__sinit+0x2c>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1f5      	bne.n	8006444 <__sinit+0xc>
 8006458:	f7ff ffc4 	bl	80063e4 <global_stdio_init.part.0>
 800645c:	e7f2      	b.n	8006444 <__sinit+0xc>
 800645e:	bf00      	nop
 8006460:	080063a5 	.word	0x080063a5
 8006464:	200002ac 	.word	0x200002ac

08006468 <_fwalk_sglue>:
 8006468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800646c:	4607      	mov	r7, r0
 800646e:	4688      	mov	r8, r1
 8006470:	4614      	mov	r4, r2
 8006472:	2600      	movs	r6, #0
 8006474:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006478:	f1b9 0901 	subs.w	r9, r9, #1
 800647c:	d505      	bpl.n	800648a <_fwalk_sglue+0x22>
 800647e:	6824      	ldr	r4, [r4, #0]
 8006480:	2c00      	cmp	r4, #0
 8006482:	d1f7      	bne.n	8006474 <_fwalk_sglue+0xc>
 8006484:	4630      	mov	r0, r6
 8006486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800648a:	89ab      	ldrh	r3, [r5, #12]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d907      	bls.n	80064a0 <_fwalk_sglue+0x38>
 8006490:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006494:	3301      	adds	r3, #1
 8006496:	d003      	beq.n	80064a0 <_fwalk_sglue+0x38>
 8006498:	4629      	mov	r1, r5
 800649a:	4638      	mov	r0, r7
 800649c:	47c0      	blx	r8
 800649e:	4306      	orrs	r6, r0
 80064a0:	3568      	adds	r5, #104	; 0x68
 80064a2:	e7e9      	b.n	8006478 <_fwalk_sglue+0x10>

080064a4 <_perror_r>:
 80064a4:	6a03      	ldr	r3, [r0, #32]
 80064a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064a8:	68c4      	ldr	r4, [r0, #12]
 80064aa:	4605      	mov	r5, r0
 80064ac:	460e      	mov	r6, r1
 80064ae:	b90b      	cbnz	r3, 80064b4 <_perror_r+0x10>
 80064b0:	f7ff ffc2 	bl	8006438 <__sinit>
 80064b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064b6:	07d8      	lsls	r0, r3, #31
 80064b8:	d405      	bmi.n	80064c6 <_perror_r+0x22>
 80064ba:	89a3      	ldrh	r3, [r4, #12]
 80064bc:	0599      	lsls	r1, r3, #22
 80064be:	d402      	bmi.n	80064c6 <_perror_r+0x22>
 80064c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064c2:	f000 fb42 	bl	8006b4a <__retarget_lock_acquire_recursive>
 80064c6:	4621      	mov	r1, r4
 80064c8:	4628      	mov	r0, r5
 80064ca:	f000 ffcd 	bl	8007468 <_fflush_r>
 80064ce:	bb1e      	cbnz	r6, 8006518 <_perror_r+0x74>
 80064d0:	6829      	ldr	r1, [r5, #0]
 80064d2:	ab01      	add	r3, sp, #4
 80064d4:	2201      	movs	r2, #1
 80064d6:	4628      	mov	r0, r5
 80064d8:	f000 f8de 	bl	8006698 <_strerror_r>
 80064dc:	4607      	mov	r7, r0
 80064de:	2800      	cmp	r0, #0
 80064e0:	d145      	bne.n	800656e <_perror_r+0xca>
 80064e2:	4831      	ldr	r0, [pc, #196]	; (80065a8 <_perror_r+0x104>)
 80064e4:	4f30      	ldr	r7, [pc, #192]	; (80065a8 <_perror_r+0x104>)
 80064e6:	f7f9 fe73 	bl	80001d0 <strlen>
 80064ea:	4606      	mov	r6, r0
 80064ec:	b156      	cbz	r6, 8006504 <_perror_r+0x60>
 80064ee:	4620      	mov	r0, r4
 80064f0:	f000 ffe2 	bl	80074b8 <fileno>
 80064f4:	4633      	mov	r3, r6
 80064f6:	4601      	mov	r1, r0
 80064f8:	463a      	mov	r2, r7
 80064fa:	4628      	mov	r0, r5
 80064fc:	f000 fae8 	bl	8006ad0 <_write_r>
 8006500:	2800      	cmp	r0, #0
 8006502:	da47      	bge.n	8006594 <_perror_r+0xf0>
 8006504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006508:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800650a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800650e:	07d2      	lsls	r2, r2, #31
 8006510:	81a3      	strh	r3, [r4, #12]
 8006512:	d542      	bpl.n	800659a <_perror_r+0xf6>
 8006514:	b003      	add	sp, #12
 8006516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006518:	7833      	ldrb	r3, [r6, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d0d8      	beq.n	80064d0 <_perror_r+0x2c>
 800651e:	4630      	mov	r0, r6
 8006520:	f7f9 fe56 	bl	80001d0 <strlen>
 8006524:	4607      	mov	r7, r0
 8006526:	b157      	cbz	r7, 800653e <_perror_r+0x9a>
 8006528:	4620      	mov	r0, r4
 800652a:	f000 ffc5 	bl	80074b8 <fileno>
 800652e:	463b      	mov	r3, r7
 8006530:	4601      	mov	r1, r0
 8006532:	4632      	mov	r2, r6
 8006534:	4628      	mov	r0, r5
 8006536:	f000 facb 	bl	8006ad0 <_write_r>
 800653a:	2800      	cmp	r0, #0
 800653c:	da14      	bge.n	8006568 <_perror_r+0xc4>
 800653e:	481b      	ldr	r0, [pc, #108]	; (80065ac <_perror_r+0x108>)
 8006540:	4f1a      	ldr	r7, [pc, #104]	; (80065ac <_perror_r+0x108>)
 8006542:	f7f9 fe45 	bl	80001d0 <strlen>
 8006546:	4606      	mov	r6, r0
 8006548:	2e00      	cmp	r6, #0
 800654a:	d0c1      	beq.n	80064d0 <_perror_r+0x2c>
 800654c:	4620      	mov	r0, r4
 800654e:	f000 ffb3 	bl	80074b8 <fileno>
 8006552:	4633      	mov	r3, r6
 8006554:	4601      	mov	r1, r0
 8006556:	463a      	mov	r2, r7
 8006558:	4628      	mov	r0, r5
 800655a:	f000 fab9 	bl	8006ad0 <_write_r>
 800655e:	2800      	cmp	r0, #0
 8006560:	dbb6      	blt.n	80064d0 <_perror_r+0x2c>
 8006562:	1a36      	subs	r6, r6, r0
 8006564:	4407      	add	r7, r0
 8006566:	e7ef      	b.n	8006548 <_perror_r+0xa4>
 8006568:	1a3f      	subs	r7, r7, r0
 800656a:	4406      	add	r6, r0
 800656c:	e7db      	b.n	8006526 <_perror_r+0x82>
 800656e:	f7f9 fe2f 	bl	80001d0 <strlen>
 8006572:	4606      	mov	r6, r0
 8006574:	2e00      	cmp	r6, #0
 8006576:	d0b4      	beq.n	80064e2 <_perror_r+0x3e>
 8006578:	4620      	mov	r0, r4
 800657a:	f000 ff9d 	bl	80074b8 <fileno>
 800657e:	4633      	mov	r3, r6
 8006580:	4601      	mov	r1, r0
 8006582:	463a      	mov	r2, r7
 8006584:	4628      	mov	r0, r5
 8006586:	f000 faa3 	bl	8006ad0 <_write_r>
 800658a:	2800      	cmp	r0, #0
 800658c:	dba9      	blt.n	80064e2 <_perror_r+0x3e>
 800658e:	1a36      	subs	r6, r6, r0
 8006590:	4407      	add	r7, r0
 8006592:	e7ef      	b.n	8006574 <_perror_r+0xd0>
 8006594:	1a36      	subs	r6, r6, r0
 8006596:	4407      	add	r7, r0
 8006598:	e7a8      	b.n	80064ec <_perror_r+0x48>
 800659a:	059b      	lsls	r3, r3, #22
 800659c:	d4ba      	bmi.n	8006514 <_perror_r+0x70>
 800659e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065a0:	f000 fad4 	bl	8006b4c <__retarget_lock_release_recursive>
 80065a4:	e7b6      	b.n	8006514 <_perror_r+0x70>
 80065a6:	bf00      	nop
 80065a8:	0800838f 	.word	0x0800838f
 80065ac:	0800835f 	.word	0x0800835f

080065b0 <perror>:
 80065b0:	4b02      	ldr	r3, [pc, #8]	; (80065bc <perror+0xc>)
 80065b2:	4601      	mov	r1, r0
 80065b4:	6818      	ldr	r0, [r3, #0]
 80065b6:	f7ff bf75 	b.w	80064a4 <_perror_r>
 80065ba:	bf00      	nop
 80065bc:	20000078 	.word	0x20000078

080065c0 <__sread>:
 80065c0:	b510      	push	{r4, lr}
 80065c2:	460c      	mov	r4, r1
 80065c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065c8:	f000 fa70 	bl	8006aac <_read_r>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	bfab      	itete	ge
 80065d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065d2:	89a3      	ldrhlt	r3, [r4, #12]
 80065d4:	181b      	addge	r3, r3, r0
 80065d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065da:	bfac      	ite	ge
 80065dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80065de:	81a3      	strhlt	r3, [r4, #12]
 80065e0:	bd10      	pop	{r4, pc}

080065e2 <__swrite>:
 80065e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e6:	461f      	mov	r7, r3
 80065e8:	898b      	ldrh	r3, [r1, #12]
 80065ea:	05db      	lsls	r3, r3, #23
 80065ec:	4605      	mov	r5, r0
 80065ee:	460c      	mov	r4, r1
 80065f0:	4616      	mov	r6, r2
 80065f2:	d505      	bpl.n	8006600 <__swrite+0x1e>
 80065f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065f8:	2302      	movs	r3, #2
 80065fa:	2200      	movs	r2, #0
 80065fc:	f000 fa44 	bl	8006a88 <_lseek_r>
 8006600:	89a3      	ldrh	r3, [r4, #12]
 8006602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006606:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800660a:	81a3      	strh	r3, [r4, #12]
 800660c:	4632      	mov	r2, r6
 800660e:	463b      	mov	r3, r7
 8006610:	4628      	mov	r0, r5
 8006612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006616:	f000 ba5b 	b.w	8006ad0 <_write_r>

0800661a <__sseek>:
 800661a:	b510      	push	{r4, lr}
 800661c:	460c      	mov	r4, r1
 800661e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006622:	f000 fa31 	bl	8006a88 <_lseek_r>
 8006626:	1c43      	adds	r3, r0, #1
 8006628:	89a3      	ldrh	r3, [r4, #12]
 800662a:	bf15      	itete	ne
 800662c:	6560      	strne	r0, [r4, #84]	; 0x54
 800662e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006632:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006636:	81a3      	strheq	r3, [r4, #12]
 8006638:	bf18      	it	ne
 800663a:	81a3      	strhne	r3, [r4, #12]
 800663c:	bd10      	pop	{r4, pc}

0800663e <__sclose>:
 800663e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006642:	f000 ba11 	b.w	8006a68 <_close_r>
	...

08006648 <_vsiprintf_r>:
 8006648:	b500      	push	{lr}
 800664a:	b09b      	sub	sp, #108	; 0x6c
 800664c:	9100      	str	r1, [sp, #0]
 800664e:	9104      	str	r1, [sp, #16]
 8006650:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006654:	9105      	str	r1, [sp, #20]
 8006656:	9102      	str	r1, [sp, #8]
 8006658:	4905      	ldr	r1, [pc, #20]	; (8006670 <_vsiprintf_r+0x28>)
 800665a:	9103      	str	r1, [sp, #12]
 800665c:	4669      	mov	r1, sp
 800665e:	f000 fbef 	bl	8006e40 <_svfiprintf_r>
 8006662:	9b00      	ldr	r3, [sp, #0]
 8006664:	2200      	movs	r2, #0
 8006666:	701a      	strb	r2, [r3, #0]
 8006668:	b01b      	add	sp, #108	; 0x6c
 800666a:	f85d fb04 	ldr.w	pc, [sp], #4
 800666e:	bf00      	nop
 8006670:	ffff0208 	.word	0xffff0208

08006674 <vsiprintf>:
 8006674:	4613      	mov	r3, r2
 8006676:	460a      	mov	r2, r1
 8006678:	4601      	mov	r1, r0
 800667a:	4802      	ldr	r0, [pc, #8]	; (8006684 <vsiprintf+0x10>)
 800667c:	6800      	ldr	r0, [r0, #0]
 800667e:	f7ff bfe3 	b.w	8006648 <_vsiprintf_r>
 8006682:	bf00      	nop
 8006684:	20000078 	.word	0x20000078

08006688 <memset>:
 8006688:	4402      	add	r2, r0
 800668a:	4603      	mov	r3, r0
 800668c:	4293      	cmp	r3, r2
 800668e:	d100      	bne.n	8006692 <memset+0xa>
 8006690:	4770      	bx	lr
 8006692:	f803 1b01 	strb.w	r1, [r3], #1
 8006696:	e7f9      	b.n	800668c <memset+0x4>

08006698 <_strerror_r>:
 8006698:	b510      	push	{r4, lr}
 800669a:	4604      	mov	r4, r0
 800669c:	4608      	mov	r0, r1
 800669e:	4611      	mov	r1, r2
 80066a0:	288e      	cmp	r0, #142	; 0x8e
 80066a2:	f200 8130 	bhi.w	8006906 <_strerror_r+0x26e>
 80066a6:	e8df f010 	tbh	[pc, r0, lsl #1]
 80066aa:	0139      	.short	0x0139
 80066ac:	0092008f 	.word	0x0092008f
 80066b0:	00960094 	.word	0x00960094
 80066b4:	009a0098 	.word	0x009a0098
 80066b8:	009e009c 	.word	0x009e009c
 80066bc:	00a400a2 	.word	0x00a400a2
 80066c0:	00aa00a8 	.word	0x00aa00a8
 80066c4:	00ae00ac 	.word	0x00ae00ac
 80066c8:	00b0012e 	.word	0x00b0012e
 80066cc:	00b400b2 	.word	0x00b400b2
 80066d0:	00b800b6 	.word	0x00b800b6
 80066d4:	00c000be 	.word	0x00c000be
 80066d8:	00c800c6 	.word	0x00c800c6
 80066dc:	00cc00ca 	.word	0x00cc00ca
 80066e0:	00d200ce 	.word	0x00d200ce
 80066e4:	00d800d6 	.word	0x00d800d6
 80066e8:	00dc00da 	.word	0x00dc00da
 80066ec:	00e000de 	.word	0x00e000de
 80066f0:	00e400e2 	.word	0x00e400e2
 80066f4:	012e012e 	.word	0x012e012e
 80066f8:	012e012e 	.word	0x012e012e
 80066fc:	012e012e 	.word	0x012e012e
 8006700:	012e012e 	.word	0x012e012e
 8006704:	00ec00e8 	.word	0x00ec00e8
 8006708:	012e012e 	.word	0x012e012e
 800670c:	012e012e 	.word	0x012e012e
 8006710:	012e012e 	.word	0x012e012e
 8006714:	012e012e 	.word	0x012e012e
 8006718:	012e012e 	.word	0x012e012e
 800671c:	012e012e 	.word	0x012e012e
 8006720:	00ee012e 	.word	0x00ee012e
 8006724:	00f00108 	.word	0x00f00108
 8006728:	012e00f2 	.word	0x012e00f2
 800672c:	012e012e 	.word	0x012e012e
 8006730:	012e00f4 	.word	0x012e00f4
 8006734:	012e012e 	.word	0x012e012e
 8006738:	012e00f6 	.word	0x012e00f6
 800673c:	00fa012e 	.word	0x00fa012e
 8006740:	012e012e 	.word	0x012e012e
 8006744:	012e00fc 	.word	0x012e00fc
 8006748:	012e012e 	.word	0x012e012e
 800674c:	012e012e 	.word	0x012e012e
 8006750:	012e012e 	.word	0x012e012e
 8006754:	012e012e 	.word	0x012e012e
 8006758:	00fe012e 	.word	0x00fe012e
 800675c:	0100012e 	.word	0x0100012e
 8006760:	01040102 	.word	0x01040102
 8006764:	012e012e 	.word	0x012e012e
 8006768:	012e0126 	.word	0x012e0126
 800676c:	012e012e 	.word	0x012e012e
 8006770:	012e012e 	.word	0x012e012e
 8006774:	012e012e 	.word	0x012e012e
 8006778:	0114012e 	.word	0x0114012e
 800677c:	010a0106 	.word	0x010a0106
 8006780:	010e010c 	.word	0x010e010c
 8006784:	012e0110 	.word	0x012e0110
 8006788:	01160112 	.word	0x01160112
 800678c:	00ea011a 	.word	0x00ea011a
 8006790:	012c00c2 	.word	0x012c00c2
 8006794:	00d000ba 	.word	0x00d000ba
 8006798:	00a000bc 	.word	0x00a000bc
 800679c:	012a00a6 	.word	0x012a00a6
 80067a0:	012e00f8 	.word	0x012e00f8
 80067a4:	00c40118 	.word	0x00c40118
 80067a8:	011c011e 	.word	0x011c011e
 80067ac:	012e012e 	.word	0x012e012e
 80067b0:	012e012e 	.word	0x012e012e
 80067b4:	00d4012e 	.word	0x00d4012e
 80067b8:	012e012e 	.word	0x012e012e
 80067bc:	00e6012e 	.word	0x00e6012e
 80067c0:	01200128 	.word	0x01200128
 80067c4:	01240122 	.word	0x01240122
 80067c8:	4b55      	ldr	r3, [pc, #340]	; (8006920 <_strerror_r+0x288>)
 80067ca:	4618      	mov	r0, r3
 80067cc:	bd10      	pop	{r4, pc}
 80067ce:	4b55      	ldr	r3, [pc, #340]	; (8006924 <_strerror_r+0x28c>)
 80067d0:	e7fb      	b.n	80067ca <_strerror_r+0x132>
 80067d2:	4b55      	ldr	r3, [pc, #340]	; (8006928 <_strerror_r+0x290>)
 80067d4:	e7f9      	b.n	80067ca <_strerror_r+0x132>
 80067d6:	4b55      	ldr	r3, [pc, #340]	; (800692c <_strerror_r+0x294>)
 80067d8:	e7f7      	b.n	80067ca <_strerror_r+0x132>
 80067da:	4b55      	ldr	r3, [pc, #340]	; (8006930 <_strerror_r+0x298>)
 80067dc:	e7f5      	b.n	80067ca <_strerror_r+0x132>
 80067de:	4b55      	ldr	r3, [pc, #340]	; (8006934 <_strerror_r+0x29c>)
 80067e0:	e7f3      	b.n	80067ca <_strerror_r+0x132>
 80067e2:	4b55      	ldr	r3, [pc, #340]	; (8006938 <_strerror_r+0x2a0>)
 80067e4:	e7f1      	b.n	80067ca <_strerror_r+0x132>
 80067e6:	4b55      	ldr	r3, [pc, #340]	; (800693c <_strerror_r+0x2a4>)
 80067e8:	e7ef      	b.n	80067ca <_strerror_r+0x132>
 80067ea:	4b55      	ldr	r3, [pc, #340]	; (8006940 <_strerror_r+0x2a8>)
 80067ec:	e7ed      	b.n	80067ca <_strerror_r+0x132>
 80067ee:	4b55      	ldr	r3, [pc, #340]	; (8006944 <_strerror_r+0x2ac>)
 80067f0:	e7eb      	b.n	80067ca <_strerror_r+0x132>
 80067f2:	4b55      	ldr	r3, [pc, #340]	; (8006948 <_strerror_r+0x2b0>)
 80067f4:	e7e9      	b.n	80067ca <_strerror_r+0x132>
 80067f6:	4b55      	ldr	r3, [pc, #340]	; (800694c <_strerror_r+0x2b4>)
 80067f8:	e7e7      	b.n	80067ca <_strerror_r+0x132>
 80067fa:	4b55      	ldr	r3, [pc, #340]	; (8006950 <_strerror_r+0x2b8>)
 80067fc:	e7e5      	b.n	80067ca <_strerror_r+0x132>
 80067fe:	4b55      	ldr	r3, [pc, #340]	; (8006954 <_strerror_r+0x2bc>)
 8006800:	e7e3      	b.n	80067ca <_strerror_r+0x132>
 8006802:	4b55      	ldr	r3, [pc, #340]	; (8006958 <_strerror_r+0x2c0>)
 8006804:	e7e1      	b.n	80067ca <_strerror_r+0x132>
 8006806:	4b55      	ldr	r3, [pc, #340]	; (800695c <_strerror_r+0x2c4>)
 8006808:	e7df      	b.n	80067ca <_strerror_r+0x132>
 800680a:	4b55      	ldr	r3, [pc, #340]	; (8006960 <_strerror_r+0x2c8>)
 800680c:	e7dd      	b.n	80067ca <_strerror_r+0x132>
 800680e:	4b55      	ldr	r3, [pc, #340]	; (8006964 <_strerror_r+0x2cc>)
 8006810:	e7db      	b.n	80067ca <_strerror_r+0x132>
 8006812:	4b55      	ldr	r3, [pc, #340]	; (8006968 <_strerror_r+0x2d0>)
 8006814:	e7d9      	b.n	80067ca <_strerror_r+0x132>
 8006816:	4b55      	ldr	r3, [pc, #340]	; (800696c <_strerror_r+0x2d4>)
 8006818:	e7d7      	b.n	80067ca <_strerror_r+0x132>
 800681a:	4b55      	ldr	r3, [pc, #340]	; (8006970 <_strerror_r+0x2d8>)
 800681c:	e7d5      	b.n	80067ca <_strerror_r+0x132>
 800681e:	4b55      	ldr	r3, [pc, #340]	; (8006974 <_strerror_r+0x2dc>)
 8006820:	e7d3      	b.n	80067ca <_strerror_r+0x132>
 8006822:	4b55      	ldr	r3, [pc, #340]	; (8006978 <_strerror_r+0x2e0>)
 8006824:	e7d1      	b.n	80067ca <_strerror_r+0x132>
 8006826:	4b55      	ldr	r3, [pc, #340]	; (800697c <_strerror_r+0x2e4>)
 8006828:	e7cf      	b.n	80067ca <_strerror_r+0x132>
 800682a:	4b55      	ldr	r3, [pc, #340]	; (8006980 <_strerror_r+0x2e8>)
 800682c:	e7cd      	b.n	80067ca <_strerror_r+0x132>
 800682e:	4b55      	ldr	r3, [pc, #340]	; (8006984 <_strerror_r+0x2ec>)
 8006830:	e7cb      	b.n	80067ca <_strerror_r+0x132>
 8006832:	4b55      	ldr	r3, [pc, #340]	; (8006988 <_strerror_r+0x2f0>)
 8006834:	e7c9      	b.n	80067ca <_strerror_r+0x132>
 8006836:	4b55      	ldr	r3, [pc, #340]	; (800698c <_strerror_r+0x2f4>)
 8006838:	e7c7      	b.n	80067ca <_strerror_r+0x132>
 800683a:	4b55      	ldr	r3, [pc, #340]	; (8006990 <_strerror_r+0x2f8>)
 800683c:	e7c5      	b.n	80067ca <_strerror_r+0x132>
 800683e:	4b55      	ldr	r3, [pc, #340]	; (8006994 <_strerror_r+0x2fc>)
 8006840:	e7c3      	b.n	80067ca <_strerror_r+0x132>
 8006842:	4b55      	ldr	r3, [pc, #340]	; (8006998 <_strerror_r+0x300>)
 8006844:	e7c1      	b.n	80067ca <_strerror_r+0x132>
 8006846:	4b55      	ldr	r3, [pc, #340]	; (800699c <_strerror_r+0x304>)
 8006848:	e7bf      	b.n	80067ca <_strerror_r+0x132>
 800684a:	4b55      	ldr	r3, [pc, #340]	; (80069a0 <_strerror_r+0x308>)
 800684c:	e7bd      	b.n	80067ca <_strerror_r+0x132>
 800684e:	4b55      	ldr	r3, [pc, #340]	; (80069a4 <_strerror_r+0x30c>)
 8006850:	e7bb      	b.n	80067ca <_strerror_r+0x132>
 8006852:	4b55      	ldr	r3, [pc, #340]	; (80069a8 <_strerror_r+0x310>)
 8006854:	e7b9      	b.n	80067ca <_strerror_r+0x132>
 8006856:	4b55      	ldr	r3, [pc, #340]	; (80069ac <_strerror_r+0x314>)
 8006858:	e7b7      	b.n	80067ca <_strerror_r+0x132>
 800685a:	4b55      	ldr	r3, [pc, #340]	; (80069b0 <_strerror_r+0x318>)
 800685c:	e7b5      	b.n	80067ca <_strerror_r+0x132>
 800685e:	4b55      	ldr	r3, [pc, #340]	; (80069b4 <_strerror_r+0x31c>)
 8006860:	e7b3      	b.n	80067ca <_strerror_r+0x132>
 8006862:	4b55      	ldr	r3, [pc, #340]	; (80069b8 <_strerror_r+0x320>)
 8006864:	e7b1      	b.n	80067ca <_strerror_r+0x132>
 8006866:	4b55      	ldr	r3, [pc, #340]	; (80069bc <_strerror_r+0x324>)
 8006868:	e7af      	b.n	80067ca <_strerror_r+0x132>
 800686a:	4b55      	ldr	r3, [pc, #340]	; (80069c0 <_strerror_r+0x328>)
 800686c:	e7ad      	b.n	80067ca <_strerror_r+0x132>
 800686e:	4b55      	ldr	r3, [pc, #340]	; (80069c4 <_strerror_r+0x32c>)
 8006870:	e7ab      	b.n	80067ca <_strerror_r+0x132>
 8006872:	4b55      	ldr	r3, [pc, #340]	; (80069c8 <_strerror_r+0x330>)
 8006874:	e7a9      	b.n	80067ca <_strerror_r+0x132>
 8006876:	4b55      	ldr	r3, [pc, #340]	; (80069cc <_strerror_r+0x334>)
 8006878:	e7a7      	b.n	80067ca <_strerror_r+0x132>
 800687a:	4b55      	ldr	r3, [pc, #340]	; (80069d0 <_strerror_r+0x338>)
 800687c:	e7a5      	b.n	80067ca <_strerror_r+0x132>
 800687e:	4b55      	ldr	r3, [pc, #340]	; (80069d4 <_strerror_r+0x33c>)
 8006880:	e7a3      	b.n	80067ca <_strerror_r+0x132>
 8006882:	4b55      	ldr	r3, [pc, #340]	; (80069d8 <_strerror_r+0x340>)
 8006884:	e7a1      	b.n	80067ca <_strerror_r+0x132>
 8006886:	4b55      	ldr	r3, [pc, #340]	; (80069dc <_strerror_r+0x344>)
 8006888:	e79f      	b.n	80067ca <_strerror_r+0x132>
 800688a:	4b55      	ldr	r3, [pc, #340]	; (80069e0 <_strerror_r+0x348>)
 800688c:	e79d      	b.n	80067ca <_strerror_r+0x132>
 800688e:	4b55      	ldr	r3, [pc, #340]	; (80069e4 <_strerror_r+0x34c>)
 8006890:	e79b      	b.n	80067ca <_strerror_r+0x132>
 8006892:	4b55      	ldr	r3, [pc, #340]	; (80069e8 <_strerror_r+0x350>)
 8006894:	e799      	b.n	80067ca <_strerror_r+0x132>
 8006896:	4b55      	ldr	r3, [pc, #340]	; (80069ec <_strerror_r+0x354>)
 8006898:	e797      	b.n	80067ca <_strerror_r+0x132>
 800689a:	4b55      	ldr	r3, [pc, #340]	; (80069f0 <_strerror_r+0x358>)
 800689c:	e795      	b.n	80067ca <_strerror_r+0x132>
 800689e:	4b55      	ldr	r3, [pc, #340]	; (80069f4 <_strerror_r+0x35c>)
 80068a0:	e793      	b.n	80067ca <_strerror_r+0x132>
 80068a2:	4b55      	ldr	r3, [pc, #340]	; (80069f8 <_strerror_r+0x360>)
 80068a4:	e791      	b.n	80067ca <_strerror_r+0x132>
 80068a6:	4b55      	ldr	r3, [pc, #340]	; (80069fc <_strerror_r+0x364>)
 80068a8:	e78f      	b.n	80067ca <_strerror_r+0x132>
 80068aa:	4b55      	ldr	r3, [pc, #340]	; (8006a00 <_strerror_r+0x368>)
 80068ac:	e78d      	b.n	80067ca <_strerror_r+0x132>
 80068ae:	4b55      	ldr	r3, [pc, #340]	; (8006a04 <_strerror_r+0x36c>)
 80068b0:	e78b      	b.n	80067ca <_strerror_r+0x132>
 80068b2:	4b55      	ldr	r3, [pc, #340]	; (8006a08 <_strerror_r+0x370>)
 80068b4:	e789      	b.n	80067ca <_strerror_r+0x132>
 80068b6:	4b55      	ldr	r3, [pc, #340]	; (8006a0c <_strerror_r+0x374>)
 80068b8:	e787      	b.n	80067ca <_strerror_r+0x132>
 80068ba:	4b55      	ldr	r3, [pc, #340]	; (8006a10 <_strerror_r+0x378>)
 80068bc:	e785      	b.n	80067ca <_strerror_r+0x132>
 80068be:	4b55      	ldr	r3, [pc, #340]	; (8006a14 <_strerror_r+0x37c>)
 80068c0:	e783      	b.n	80067ca <_strerror_r+0x132>
 80068c2:	4b55      	ldr	r3, [pc, #340]	; (8006a18 <_strerror_r+0x380>)
 80068c4:	e781      	b.n	80067ca <_strerror_r+0x132>
 80068c6:	4b55      	ldr	r3, [pc, #340]	; (8006a1c <_strerror_r+0x384>)
 80068c8:	e77f      	b.n	80067ca <_strerror_r+0x132>
 80068ca:	4b55      	ldr	r3, [pc, #340]	; (8006a20 <_strerror_r+0x388>)
 80068cc:	e77d      	b.n	80067ca <_strerror_r+0x132>
 80068ce:	4b55      	ldr	r3, [pc, #340]	; (8006a24 <_strerror_r+0x38c>)
 80068d0:	e77b      	b.n	80067ca <_strerror_r+0x132>
 80068d2:	4b55      	ldr	r3, [pc, #340]	; (8006a28 <_strerror_r+0x390>)
 80068d4:	e779      	b.n	80067ca <_strerror_r+0x132>
 80068d6:	4b55      	ldr	r3, [pc, #340]	; (8006a2c <_strerror_r+0x394>)
 80068d8:	e777      	b.n	80067ca <_strerror_r+0x132>
 80068da:	4b55      	ldr	r3, [pc, #340]	; (8006a30 <_strerror_r+0x398>)
 80068dc:	e775      	b.n	80067ca <_strerror_r+0x132>
 80068de:	4b55      	ldr	r3, [pc, #340]	; (8006a34 <_strerror_r+0x39c>)
 80068e0:	e773      	b.n	80067ca <_strerror_r+0x132>
 80068e2:	4b55      	ldr	r3, [pc, #340]	; (8006a38 <_strerror_r+0x3a0>)
 80068e4:	e771      	b.n	80067ca <_strerror_r+0x132>
 80068e6:	4b55      	ldr	r3, [pc, #340]	; (8006a3c <_strerror_r+0x3a4>)
 80068e8:	e76f      	b.n	80067ca <_strerror_r+0x132>
 80068ea:	4b55      	ldr	r3, [pc, #340]	; (8006a40 <_strerror_r+0x3a8>)
 80068ec:	e76d      	b.n	80067ca <_strerror_r+0x132>
 80068ee:	4b55      	ldr	r3, [pc, #340]	; (8006a44 <_strerror_r+0x3ac>)
 80068f0:	e76b      	b.n	80067ca <_strerror_r+0x132>
 80068f2:	4b55      	ldr	r3, [pc, #340]	; (8006a48 <_strerror_r+0x3b0>)
 80068f4:	e769      	b.n	80067ca <_strerror_r+0x132>
 80068f6:	4b55      	ldr	r3, [pc, #340]	; (8006a4c <_strerror_r+0x3b4>)
 80068f8:	e767      	b.n	80067ca <_strerror_r+0x132>
 80068fa:	4b55      	ldr	r3, [pc, #340]	; (8006a50 <_strerror_r+0x3b8>)
 80068fc:	e765      	b.n	80067ca <_strerror_r+0x132>
 80068fe:	4b55      	ldr	r3, [pc, #340]	; (8006a54 <_strerror_r+0x3bc>)
 8006900:	e763      	b.n	80067ca <_strerror_r+0x132>
 8006902:	4b55      	ldr	r3, [pc, #340]	; (8006a58 <_strerror_r+0x3c0>)
 8006904:	e761      	b.n	80067ca <_strerror_r+0x132>
 8006906:	2b00      	cmp	r3, #0
 8006908:	bf14      	ite	ne
 800690a:	461a      	movne	r2, r3
 800690c:	4622      	moveq	r2, r4
 800690e:	f000 f8a9 	bl	8006a64 <_user_strerror>
 8006912:	4b52      	ldr	r3, [pc, #328]	; (8006a5c <_strerror_r+0x3c4>)
 8006914:	2800      	cmp	r0, #0
 8006916:	bf18      	it	ne
 8006918:	4603      	movne	r3, r0
 800691a:	e756      	b.n	80067ca <_strerror_r+0x132>
 800691c:	4b50      	ldr	r3, [pc, #320]	; (8006a60 <_strerror_r+0x3c8>)
 800691e:	e754      	b.n	80067ca <_strerror_r+0x132>
 8006920:	08007cc7 	.word	0x08007cc7
 8006924:	08007cd1 	.word	0x08007cd1
 8006928:	08007ceb 	.word	0x08007ceb
 800692c:	08007cfb 	.word	0x08007cfb
 8006930:	08007d13 	.word	0x08007d13
 8006934:	08007d1d 	.word	0x08007d1d
 8006938:	08007d37 	.word	0x08007d37
 800693c:	08007d49 	.word	0x08007d49
 8006940:	08007d5b 	.word	0x08007d5b
 8006944:	08007d74 	.word	0x08007d74
 8006948:	08007d84 	.word	0x08007d84
 800694c:	08007d90 	.word	0x08007d90
 8006950:	08007dad 	.word	0x08007dad
 8006954:	08007dbf 	.word	0x08007dbf
 8006958:	08007dd0 	.word	0x08007dd0
 800695c:	08007de2 	.word	0x08007de2
 8006960:	08007dee 	.word	0x08007dee
 8006964:	08007e06 	.word	0x08007e06
 8006968:	08007e12 	.word	0x08007e12
 800696c:	08007e24 	.word	0x08007e24
 8006970:	08007e33 	.word	0x08007e33
 8006974:	08007e43 	.word	0x08007e43
 8006978:	08007e50 	.word	0x08007e50
 800697c:	08007e6f 	.word	0x08007e6f
 8006980:	08007e7e 	.word	0x08007e7e
 8006984:	08007e8f 	.word	0x08007e8f
 8006988:	08007eb3 	.word	0x08007eb3
 800698c:	08007ed1 	.word	0x08007ed1
 8006990:	08007eef 	.word	0x08007eef
 8006994:	08007f0f 	.word	0x08007f0f
 8006998:	08007f26 	.word	0x08007f26
 800699c:	08007f35 	.word	0x08007f35
 80069a0:	08007f44 	.word	0x08007f44
 80069a4:	08007f58 	.word	0x08007f58
 80069a8:	08007f70 	.word	0x08007f70
 80069ac:	08007f7e 	.word	0x08007f7e
 80069b0:	08007f8b 	.word	0x08007f8b
 80069b4:	08007fa1 	.word	0x08007fa1
 80069b8:	08007fb0 	.word	0x08007fb0
 80069bc:	08007fbc 	.word	0x08007fbc
 80069c0:	08007feb 	.word	0x08007feb
 80069c4:	08007ffc 	.word	0x08007ffc
 80069c8:	08008017 	.word	0x08008017
 80069cc:	0800802a 	.word	0x0800802a
 80069d0:	08008040 	.word	0x08008040
 80069d4:	08008049 	.word	0x08008049
 80069d8:	08008060 	.word	0x08008060
 80069dc:	08008068 	.word	0x08008068
 80069e0:	08008075 	.word	0x08008075
 80069e4:	0800808a 	.word	0x0800808a
 80069e8:	0800809e 	.word	0x0800809e
 80069ec:	080080b6 	.word	0x080080b6
 80069f0:	080080c5 	.word	0x080080c5
 80069f4:	080080d6 	.word	0x080080d6
 80069f8:	080080e9 	.word	0x080080e9
 80069fc:	080080f5 	.word	0x080080f5
 8006a00:	0800810e 	.word	0x0800810e
 8006a04:	08008122 	.word	0x08008122
 8006a08:	0800813d 	.word	0x0800813d
 8006a0c:	08008155 	.word	0x08008155
 8006a10:	0800816f 	.word	0x0800816f
 8006a14:	08008177 	.word	0x08008177
 8006a18:	080081a7 	.word	0x080081a7
 8006a1c:	080081c6 	.word	0x080081c6
 8006a20:	080081e5 	.word	0x080081e5
 8006a24:	080081fc 	.word	0x080081fc
 8006a28:	0800820f 	.word	0x0800820f
 8006a2c:	08008228 	.word	0x08008228
 8006a30:	0800823f 	.word	0x0800823f
 8006a34:	08008255 	.word	0x08008255
 8006a38:	08008276 	.word	0x08008276
 8006a3c:	0800828e 	.word	0x0800828e
 8006a40:	080082aa 	.word	0x080082aa
 8006a44:	080082bd 	.word	0x080082bd
 8006a48:	080082d3 	.word	0x080082d3
 8006a4c:	080082e7 	.word	0x080082e7
 8006a50:	08008309 	.word	0x08008309
 8006a54:	0800832f 	.word	0x0800832f
 8006a58:	08008340 	.word	0x08008340
 8006a5c:	08008390 	.word	0x08008390
 8006a60:	08007cbf 	.word	0x08007cbf

08006a64 <_user_strerror>:
 8006a64:	2000      	movs	r0, #0
 8006a66:	4770      	bx	lr

08006a68 <_close_r>:
 8006a68:	b538      	push	{r3, r4, r5, lr}
 8006a6a:	4d06      	ldr	r5, [pc, #24]	; (8006a84 <_close_r+0x1c>)
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	4604      	mov	r4, r0
 8006a70:	4608      	mov	r0, r1
 8006a72:	602b      	str	r3, [r5, #0]
 8006a74:	f7fa ffb9 	bl	80019ea <_close>
 8006a78:	1c43      	adds	r3, r0, #1
 8006a7a:	d102      	bne.n	8006a82 <_close_r+0x1a>
 8006a7c:	682b      	ldr	r3, [r5, #0]
 8006a7e:	b103      	cbz	r3, 8006a82 <_close_r+0x1a>
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	bd38      	pop	{r3, r4, r5, pc}
 8006a84:	200002b0 	.word	0x200002b0

08006a88 <_lseek_r>:
 8006a88:	b538      	push	{r3, r4, r5, lr}
 8006a8a:	4d07      	ldr	r5, [pc, #28]	; (8006aa8 <_lseek_r+0x20>)
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	4608      	mov	r0, r1
 8006a90:	4611      	mov	r1, r2
 8006a92:	2200      	movs	r2, #0
 8006a94:	602a      	str	r2, [r5, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	f7fa ffce 	bl	8001a38 <_lseek>
 8006a9c:	1c43      	adds	r3, r0, #1
 8006a9e:	d102      	bne.n	8006aa6 <_lseek_r+0x1e>
 8006aa0:	682b      	ldr	r3, [r5, #0]
 8006aa2:	b103      	cbz	r3, 8006aa6 <_lseek_r+0x1e>
 8006aa4:	6023      	str	r3, [r4, #0]
 8006aa6:	bd38      	pop	{r3, r4, r5, pc}
 8006aa8:	200002b0 	.word	0x200002b0

08006aac <_read_r>:
 8006aac:	b538      	push	{r3, r4, r5, lr}
 8006aae:	4d07      	ldr	r5, [pc, #28]	; (8006acc <_read_r+0x20>)
 8006ab0:	4604      	mov	r4, r0
 8006ab2:	4608      	mov	r0, r1
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	602a      	str	r2, [r5, #0]
 8006aba:	461a      	mov	r2, r3
 8006abc:	f7fa ff5c 	bl	8001978 <_read>
 8006ac0:	1c43      	adds	r3, r0, #1
 8006ac2:	d102      	bne.n	8006aca <_read_r+0x1e>
 8006ac4:	682b      	ldr	r3, [r5, #0]
 8006ac6:	b103      	cbz	r3, 8006aca <_read_r+0x1e>
 8006ac8:	6023      	str	r3, [r4, #0]
 8006aca:	bd38      	pop	{r3, r4, r5, pc}
 8006acc:	200002b0 	.word	0x200002b0

08006ad0 <_write_r>:
 8006ad0:	b538      	push	{r3, r4, r5, lr}
 8006ad2:	4d07      	ldr	r5, [pc, #28]	; (8006af0 <_write_r+0x20>)
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	4608      	mov	r0, r1
 8006ad8:	4611      	mov	r1, r2
 8006ada:	2200      	movs	r2, #0
 8006adc:	602a      	str	r2, [r5, #0]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	f7fa ff67 	bl	80019b2 <_write>
 8006ae4:	1c43      	adds	r3, r0, #1
 8006ae6:	d102      	bne.n	8006aee <_write_r+0x1e>
 8006ae8:	682b      	ldr	r3, [r5, #0]
 8006aea:	b103      	cbz	r3, 8006aee <_write_r+0x1e>
 8006aec:	6023      	str	r3, [r4, #0]
 8006aee:	bd38      	pop	{r3, r4, r5, pc}
 8006af0:	200002b0 	.word	0x200002b0

08006af4 <__errno>:
 8006af4:	4b01      	ldr	r3, [pc, #4]	; (8006afc <__errno+0x8>)
 8006af6:	6818      	ldr	r0, [r3, #0]
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	20000078 	.word	0x20000078

08006b00 <__libc_init_array>:
 8006b00:	b570      	push	{r4, r5, r6, lr}
 8006b02:	4d0d      	ldr	r5, [pc, #52]	; (8006b38 <__libc_init_array+0x38>)
 8006b04:	4c0d      	ldr	r4, [pc, #52]	; (8006b3c <__libc_init_array+0x3c>)
 8006b06:	1b64      	subs	r4, r4, r5
 8006b08:	10a4      	asrs	r4, r4, #2
 8006b0a:	2600      	movs	r6, #0
 8006b0c:	42a6      	cmp	r6, r4
 8006b0e:	d109      	bne.n	8006b24 <__libc_init_array+0x24>
 8006b10:	4d0b      	ldr	r5, [pc, #44]	; (8006b40 <__libc_init_array+0x40>)
 8006b12:	4c0c      	ldr	r4, [pc, #48]	; (8006b44 <__libc_init_array+0x44>)
 8006b14:	f001 f824 	bl	8007b60 <_init>
 8006b18:	1b64      	subs	r4, r4, r5
 8006b1a:	10a4      	asrs	r4, r4, #2
 8006b1c:	2600      	movs	r6, #0
 8006b1e:	42a6      	cmp	r6, r4
 8006b20:	d105      	bne.n	8006b2e <__libc_init_array+0x2e>
 8006b22:	bd70      	pop	{r4, r5, r6, pc}
 8006b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b28:	4798      	blx	r3
 8006b2a:	3601      	adds	r6, #1
 8006b2c:	e7ee      	b.n	8006b0c <__libc_init_array+0xc>
 8006b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b32:	4798      	blx	r3
 8006b34:	3601      	adds	r6, #1
 8006b36:	e7f2      	b.n	8006b1e <__libc_init_array+0x1e>
 8006b38:	080083cc 	.word	0x080083cc
 8006b3c:	080083cc 	.word	0x080083cc
 8006b40:	080083cc 	.word	0x080083cc
 8006b44:	080083d0 	.word	0x080083d0

08006b48 <__retarget_lock_init_recursive>:
 8006b48:	4770      	bx	lr

08006b4a <__retarget_lock_acquire_recursive>:
 8006b4a:	4770      	bx	lr

08006b4c <__retarget_lock_release_recursive>:
 8006b4c:	4770      	bx	lr
	...

08006b50 <__assert_func>:
 8006b50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b52:	4614      	mov	r4, r2
 8006b54:	461a      	mov	r2, r3
 8006b56:	4b09      	ldr	r3, [pc, #36]	; (8006b7c <__assert_func+0x2c>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4605      	mov	r5, r0
 8006b5c:	68d8      	ldr	r0, [r3, #12]
 8006b5e:	b14c      	cbz	r4, 8006b74 <__assert_func+0x24>
 8006b60:	4b07      	ldr	r3, [pc, #28]	; (8006b80 <__assert_func+0x30>)
 8006b62:	9100      	str	r1, [sp, #0]
 8006b64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b68:	4906      	ldr	r1, [pc, #24]	; (8006b84 <__assert_func+0x34>)
 8006b6a:	462b      	mov	r3, r5
 8006b6c:	f000 fcce 	bl	800750c <fiprintf>
 8006b70:	f000 fd16 	bl	80075a0 <abort>
 8006b74:	4b04      	ldr	r3, [pc, #16]	; (8006b88 <__assert_func+0x38>)
 8006b76:	461c      	mov	r4, r3
 8006b78:	e7f3      	b.n	8006b62 <__assert_func+0x12>
 8006b7a:	bf00      	nop
 8006b7c:	20000078 	.word	0x20000078
 8006b80:	08008355 	.word	0x08008355
 8006b84:	08008362 	.word	0x08008362
 8006b88:	08008390 	.word	0x08008390

08006b8c <_free_r>:
 8006b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b8e:	2900      	cmp	r1, #0
 8006b90:	d044      	beq.n	8006c1c <_free_r+0x90>
 8006b92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b96:	9001      	str	r0, [sp, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f1a1 0404 	sub.w	r4, r1, #4
 8006b9e:	bfb8      	it	lt
 8006ba0:	18e4      	addlt	r4, r4, r3
 8006ba2:	f000 f8e7 	bl	8006d74 <__malloc_lock>
 8006ba6:	4a1e      	ldr	r2, [pc, #120]	; (8006c20 <_free_r+0x94>)
 8006ba8:	9801      	ldr	r0, [sp, #4]
 8006baa:	6813      	ldr	r3, [r2, #0]
 8006bac:	b933      	cbnz	r3, 8006bbc <_free_r+0x30>
 8006bae:	6063      	str	r3, [r4, #4]
 8006bb0:	6014      	str	r4, [r2, #0]
 8006bb2:	b003      	add	sp, #12
 8006bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bb8:	f000 b8e2 	b.w	8006d80 <__malloc_unlock>
 8006bbc:	42a3      	cmp	r3, r4
 8006bbe:	d908      	bls.n	8006bd2 <_free_r+0x46>
 8006bc0:	6825      	ldr	r5, [r4, #0]
 8006bc2:	1961      	adds	r1, r4, r5
 8006bc4:	428b      	cmp	r3, r1
 8006bc6:	bf01      	itttt	eq
 8006bc8:	6819      	ldreq	r1, [r3, #0]
 8006bca:	685b      	ldreq	r3, [r3, #4]
 8006bcc:	1949      	addeq	r1, r1, r5
 8006bce:	6021      	streq	r1, [r4, #0]
 8006bd0:	e7ed      	b.n	8006bae <_free_r+0x22>
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	b10b      	cbz	r3, 8006bdc <_free_r+0x50>
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	d9fa      	bls.n	8006bd2 <_free_r+0x46>
 8006bdc:	6811      	ldr	r1, [r2, #0]
 8006bde:	1855      	adds	r5, r2, r1
 8006be0:	42a5      	cmp	r5, r4
 8006be2:	d10b      	bne.n	8006bfc <_free_r+0x70>
 8006be4:	6824      	ldr	r4, [r4, #0]
 8006be6:	4421      	add	r1, r4
 8006be8:	1854      	adds	r4, r2, r1
 8006bea:	42a3      	cmp	r3, r4
 8006bec:	6011      	str	r1, [r2, #0]
 8006bee:	d1e0      	bne.n	8006bb2 <_free_r+0x26>
 8006bf0:	681c      	ldr	r4, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	6053      	str	r3, [r2, #4]
 8006bf6:	440c      	add	r4, r1
 8006bf8:	6014      	str	r4, [r2, #0]
 8006bfa:	e7da      	b.n	8006bb2 <_free_r+0x26>
 8006bfc:	d902      	bls.n	8006c04 <_free_r+0x78>
 8006bfe:	230c      	movs	r3, #12
 8006c00:	6003      	str	r3, [r0, #0]
 8006c02:	e7d6      	b.n	8006bb2 <_free_r+0x26>
 8006c04:	6825      	ldr	r5, [r4, #0]
 8006c06:	1961      	adds	r1, r4, r5
 8006c08:	428b      	cmp	r3, r1
 8006c0a:	bf04      	itt	eq
 8006c0c:	6819      	ldreq	r1, [r3, #0]
 8006c0e:	685b      	ldreq	r3, [r3, #4]
 8006c10:	6063      	str	r3, [r4, #4]
 8006c12:	bf04      	itt	eq
 8006c14:	1949      	addeq	r1, r1, r5
 8006c16:	6021      	streq	r1, [r4, #0]
 8006c18:	6054      	str	r4, [r2, #4]
 8006c1a:	e7ca      	b.n	8006bb2 <_free_r+0x26>
 8006c1c:	b003      	add	sp, #12
 8006c1e:	bd30      	pop	{r4, r5, pc}
 8006c20:	200002b8 	.word	0x200002b8

08006c24 <malloc>:
 8006c24:	4b02      	ldr	r3, [pc, #8]	; (8006c30 <malloc+0xc>)
 8006c26:	4601      	mov	r1, r0
 8006c28:	6818      	ldr	r0, [r3, #0]
 8006c2a:	f000 b823 	b.w	8006c74 <_malloc_r>
 8006c2e:	bf00      	nop
 8006c30:	20000078 	.word	0x20000078

08006c34 <sbrk_aligned>:
 8006c34:	b570      	push	{r4, r5, r6, lr}
 8006c36:	4e0e      	ldr	r6, [pc, #56]	; (8006c70 <sbrk_aligned+0x3c>)
 8006c38:	460c      	mov	r4, r1
 8006c3a:	6831      	ldr	r1, [r6, #0]
 8006c3c:	4605      	mov	r5, r0
 8006c3e:	b911      	cbnz	r1, 8006c46 <sbrk_aligned+0x12>
 8006c40:	f000 fc90 	bl	8007564 <_sbrk_r>
 8006c44:	6030      	str	r0, [r6, #0]
 8006c46:	4621      	mov	r1, r4
 8006c48:	4628      	mov	r0, r5
 8006c4a:	f000 fc8b 	bl	8007564 <_sbrk_r>
 8006c4e:	1c43      	adds	r3, r0, #1
 8006c50:	d00a      	beq.n	8006c68 <sbrk_aligned+0x34>
 8006c52:	1cc4      	adds	r4, r0, #3
 8006c54:	f024 0403 	bic.w	r4, r4, #3
 8006c58:	42a0      	cmp	r0, r4
 8006c5a:	d007      	beq.n	8006c6c <sbrk_aligned+0x38>
 8006c5c:	1a21      	subs	r1, r4, r0
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f000 fc80 	bl	8007564 <_sbrk_r>
 8006c64:	3001      	adds	r0, #1
 8006c66:	d101      	bne.n	8006c6c <sbrk_aligned+0x38>
 8006c68:	f04f 34ff 	mov.w	r4, #4294967295
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	bd70      	pop	{r4, r5, r6, pc}
 8006c70:	200002bc 	.word	0x200002bc

08006c74 <_malloc_r>:
 8006c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c78:	1ccd      	adds	r5, r1, #3
 8006c7a:	f025 0503 	bic.w	r5, r5, #3
 8006c7e:	3508      	adds	r5, #8
 8006c80:	2d0c      	cmp	r5, #12
 8006c82:	bf38      	it	cc
 8006c84:	250c      	movcc	r5, #12
 8006c86:	2d00      	cmp	r5, #0
 8006c88:	4607      	mov	r7, r0
 8006c8a:	db01      	blt.n	8006c90 <_malloc_r+0x1c>
 8006c8c:	42a9      	cmp	r1, r5
 8006c8e:	d905      	bls.n	8006c9c <_malloc_r+0x28>
 8006c90:	230c      	movs	r3, #12
 8006c92:	603b      	str	r3, [r7, #0]
 8006c94:	2600      	movs	r6, #0
 8006c96:	4630      	mov	r0, r6
 8006c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d70 <_malloc_r+0xfc>
 8006ca0:	f000 f868 	bl	8006d74 <__malloc_lock>
 8006ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ca8:	461c      	mov	r4, r3
 8006caa:	bb5c      	cbnz	r4, 8006d04 <_malloc_r+0x90>
 8006cac:	4629      	mov	r1, r5
 8006cae:	4638      	mov	r0, r7
 8006cb0:	f7ff ffc0 	bl	8006c34 <sbrk_aligned>
 8006cb4:	1c43      	adds	r3, r0, #1
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	d155      	bne.n	8006d66 <_malloc_r+0xf2>
 8006cba:	f8d8 4000 	ldr.w	r4, [r8]
 8006cbe:	4626      	mov	r6, r4
 8006cc0:	2e00      	cmp	r6, #0
 8006cc2:	d145      	bne.n	8006d50 <_malloc_r+0xdc>
 8006cc4:	2c00      	cmp	r4, #0
 8006cc6:	d048      	beq.n	8006d5a <_malloc_r+0xe6>
 8006cc8:	6823      	ldr	r3, [r4, #0]
 8006cca:	4631      	mov	r1, r6
 8006ccc:	4638      	mov	r0, r7
 8006cce:	eb04 0903 	add.w	r9, r4, r3
 8006cd2:	f000 fc47 	bl	8007564 <_sbrk_r>
 8006cd6:	4581      	cmp	r9, r0
 8006cd8:	d13f      	bne.n	8006d5a <_malloc_r+0xe6>
 8006cda:	6821      	ldr	r1, [r4, #0]
 8006cdc:	1a6d      	subs	r5, r5, r1
 8006cde:	4629      	mov	r1, r5
 8006ce0:	4638      	mov	r0, r7
 8006ce2:	f7ff ffa7 	bl	8006c34 <sbrk_aligned>
 8006ce6:	3001      	adds	r0, #1
 8006ce8:	d037      	beq.n	8006d5a <_malloc_r+0xe6>
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	442b      	add	r3, r5
 8006cee:	6023      	str	r3, [r4, #0]
 8006cf0:	f8d8 3000 	ldr.w	r3, [r8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d038      	beq.n	8006d6a <_malloc_r+0xf6>
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	42a2      	cmp	r2, r4
 8006cfc:	d12b      	bne.n	8006d56 <_malloc_r+0xe2>
 8006cfe:	2200      	movs	r2, #0
 8006d00:	605a      	str	r2, [r3, #4]
 8006d02:	e00f      	b.n	8006d24 <_malloc_r+0xb0>
 8006d04:	6822      	ldr	r2, [r4, #0]
 8006d06:	1b52      	subs	r2, r2, r5
 8006d08:	d41f      	bmi.n	8006d4a <_malloc_r+0xd6>
 8006d0a:	2a0b      	cmp	r2, #11
 8006d0c:	d917      	bls.n	8006d3e <_malloc_r+0xca>
 8006d0e:	1961      	adds	r1, r4, r5
 8006d10:	42a3      	cmp	r3, r4
 8006d12:	6025      	str	r5, [r4, #0]
 8006d14:	bf18      	it	ne
 8006d16:	6059      	strne	r1, [r3, #4]
 8006d18:	6863      	ldr	r3, [r4, #4]
 8006d1a:	bf08      	it	eq
 8006d1c:	f8c8 1000 	streq.w	r1, [r8]
 8006d20:	5162      	str	r2, [r4, r5]
 8006d22:	604b      	str	r3, [r1, #4]
 8006d24:	4638      	mov	r0, r7
 8006d26:	f104 060b 	add.w	r6, r4, #11
 8006d2a:	f000 f829 	bl	8006d80 <__malloc_unlock>
 8006d2e:	f026 0607 	bic.w	r6, r6, #7
 8006d32:	1d23      	adds	r3, r4, #4
 8006d34:	1af2      	subs	r2, r6, r3
 8006d36:	d0ae      	beq.n	8006c96 <_malloc_r+0x22>
 8006d38:	1b9b      	subs	r3, r3, r6
 8006d3a:	50a3      	str	r3, [r4, r2]
 8006d3c:	e7ab      	b.n	8006c96 <_malloc_r+0x22>
 8006d3e:	42a3      	cmp	r3, r4
 8006d40:	6862      	ldr	r2, [r4, #4]
 8006d42:	d1dd      	bne.n	8006d00 <_malloc_r+0x8c>
 8006d44:	f8c8 2000 	str.w	r2, [r8]
 8006d48:	e7ec      	b.n	8006d24 <_malloc_r+0xb0>
 8006d4a:	4623      	mov	r3, r4
 8006d4c:	6864      	ldr	r4, [r4, #4]
 8006d4e:	e7ac      	b.n	8006caa <_malloc_r+0x36>
 8006d50:	4634      	mov	r4, r6
 8006d52:	6876      	ldr	r6, [r6, #4]
 8006d54:	e7b4      	b.n	8006cc0 <_malloc_r+0x4c>
 8006d56:	4613      	mov	r3, r2
 8006d58:	e7cc      	b.n	8006cf4 <_malloc_r+0x80>
 8006d5a:	230c      	movs	r3, #12
 8006d5c:	603b      	str	r3, [r7, #0]
 8006d5e:	4638      	mov	r0, r7
 8006d60:	f000 f80e 	bl	8006d80 <__malloc_unlock>
 8006d64:	e797      	b.n	8006c96 <_malloc_r+0x22>
 8006d66:	6025      	str	r5, [r4, #0]
 8006d68:	e7dc      	b.n	8006d24 <_malloc_r+0xb0>
 8006d6a:	605b      	str	r3, [r3, #4]
 8006d6c:	deff      	udf	#255	; 0xff
 8006d6e:	bf00      	nop
 8006d70:	200002b8 	.word	0x200002b8

08006d74 <__malloc_lock>:
 8006d74:	4801      	ldr	r0, [pc, #4]	; (8006d7c <__malloc_lock+0x8>)
 8006d76:	f7ff bee8 	b.w	8006b4a <__retarget_lock_acquire_recursive>
 8006d7a:	bf00      	nop
 8006d7c:	200002b4 	.word	0x200002b4

08006d80 <__malloc_unlock>:
 8006d80:	4801      	ldr	r0, [pc, #4]	; (8006d88 <__malloc_unlock+0x8>)
 8006d82:	f7ff bee3 	b.w	8006b4c <__retarget_lock_release_recursive>
 8006d86:	bf00      	nop
 8006d88:	200002b4 	.word	0x200002b4

08006d8c <__ssputs_r>:
 8006d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d90:	688e      	ldr	r6, [r1, #8]
 8006d92:	461f      	mov	r7, r3
 8006d94:	42be      	cmp	r6, r7
 8006d96:	680b      	ldr	r3, [r1, #0]
 8006d98:	4682      	mov	sl, r0
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	4690      	mov	r8, r2
 8006d9e:	d82c      	bhi.n	8006dfa <__ssputs_r+0x6e>
 8006da0:	898a      	ldrh	r2, [r1, #12]
 8006da2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006da6:	d026      	beq.n	8006df6 <__ssputs_r+0x6a>
 8006da8:	6965      	ldr	r5, [r4, #20]
 8006daa:	6909      	ldr	r1, [r1, #16]
 8006dac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006db0:	eba3 0901 	sub.w	r9, r3, r1
 8006db4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006db8:	1c7b      	adds	r3, r7, #1
 8006dba:	444b      	add	r3, r9
 8006dbc:	106d      	asrs	r5, r5, #1
 8006dbe:	429d      	cmp	r5, r3
 8006dc0:	bf38      	it	cc
 8006dc2:	461d      	movcc	r5, r3
 8006dc4:	0553      	lsls	r3, r2, #21
 8006dc6:	d527      	bpl.n	8006e18 <__ssputs_r+0x8c>
 8006dc8:	4629      	mov	r1, r5
 8006dca:	f7ff ff53 	bl	8006c74 <_malloc_r>
 8006dce:	4606      	mov	r6, r0
 8006dd0:	b360      	cbz	r0, 8006e2c <__ssputs_r+0xa0>
 8006dd2:	6921      	ldr	r1, [r4, #16]
 8006dd4:	464a      	mov	r2, r9
 8006dd6:	f000 fbd5 	bl	8007584 <memcpy>
 8006dda:	89a3      	ldrh	r3, [r4, #12]
 8006ddc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006de4:	81a3      	strh	r3, [r4, #12]
 8006de6:	6126      	str	r6, [r4, #16]
 8006de8:	6165      	str	r5, [r4, #20]
 8006dea:	444e      	add	r6, r9
 8006dec:	eba5 0509 	sub.w	r5, r5, r9
 8006df0:	6026      	str	r6, [r4, #0]
 8006df2:	60a5      	str	r5, [r4, #8]
 8006df4:	463e      	mov	r6, r7
 8006df6:	42be      	cmp	r6, r7
 8006df8:	d900      	bls.n	8006dfc <__ssputs_r+0x70>
 8006dfa:	463e      	mov	r6, r7
 8006dfc:	6820      	ldr	r0, [r4, #0]
 8006dfe:	4632      	mov	r2, r6
 8006e00:	4641      	mov	r1, r8
 8006e02:	f000 fb95 	bl	8007530 <memmove>
 8006e06:	68a3      	ldr	r3, [r4, #8]
 8006e08:	1b9b      	subs	r3, r3, r6
 8006e0a:	60a3      	str	r3, [r4, #8]
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	4433      	add	r3, r6
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	2000      	movs	r0, #0
 8006e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e18:	462a      	mov	r2, r5
 8006e1a:	f000 fbc8 	bl	80075ae <_realloc_r>
 8006e1e:	4606      	mov	r6, r0
 8006e20:	2800      	cmp	r0, #0
 8006e22:	d1e0      	bne.n	8006de6 <__ssputs_r+0x5a>
 8006e24:	6921      	ldr	r1, [r4, #16]
 8006e26:	4650      	mov	r0, sl
 8006e28:	f7ff feb0 	bl	8006b8c <_free_r>
 8006e2c:	230c      	movs	r3, #12
 8006e2e:	f8ca 3000 	str.w	r3, [sl]
 8006e32:	89a3      	ldrh	r3, [r4, #12]
 8006e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e38:	81a3      	strh	r3, [r4, #12]
 8006e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e3e:	e7e9      	b.n	8006e14 <__ssputs_r+0x88>

08006e40 <_svfiprintf_r>:
 8006e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e44:	4698      	mov	r8, r3
 8006e46:	898b      	ldrh	r3, [r1, #12]
 8006e48:	061b      	lsls	r3, r3, #24
 8006e4a:	b09d      	sub	sp, #116	; 0x74
 8006e4c:	4607      	mov	r7, r0
 8006e4e:	460d      	mov	r5, r1
 8006e50:	4614      	mov	r4, r2
 8006e52:	d50e      	bpl.n	8006e72 <_svfiprintf_r+0x32>
 8006e54:	690b      	ldr	r3, [r1, #16]
 8006e56:	b963      	cbnz	r3, 8006e72 <_svfiprintf_r+0x32>
 8006e58:	2140      	movs	r1, #64	; 0x40
 8006e5a:	f7ff ff0b 	bl	8006c74 <_malloc_r>
 8006e5e:	6028      	str	r0, [r5, #0]
 8006e60:	6128      	str	r0, [r5, #16]
 8006e62:	b920      	cbnz	r0, 8006e6e <_svfiprintf_r+0x2e>
 8006e64:	230c      	movs	r3, #12
 8006e66:	603b      	str	r3, [r7, #0]
 8006e68:	f04f 30ff 	mov.w	r0, #4294967295
 8006e6c:	e0d0      	b.n	8007010 <_svfiprintf_r+0x1d0>
 8006e6e:	2340      	movs	r3, #64	; 0x40
 8006e70:	616b      	str	r3, [r5, #20]
 8006e72:	2300      	movs	r3, #0
 8006e74:	9309      	str	r3, [sp, #36]	; 0x24
 8006e76:	2320      	movs	r3, #32
 8006e78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e80:	2330      	movs	r3, #48	; 0x30
 8006e82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007028 <_svfiprintf_r+0x1e8>
 8006e86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e8a:	f04f 0901 	mov.w	r9, #1
 8006e8e:	4623      	mov	r3, r4
 8006e90:	469a      	mov	sl, r3
 8006e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e96:	b10a      	cbz	r2, 8006e9c <_svfiprintf_r+0x5c>
 8006e98:	2a25      	cmp	r2, #37	; 0x25
 8006e9a:	d1f9      	bne.n	8006e90 <_svfiprintf_r+0x50>
 8006e9c:	ebba 0b04 	subs.w	fp, sl, r4
 8006ea0:	d00b      	beq.n	8006eba <_svfiprintf_r+0x7a>
 8006ea2:	465b      	mov	r3, fp
 8006ea4:	4622      	mov	r2, r4
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	4638      	mov	r0, r7
 8006eaa:	f7ff ff6f 	bl	8006d8c <__ssputs_r>
 8006eae:	3001      	adds	r0, #1
 8006eb0:	f000 80a9 	beq.w	8007006 <_svfiprintf_r+0x1c6>
 8006eb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eb6:	445a      	add	r2, fp
 8006eb8:	9209      	str	r2, [sp, #36]	; 0x24
 8006eba:	f89a 3000 	ldrb.w	r3, [sl]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f000 80a1 	beq.w	8007006 <_svfiprintf_r+0x1c6>
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ece:	f10a 0a01 	add.w	sl, sl, #1
 8006ed2:	9304      	str	r3, [sp, #16]
 8006ed4:	9307      	str	r3, [sp, #28]
 8006ed6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006eda:	931a      	str	r3, [sp, #104]	; 0x68
 8006edc:	4654      	mov	r4, sl
 8006ede:	2205      	movs	r2, #5
 8006ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ee4:	4850      	ldr	r0, [pc, #320]	; (8007028 <_svfiprintf_r+0x1e8>)
 8006ee6:	f7f9 f97b 	bl	80001e0 <memchr>
 8006eea:	9a04      	ldr	r2, [sp, #16]
 8006eec:	b9d8      	cbnz	r0, 8006f26 <_svfiprintf_r+0xe6>
 8006eee:	06d0      	lsls	r0, r2, #27
 8006ef0:	bf44      	itt	mi
 8006ef2:	2320      	movmi	r3, #32
 8006ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ef8:	0711      	lsls	r1, r2, #28
 8006efa:	bf44      	itt	mi
 8006efc:	232b      	movmi	r3, #43	; 0x2b
 8006efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f02:	f89a 3000 	ldrb.w	r3, [sl]
 8006f06:	2b2a      	cmp	r3, #42	; 0x2a
 8006f08:	d015      	beq.n	8006f36 <_svfiprintf_r+0xf6>
 8006f0a:	9a07      	ldr	r2, [sp, #28]
 8006f0c:	4654      	mov	r4, sl
 8006f0e:	2000      	movs	r0, #0
 8006f10:	f04f 0c0a 	mov.w	ip, #10
 8006f14:	4621      	mov	r1, r4
 8006f16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f1a:	3b30      	subs	r3, #48	; 0x30
 8006f1c:	2b09      	cmp	r3, #9
 8006f1e:	d94d      	bls.n	8006fbc <_svfiprintf_r+0x17c>
 8006f20:	b1b0      	cbz	r0, 8006f50 <_svfiprintf_r+0x110>
 8006f22:	9207      	str	r2, [sp, #28]
 8006f24:	e014      	b.n	8006f50 <_svfiprintf_r+0x110>
 8006f26:	eba0 0308 	sub.w	r3, r0, r8
 8006f2a:	fa09 f303 	lsl.w	r3, r9, r3
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	9304      	str	r3, [sp, #16]
 8006f32:	46a2      	mov	sl, r4
 8006f34:	e7d2      	b.n	8006edc <_svfiprintf_r+0x9c>
 8006f36:	9b03      	ldr	r3, [sp, #12]
 8006f38:	1d19      	adds	r1, r3, #4
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	9103      	str	r1, [sp, #12]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	bfbb      	ittet	lt
 8006f42:	425b      	neglt	r3, r3
 8006f44:	f042 0202 	orrlt.w	r2, r2, #2
 8006f48:	9307      	strge	r3, [sp, #28]
 8006f4a:	9307      	strlt	r3, [sp, #28]
 8006f4c:	bfb8      	it	lt
 8006f4e:	9204      	strlt	r2, [sp, #16]
 8006f50:	7823      	ldrb	r3, [r4, #0]
 8006f52:	2b2e      	cmp	r3, #46	; 0x2e
 8006f54:	d10c      	bne.n	8006f70 <_svfiprintf_r+0x130>
 8006f56:	7863      	ldrb	r3, [r4, #1]
 8006f58:	2b2a      	cmp	r3, #42	; 0x2a
 8006f5a:	d134      	bne.n	8006fc6 <_svfiprintf_r+0x186>
 8006f5c:	9b03      	ldr	r3, [sp, #12]
 8006f5e:	1d1a      	adds	r2, r3, #4
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	9203      	str	r2, [sp, #12]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	bfb8      	it	lt
 8006f68:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f6c:	3402      	adds	r4, #2
 8006f6e:	9305      	str	r3, [sp, #20]
 8006f70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007038 <_svfiprintf_r+0x1f8>
 8006f74:	7821      	ldrb	r1, [r4, #0]
 8006f76:	2203      	movs	r2, #3
 8006f78:	4650      	mov	r0, sl
 8006f7a:	f7f9 f931 	bl	80001e0 <memchr>
 8006f7e:	b138      	cbz	r0, 8006f90 <_svfiprintf_r+0x150>
 8006f80:	9b04      	ldr	r3, [sp, #16]
 8006f82:	eba0 000a 	sub.w	r0, r0, sl
 8006f86:	2240      	movs	r2, #64	; 0x40
 8006f88:	4082      	lsls	r2, r0
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	3401      	adds	r4, #1
 8006f8e:	9304      	str	r3, [sp, #16]
 8006f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f94:	4825      	ldr	r0, [pc, #148]	; (800702c <_svfiprintf_r+0x1ec>)
 8006f96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f9a:	2206      	movs	r2, #6
 8006f9c:	f7f9 f920 	bl	80001e0 <memchr>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d038      	beq.n	8007016 <_svfiprintf_r+0x1d6>
 8006fa4:	4b22      	ldr	r3, [pc, #136]	; (8007030 <_svfiprintf_r+0x1f0>)
 8006fa6:	bb1b      	cbnz	r3, 8006ff0 <_svfiprintf_r+0x1b0>
 8006fa8:	9b03      	ldr	r3, [sp, #12]
 8006faa:	3307      	adds	r3, #7
 8006fac:	f023 0307 	bic.w	r3, r3, #7
 8006fb0:	3308      	adds	r3, #8
 8006fb2:	9303      	str	r3, [sp, #12]
 8006fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fb6:	4433      	add	r3, r6
 8006fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8006fba:	e768      	b.n	8006e8e <_svfiprintf_r+0x4e>
 8006fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fc0:	460c      	mov	r4, r1
 8006fc2:	2001      	movs	r0, #1
 8006fc4:	e7a6      	b.n	8006f14 <_svfiprintf_r+0xd4>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	3401      	adds	r4, #1
 8006fca:	9305      	str	r3, [sp, #20]
 8006fcc:	4619      	mov	r1, r3
 8006fce:	f04f 0c0a 	mov.w	ip, #10
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fd8:	3a30      	subs	r2, #48	; 0x30
 8006fda:	2a09      	cmp	r2, #9
 8006fdc:	d903      	bls.n	8006fe6 <_svfiprintf_r+0x1a6>
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d0c6      	beq.n	8006f70 <_svfiprintf_r+0x130>
 8006fe2:	9105      	str	r1, [sp, #20]
 8006fe4:	e7c4      	b.n	8006f70 <_svfiprintf_r+0x130>
 8006fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fea:	4604      	mov	r4, r0
 8006fec:	2301      	movs	r3, #1
 8006fee:	e7f0      	b.n	8006fd2 <_svfiprintf_r+0x192>
 8006ff0:	ab03      	add	r3, sp, #12
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	462a      	mov	r2, r5
 8006ff6:	4b0f      	ldr	r3, [pc, #60]	; (8007034 <_svfiprintf_r+0x1f4>)
 8006ff8:	a904      	add	r1, sp, #16
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	f3af 8000 	nop.w
 8007000:	1c42      	adds	r2, r0, #1
 8007002:	4606      	mov	r6, r0
 8007004:	d1d6      	bne.n	8006fb4 <_svfiprintf_r+0x174>
 8007006:	89ab      	ldrh	r3, [r5, #12]
 8007008:	065b      	lsls	r3, r3, #25
 800700a:	f53f af2d 	bmi.w	8006e68 <_svfiprintf_r+0x28>
 800700e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007010:	b01d      	add	sp, #116	; 0x74
 8007012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007016:	ab03      	add	r3, sp, #12
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	462a      	mov	r2, r5
 800701c:	4b05      	ldr	r3, [pc, #20]	; (8007034 <_svfiprintf_r+0x1f4>)
 800701e:	a904      	add	r1, sp, #16
 8007020:	4638      	mov	r0, r7
 8007022:	f000 f879 	bl	8007118 <_printf_i>
 8007026:	e7eb      	b.n	8007000 <_svfiprintf_r+0x1c0>
 8007028:	08008391 	.word	0x08008391
 800702c:	0800839b 	.word	0x0800839b
 8007030:	00000000 	.word	0x00000000
 8007034:	08006d8d 	.word	0x08006d8d
 8007038:	08008397 	.word	0x08008397

0800703c <_printf_common>:
 800703c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007040:	4616      	mov	r6, r2
 8007042:	4699      	mov	r9, r3
 8007044:	688a      	ldr	r2, [r1, #8]
 8007046:	690b      	ldr	r3, [r1, #16]
 8007048:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800704c:	4293      	cmp	r3, r2
 800704e:	bfb8      	it	lt
 8007050:	4613      	movlt	r3, r2
 8007052:	6033      	str	r3, [r6, #0]
 8007054:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007058:	4607      	mov	r7, r0
 800705a:	460c      	mov	r4, r1
 800705c:	b10a      	cbz	r2, 8007062 <_printf_common+0x26>
 800705e:	3301      	adds	r3, #1
 8007060:	6033      	str	r3, [r6, #0]
 8007062:	6823      	ldr	r3, [r4, #0]
 8007064:	0699      	lsls	r1, r3, #26
 8007066:	bf42      	ittt	mi
 8007068:	6833      	ldrmi	r3, [r6, #0]
 800706a:	3302      	addmi	r3, #2
 800706c:	6033      	strmi	r3, [r6, #0]
 800706e:	6825      	ldr	r5, [r4, #0]
 8007070:	f015 0506 	ands.w	r5, r5, #6
 8007074:	d106      	bne.n	8007084 <_printf_common+0x48>
 8007076:	f104 0a19 	add.w	sl, r4, #25
 800707a:	68e3      	ldr	r3, [r4, #12]
 800707c:	6832      	ldr	r2, [r6, #0]
 800707e:	1a9b      	subs	r3, r3, r2
 8007080:	42ab      	cmp	r3, r5
 8007082:	dc26      	bgt.n	80070d2 <_printf_common+0x96>
 8007084:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007088:	1e13      	subs	r3, r2, #0
 800708a:	6822      	ldr	r2, [r4, #0]
 800708c:	bf18      	it	ne
 800708e:	2301      	movne	r3, #1
 8007090:	0692      	lsls	r2, r2, #26
 8007092:	d42b      	bmi.n	80070ec <_printf_common+0xb0>
 8007094:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007098:	4649      	mov	r1, r9
 800709a:	4638      	mov	r0, r7
 800709c:	47c0      	blx	r8
 800709e:	3001      	adds	r0, #1
 80070a0:	d01e      	beq.n	80070e0 <_printf_common+0xa4>
 80070a2:	6823      	ldr	r3, [r4, #0]
 80070a4:	6922      	ldr	r2, [r4, #16]
 80070a6:	f003 0306 	and.w	r3, r3, #6
 80070aa:	2b04      	cmp	r3, #4
 80070ac:	bf02      	ittt	eq
 80070ae:	68e5      	ldreq	r5, [r4, #12]
 80070b0:	6833      	ldreq	r3, [r6, #0]
 80070b2:	1aed      	subeq	r5, r5, r3
 80070b4:	68a3      	ldr	r3, [r4, #8]
 80070b6:	bf0c      	ite	eq
 80070b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070bc:	2500      	movne	r5, #0
 80070be:	4293      	cmp	r3, r2
 80070c0:	bfc4      	itt	gt
 80070c2:	1a9b      	subgt	r3, r3, r2
 80070c4:	18ed      	addgt	r5, r5, r3
 80070c6:	2600      	movs	r6, #0
 80070c8:	341a      	adds	r4, #26
 80070ca:	42b5      	cmp	r5, r6
 80070cc:	d11a      	bne.n	8007104 <_printf_common+0xc8>
 80070ce:	2000      	movs	r0, #0
 80070d0:	e008      	b.n	80070e4 <_printf_common+0xa8>
 80070d2:	2301      	movs	r3, #1
 80070d4:	4652      	mov	r2, sl
 80070d6:	4649      	mov	r1, r9
 80070d8:	4638      	mov	r0, r7
 80070da:	47c0      	blx	r8
 80070dc:	3001      	adds	r0, #1
 80070de:	d103      	bne.n	80070e8 <_printf_common+0xac>
 80070e0:	f04f 30ff 	mov.w	r0, #4294967295
 80070e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070e8:	3501      	adds	r5, #1
 80070ea:	e7c6      	b.n	800707a <_printf_common+0x3e>
 80070ec:	18e1      	adds	r1, r4, r3
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	2030      	movs	r0, #48	; 0x30
 80070f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070f6:	4422      	add	r2, r4
 80070f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007100:	3302      	adds	r3, #2
 8007102:	e7c7      	b.n	8007094 <_printf_common+0x58>
 8007104:	2301      	movs	r3, #1
 8007106:	4622      	mov	r2, r4
 8007108:	4649      	mov	r1, r9
 800710a:	4638      	mov	r0, r7
 800710c:	47c0      	blx	r8
 800710e:	3001      	adds	r0, #1
 8007110:	d0e6      	beq.n	80070e0 <_printf_common+0xa4>
 8007112:	3601      	adds	r6, #1
 8007114:	e7d9      	b.n	80070ca <_printf_common+0x8e>
	...

08007118 <_printf_i>:
 8007118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800711c:	7e0f      	ldrb	r7, [r1, #24]
 800711e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007120:	2f78      	cmp	r7, #120	; 0x78
 8007122:	4691      	mov	r9, r2
 8007124:	4680      	mov	r8, r0
 8007126:	460c      	mov	r4, r1
 8007128:	469a      	mov	sl, r3
 800712a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800712e:	d807      	bhi.n	8007140 <_printf_i+0x28>
 8007130:	2f62      	cmp	r7, #98	; 0x62
 8007132:	d80a      	bhi.n	800714a <_printf_i+0x32>
 8007134:	2f00      	cmp	r7, #0
 8007136:	f000 80d4 	beq.w	80072e2 <_printf_i+0x1ca>
 800713a:	2f58      	cmp	r7, #88	; 0x58
 800713c:	f000 80c0 	beq.w	80072c0 <_printf_i+0x1a8>
 8007140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007144:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007148:	e03a      	b.n	80071c0 <_printf_i+0xa8>
 800714a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800714e:	2b15      	cmp	r3, #21
 8007150:	d8f6      	bhi.n	8007140 <_printf_i+0x28>
 8007152:	a101      	add	r1, pc, #4	; (adr r1, 8007158 <_printf_i+0x40>)
 8007154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007158:	080071b1 	.word	0x080071b1
 800715c:	080071c5 	.word	0x080071c5
 8007160:	08007141 	.word	0x08007141
 8007164:	08007141 	.word	0x08007141
 8007168:	08007141 	.word	0x08007141
 800716c:	08007141 	.word	0x08007141
 8007170:	080071c5 	.word	0x080071c5
 8007174:	08007141 	.word	0x08007141
 8007178:	08007141 	.word	0x08007141
 800717c:	08007141 	.word	0x08007141
 8007180:	08007141 	.word	0x08007141
 8007184:	080072c9 	.word	0x080072c9
 8007188:	080071f1 	.word	0x080071f1
 800718c:	08007283 	.word	0x08007283
 8007190:	08007141 	.word	0x08007141
 8007194:	08007141 	.word	0x08007141
 8007198:	080072eb 	.word	0x080072eb
 800719c:	08007141 	.word	0x08007141
 80071a0:	080071f1 	.word	0x080071f1
 80071a4:	08007141 	.word	0x08007141
 80071a8:	08007141 	.word	0x08007141
 80071ac:	0800728b 	.word	0x0800728b
 80071b0:	682b      	ldr	r3, [r5, #0]
 80071b2:	1d1a      	adds	r2, r3, #4
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	602a      	str	r2, [r5, #0]
 80071b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071c0:	2301      	movs	r3, #1
 80071c2:	e09f      	b.n	8007304 <_printf_i+0x1ec>
 80071c4:	6820      	ldr	r0, [r4, #0]
 80071c6:	682b      	ldr	r3, [r5, #0]
 80071c8:	0607      	lsls	r7, r0, #24
 80071ca:	f103 0104 	add.w	r1, r3, #4
 80071ce:	6029      	str	r1, [r5, #0]
 80071d0:	d501      	bpl.n	80071d6 <_printf_i+0xbe>
 80071d2:	681e      	ldr	r6, [r3, #0]
 80071d4:	e003      	b.n	80071de <_printf_i+0xc6>
 80071d6:	0646      	lsls	r6, r0, #25
 80071d8:	d5fb      	bpl.n	80071d2 <_printf_i+0xba>
 80071da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80071de:	2e00      	cmp	r6, #0
 80071e0:	da03      	bge.n	80071ea <_printf_i+0xd2>
 80071e2:	232d      	movs	r3, #45	; 0x2d
 80071e4:	4276      	negs	r6, r6
 80071e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071ea:	485a      	ldr	r0, [pc, #360]	; (8007354 <_printf_i+0x23c>)
 80071ec:	230a      	movs	r3, #10
 80071ee:	e012      	b.n	8007216 <_printf_i+0xfe>
 80071f0:	682b      	ldr	r3, [r5, #0]
 80071f2:	6820      	ldr	r0, [r4, #0]
 80071f4:	1d19      	adds	r1, r3, #4
 80071f6:	6029      	str	r1, [r5, #0]
 80071f8:	0605      	lsls	r5, r0, #24
 80071fa:	d501      	bpl.n	8007200 <_printf_i+0xe8>
 80071fc:	681e      	ldr	r6, [r3, #0]
 80071fe:	e002      	b.n	8007206 <_printf_i+0xee>
 8007200:	0641      	lsls	r1, r0, #25
 8007202:	d5fb      	bpl.n	80071fc <_printf_i+0xe4>
 8007204:	881e      	ldrh	r6, [r3, #0]
 8007206:	4853      	ldr	r0, [pc, #332]	; (8007354 <_printf_i+0x23c>)
 8007208:	2f6f      	cmp	r7, #111	; 0x6f
 800720a:	bf0c      	ite	eq
 800720c:	2308      	moveq	r3, #8
 800720e:	230a      	movne	r3, #10
 8007210:	2100      	movs	r1, #0
 8007212:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007216:	6865      	ldr	r5, [r4, #4]
 8007218:	60a5      	str	r5, [r4, #8]
 800721a:	2d00      	cmp	r5, #0
 800721c:	bfa2      	ittt	ge
 800721e:	6821      	ldrge	r1, [r4, #0]
 8007220:	f021 0104 	bicge.w	r1, r1, #4
 8007224:	6021      	strge	r1, [r4, #0]
 8007226:	b90e      	cbnz	r6, 800722c <_printf_i+0x114>
 8007228:	2d00      	cmp	r5, #0
 800722a:	d04b      	beq.n	80072c4 <_printf_i+0x1ac>
 800722c:	4615      	mov	r5, r2
 800722e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007232:	fb03 6711 	mls	r7, r3, r1, r6
 8007236:	5dc7      	ldrb	r7, [r0, r7]
 8007238:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800723c:	4637      	mov	r7, r6
 800723e:	42bb      	cmp	r3, r7
 8007240:	460e      	mov	r6, r1
 8007242:	d9f4      	bls.n	800722e <_printf_i+0x116>
 8007244:	2b08      	cmp	r3, #8
 8007246:	d10b      	bne.n	8007260 <_printf_i+0x148>
 8007248:	6823      	ldr	r3, [r4, #0]
 800724a:	07de      	lsls	r6, r3, #31
 800724c:	d508      	bpl.n	8007260 <_printf_i+0x148>
 800724e:	6923      	ldr	r3, [r4, #16]
 8007250:	6861      	ldr	r1, [r4, #4]
 8007252:	4299      	cmp	r1, r3
 8007254:	bfde      	ittt	le
 8007256:	2330      	movle	r3, #48	; 0x30
 8007258:	f805 3c01 	strble.w	r3, [r5, #-1]
 800725c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007260:	1b52      	subs	r2, r2, r5
 8007262:	6122      	str	r2, [r4, #16]
 8007264:	f8cd a000 	str.w	sl, [sp]
 8007268:	464b      	mov	r3, r9
 800726a:	aa03      	add	r2, sp, #12
 800726c:	4621      	mov	r1, r4
 800726e:	4640      	mov	r0, r8
 8007270:	f7ff fee4 	bl	800703c <_printf_common>
 8007274:	3001      	adds	r0, #1
 8007276:	d14a      	bne.n	800730e <_printf_i+0x1f6>
 8007278:	f04f 30ff 	mov.w	r0, #4294967295
 800727c:	b004      	add	sp, #16
 800727e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	f043 0320 	orr.w	r3, r3, #32
 8007288:	6023      	str	r3, [r4, #0]
 800728a:	4833      	ldr	r0, [pc, #204]	; (8007358 <_printf_i+0x240>)
 800728c:	2778      	movs	r7, #120	; 0x78
 800728e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	6829      	ldr	r1, [r5, #0]
 8007296:	061f      	lsls	r7, r3, #24
 8007298:	f851 6b04 	ldr.w	r6, [r1], #4
 800729c:	d402      	bmi.n	80072a4 <_printf_i+0x18c>
 800729e:	065f      	lsls	r7, r3, #25
 80072a0:	bf48      	it	mi
 80072a2:	b2b6      	uxthmi	r6, r6
 80072a4:	07df      	lsls	r7, r3, #31
 80072a6:	bf48      	it	mi
 80072a8:	f043 0320 	orrmi.w	r3, r3, #32
 80072ac:	6029      	str	r1, [r5, #0]
 80072ae:	bf48      	it	mi
 80072b0:	6023      	strmi	r3, [r4, #0]
 80072b2:	b91e      	cbnz	r6, 80072bc <_printf_i+0x1a4>
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	f023 0320 	bic.w	r3, r3, #32
 80072ba:	6023      	str	r3, [r4, #0]
 80072bc:	2310      	movs	r3, #16
 80072be:	e7a7      	b.n	8007210 <_printf_i+0xf8>
 80072c0:	4824      	ldr	r0, [pc, #144]	; (8007354 <_printf_i+0x23c>)
 80072c2:	e7e4      	b.n	800728e <_printf_i+0x176>
 80072c4:	4615      	mov	r5, r2
 80072c6:	e7bd      	b.n	8007244 <_printf_i+0x12c>
 80072c8:	682b      	ldr	r3, [r5, #0]
 80072ca:	6826      	ldr	r6, [r4, #0]
 80072cc:	6961      	ldr	r1, [r4, #20]
 80072ce:	1d18      	adds	r0, r3, #4
 80072d0:	6028      	str	r0, [r5, #0]
 80072d2:	0635      	lsls	r5, r6, #24
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	d501      	bpl.n	80072dc <_printf_i+0x1c4>
 80072d8:	6019      	str	r1, [r3, #0]
 80072da:	e002      	b.n	80072e2 <_printf_i+0x1ca>
 80072dc:	0670      	lsls	r0, r6, #25
 80072de:	d5fb      	bpl.n	80072d8 <_printf_i+0x1c0>
 80072e0:	8019      	strh	r1, [r3, #0]
 80072e2:	2300      	movs	r3, #0
 80072e4:	6123      	str	r3, [r4, #16]
 80072e6:	4615      	mov	r5, r2
 80072e8:	e7bc      	b.n	8007264 <_printf_i+0x14c>
 80072ea:	682b      	ldr	r3, [r5, #0]
 80072ec:	1d1a      	adds	r2, r3, #4
 80072ee:	602a      	str	r2, [r5, #0]
 80072f0:	681d      	ldr	r5, [r3, #0]
 80072f2:	6862      	ldr	r2, [r4, #4]
 80072f4:	2100      	movs	r1, #0
 80072f6:	4628      	mov	r0, r5
 80072f8:	f7f8 ff72 	bl	80001e0 <memchr>
 80072fc:	b108      	cbz	r0, 8007302 <_printf_i+0x1ea>
 80072fe:	1b40      	subs	r0, r0, r5
 8007300:	6060      	str	r0, [r4, #4]
 8007302:	6863      	ldr	r3, [r4, #4]
 8007304:	6123      	str	r3, [r4, #16]
 8007306:	2300      	movs	r3, #0
 8007308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800730c:	e7aa      	b.n	8007264 <_printf_i+0x14c>
 800730e:	6923      	ldr	r3, [r4, #16]
 8007310:	462a      	mov	r2, r5
 8007312:	4649      	mov	r1, r9
 8007314:	4640      	mov	r0, r8
 8007316:	47d0      	blx	sl
 8007318:	3001      	adds	r0, #1
 800731a:	d0ad      	beq.n	8007278 <_printf_i+0x160>
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	079b      	lsls	r3, r3, #30
 8007320:	d413      	bmi.n	800734a <_printf_i+0x232>
 8007322:	68e0      	ldr	r0, [r4, #12]
 8007324:	9b03      	ldr	r3, [sp, #12]
 8007326:	4298      	cmp	r0, r3
 8007328:	bfb8      	it	lt
 800732a:	4618      	movlt	r0, r3
 800732c:	e7a6      	b.n	800727c <_printf_i+0x164>
 800732e:	2301      	movs	r3, #1
 8007330:	4632      	mov	r2, r6
 8007332:	4649      	mov	r1, r9
 8007334:	4640      	mov	r0, r8
 8007336:	47d0      	blx	sl
 8007338:	3001      	adds	r0, #1
 800733a:	d09d      	beq.n	8007278 <_printf_i+0x160>
 800733c:	3501      	adds	r5, #1
 800733e:	68e3      	ldr	r3, [r4, #12]
 8007340:	9903      	ldr	r1, [sp, #12]
 8007342:	1a5b      	subs	r3, r3, r1
 8007344:	42ab      	cmp	r3, r5
 8007346:	dcf2      	bgt.n	800732e <_printf_i+0x216>
 8007348:	e7eb      	b.n	8007322 <_printf_i+0x20a>
 800734a:	2500      	movs	r5, #0
 800734c:	f104 0619 	add.w	r6, r4, #25
 8007350:	e7f5      	b.n	800733e <_printf_i+0x226>
 8007352:	bf00      	nop
 8007354:	080083a2 	.word	0x080083a2
 8007358:	080083b3 	.word	0x080083b3

0800735c <__sflush_r>:
 800735c:	898a      	ldrh	r2, [r1, #12]
 800735e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007362:	4605      	mov	r5, r0
 8007364:	0710      	lsls	r0, r2, #28
 8007366:	460c      	mov	r4, r1
 8007368:	d458      	bmi.n	800741c <__sflush_r+0xc0>
 800736a:	684b      	ldr	r3, [r1, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	dc05      	bgt.n	800737c <__sflush_r+0x20>
 8007370:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007372:	2b00      	cmp	r3, #0
 8007374:	dc02      	bgt.n	800737c <__sflush_r+0x20>
 8007376:	2000      	movs	r0, #0
 8007378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800737c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800737e:	2e00      	cmp	r6, #0
 8007380:	d0f9      	beq.n	8007376 <__sflush_r+0x1a>
 8007382:	2300      	movs	r3, #0
 8007384:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007388:	682f      	ldr	r7, [r5, #0]
 800738a:	6a21      	ldr	r1, [r4, #32]
 800738c:	602b      	str	r3, [r5, #0]
 800738e:	d032      	beq.n	80073f6 <__sflush_r+0x9a>
 8007390:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007392:	89a3      	ldrh	r3, [r4, #12]
 8007394:	075a      	lsls	r2, r3, #29
 8007396:	d505      	bpl.n	80073a4 <__sflush_r+0x48>
 8007398:	6863      	ldr	r3, [r4, #4]
 800739a:	1ac0      	subs	r0, r0, r3
 800739c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800739e:	b10b      	cbz	r3, 80073a4 <__sflush_r+0x48>
 80073a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073a2:	1ac0      	subs	r0, r0, r3
 80073a4:	2300      	movs	r3, #0
 80073a6:	4602      	mov	r2, r0
 80073a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073aa:	6a21      	ldr	r1, [r4, #32]
 80073ac:	4628      	mov	r0, r5
 80073ae:	47b0      	blx	r6
 80073b0:	1c43      	adds	r3, r0, #1
 80073b2:	89a3      	ldrh	r3, [r4, #12]
 80073b4:	d106      	bne.n	80073c4 <__sflush_r+0x68>
 80073b6:	6829      	ldr	r1, [r5, #0]
 80073b8:	291d      	cmp	r1, #29
 80073ba:	d82b      	bhi.n	8007414 <__sflush_r+0xb8>
 80073bc:	4a29      	ldr	r2, [pc, #164]	; (8007464 <__sflush_r+0x108>)
 80073be:	410a      	asrs	r2, r1
 80073c0:	07d6      	lsls	r6, r2, #31
 80073c2:	d427      	bmi.n	8007414 <__sflush_r+0xb8>
 80073c4:	2200      	movs	r2, #0
 80073c6:	6062      	str	r2, [r4, #4]
 80073c8:	04d9      	lsls	r1, r3, #19
 80073ca:	6922      	ldr	r2, [r4, #16]
 80073cc:	6022      	str	r2, [r4, #0]
 80073ce:	d504      	bpl.n	80073da <__sflush_r+0x7e>
 80073d0:	1c42      	adds	r2, r0, #1
 80073d2:	d101      	bne.n	80073d8 <__sflush_r+0x7c>
 80073d4:	682b      	ldr	r3, [r5, #0]
 80073d6:	b903      	cbnz	r3, 80073da <__sflush_r+0x7e>
 80073d8:	6560      	str	r0, [r4, #84]	; 0x54
 80073da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073dc:	602f      	str	r7, [r5, #0]
 80073de:	2900      	cmp	r1, #0
 80073e0:	d0c9      	beq.n	8007376 <__sflush_r+0x1a>
 80073e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073e6:	4299      	cmp	r1, r3
 80073e8:	d002      	beq.n	80073f0 <__sflush_r+0x94>
 80073ea:	4628      	mov	r0, r5
 80073ec:	f7ff fbce 	bl	8006b8c <_free_r>
 80073f0:	2000      	movs	r0, #0
 80073f2:	6360      	str	r0, [r4, #52]	; 0x34
 80073f4:	e7c0      	b.n	8007378 <__sflush_r+0x1c>
 80073f6:	2301      	movs	r3, #1
 80073f8:	4628      	mov	r0, r5
 80073fa:	47b0      	blx	r6
 80073fc:	1c41      	adds	r1, r0, #1
 80073fe:	d1c8      	bne.n	8007392 <__sflush_r+0x36>
 8007400:	682b      	ldr	r3, [r5, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d0c5      	beq.n	8007392 <__sflush_r+0x36>
 8007406:	2b1d      	cmp	r3, #29
 8007408:	d001      	beq.n	800740e <__sflush_r+0xb2>
 800740a:	2b16      	cmp	r3, #22
 800740c:	d101      	bne.n	8007412 <__sflush_r+0xb6>
 800740e:	602f      	str	r7, [r5, #0]
 8007410:	e7b1      	b.n	8007376 <__sflush_r+0x1a>
 8007412:	89a3      	ldrh	r3, [r4, #12]
 8007414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007418:	81a3      	strh	r3, [r4, #12]
 800741a:	e7ad      	b.n	8007378 <__sflush_r+0x1c>
 800741c:	690f      	ldr	r7, [r1, #16]
 800741e:	2f00      	cmp	r7, #0
 8007420:	d0a9      	beq.n	8007376 <__sflush_r+0x1a>
 8007422:	0793      	lsls	r3, r2, #30
 8007424:	680e      	ldr	r6, [r1, #0]
 8007426:	bf08      	it	eq
 8007428:	694b      	ldreq	r3, [r1, #20]
 800742a:	600f      	str	r7, [r1, #0]
 800742c:	bf18      	it	ne
 800742e:	2300      	movne	r3, #0
 8007430:	eba6 0807 	sub.w	r8, r6, r7
 8007434:	608b      	str	r3, [r1, #8]
 8007436:	f1b8 0f00 	cmp.w	r8, #0
 800743a:	dd9c      	ble.n	8007376 <__sflush_r+0x1a>
 800743c:	6a21      	ldr	r1, [r4, #32]
 800743e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007440:	4643      	mov	r3, r8
 8007442:	463a      	mov	r2, r7
 8007444:	4628      	mov	r0, r5
 8007446:	47b0      	blx	r6
 8007448:	2800      	cmp	r0, #0
 800744a:	dc06      	bgt.n	800745a <__sflush_r+0xfe>
 800744c:	89a3      	ldrh	r3, [r4, #12]
 800744e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007452:	81a3      	strh	r3, [r4, #12]
 8007454:	f04f 30ff 	mov.w	r0, #4294967295
 8007458:	e78e      	b.n	8007378 <__sflush_r+0x1c>
 800745a:	4407      	add	r7, r0
 800745c:	eba8 0800 	sub.w	r8, r8, r0
 8007460:	e7e9      	b.n	8007436 <__sflush_r+0xda>
 8007462:	bf00      	nop
 8007464:	dfbffffe 	.word	0xdfbffffe

08007468 <_fflush_r>:
 8007468:	b538      	push	{r3, r4, r5, lr}
 800746a:	690b      	ldr	r3, [r1, #16]
 800746c:	4605      	mov	r5, r0
 800746e:	460c      	mov	r4, r1
 8007470:	b913      	cbnz	r3, 8007478 <_fflush_r+0x10>
 8007472:	2500      	movs	r5, #0
 8007474:	4628      	mov	r0, r5
 8007476:	bd38      	pop	{r3, r4, r5, pc}
 8007478:	b118      	cbz	r0, 8007482 <_fflush_r+0x1a>
 800747a:	6a03      	ldr	r3, [r0, #32]
 800747c:	b90b      	cbnz	r3, 8007482 <_fflush_r+0x1a>
 800747e:	f7fe ffdb 	bl	8006438 <__sinit>
 8007482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d0f3      	beq.n	8007472 <_fflush_r+0xa>
 800748a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800748c:	07d0      	lsls	r0, r2, #31
 800748e:	d404      	bmi.n	800749a <_fflush_r+0x32>
 8007490:	0599      	lsls	r1, r3, #22
 8007492:	d402      	bmi.n	800749a <_fflush_r+0x32>
 8007494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007496:	f7ff fb58 	bl	8006b4a <__retarget_lock_acquire_recursive>
 800749a:	4628      	mov	r0, r5
 800749c:	4621      	mov	r1, r4
 800749e:	f7ff ff5d 	bl	800735c <__sflush_r>
 80074a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074a4:	07da      	lsls	r2, r3, #31
 80074a6:	4605      	mov	r5, r0
 80074a8:	d4e4      	bmi.n	8007474 <_fflush_r+0xc>
 80074aa:	89a3      	ldrh	r3, [r4, #12]
 80074ac:	059b      	lsls	r3, r3, #22
 80074ae:	d4e1      	bmi.n	8007474 <_fflush_r+0xc>
 80074b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074b2:	f7ff fb4b 	bl	8006b4c <__retarget_lock_release_recursive>
 80074b6:	e7dd      	b.n	8007474 <_fflush_r+0xc>

080074b8 <fileno>:
 80074b8:	b538      	push	{r3, r4, r5, lr}
 80074ba:	4d13      	ldr	r5, [pc, #76]	; (8007508 <fileno+0x50>)
 80074bc:	4604      	mov	r4, r0
 80074be:	6828      	ldr	r0, [r5, #0]
 80074c0:	b118      	cbz	r0, 80074ca <fileno+0x12>
 80074c2:	6a03      	ldr	r3, [r0, #32]
 80074c4:	b90b      	cbnz	r3, 80074ca <fileno+0x12>
 80074c6:	f7fe ffb7 	bl	8006438 <__sinit>
 80074ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074cc:	07d8      	lsls	r0, r3, #31
 80074ce:	d405      	bmi.n	80074dc <fileno+0x24>
 80074d0:	89a3      	ldrh	r3, [r4, #12]
 80074d2:	0599      	lsls	r1, r3, #22
 80074d4:	d402      	bmi.n	80074dc <fileno+0x24>
 80074d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074d8:	f7ff fb37 	bl	8006b4a <__retarget_lock_acquire_recursive>
 80074dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074e0:	b15b      	cbz	r3, 80074fa <fileno+0x42>
 80074e2:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 80074e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80074e8:	07d2      	lsls	r2, r2, #31
 80074ea:	d404      	bmi.n	80074f6 <fileno+0x3e>
 80074ec:	059b      	lsls	r3, r3, #22
 80074ee:	d402      	bmi.n	80074f6 <fileno+0x3e>
 80074f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074f2:	f7ff fb2b 	bl	8006b4c <__retarget_lock_release_recursive>
 80074f6:	4628      	mov	r0, r5
 80074f8:	bd38      	pop	{r3, r4, r5, pc}
 80074fa:	682a      	ldr	r2, [r5, #0]
 80074fc:	2109      	movs	r1, #9
 80074fe:	6011      	str	r1, [r2, #0]
 8007500:	f04f 35ff 	mov.w	r5, #4294967295
 8007504:	e7ef      	b.n	80074e6 <fileno+0x2e>
 8007506:	bf00      	nop
 8007508:	20000078 	.word	0x20000078

0800750c <fiprintf>:
 800750c:	b40e      	push	{r1, r2, r3}
 800750e:	b503      	push	{r0, r1, lr}
 8007510:	4601      	mov	r1, r0
 8007512:	ab03      	add	r3, sp, #12
 8007514:	4805      	ldr	r0, [pc, #20]	; (800752c <fiprintf+0x20>)
 8007516:	f853 2b04 	ldr.w	r2, [r3], #4
 800751a:	6800      	ldr	r0, [r0, #0]
 800751c:	9301      	str	r3, [sp, #4]
 800751e:	f000 f89f 	bl	8007660 <_vfiprintf_r>
 8007522:	b002      	add	sp, #8
 8007524:	f85d eb04 	ldr.w	lr, [sp], #4
 8007528:	b003      	add	sp, #12
 800752a:	4770      	bx	lr
 800752c:	20000078 	.word	0x20000078

08007530 <memmove>:
 8007530:	4288      	cmp	r0, r1
 8007532:	b510      	push	{r4, lr}
 8007534:	eb01 0402 	add.w	r4, r1, r2
 8007538:	d902      	bls.n	8007540 <memmove+0x10>
 800753a:	4284      	cmp	r4, r0
 800753c:	4623      	mov	r3, r4
 800753e:	d807      	bhi.n	8007550 <memmove+0x20>
 8007540:	1e43      	subs	r3, r0, #1
 8007542:	42a1      	cmp	r1, r4
 8007544:	d008      	beq.n	8007558 <memmove+0x28>
 8007546:	f811 2b01 	ldrb.w	r2, [r1], #1
 800754a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800754e:	e7f8      	b.n	8007542 <memmove+0x12>
 8007550:	4402      	add	r2, r0
 8007552:	4601      	mov	r1, r0
 8007554:	428a      	cmp	r2, r1
 8007556:	d100      	bne.n	800755a <memmove+0x2a>
 8007558:	bd10      	pop	{r4, pc}
 800755a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800755e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007562:	e7f7      	b.n	8007554 <memmove+0x24>

08007564 <_sbrk_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	4d06      	ldr	r5, [pc, #24]	; (8007580 <_sbrk_r+0x1c>)
 8007568:	2300      	movs	r3, #0
 800756a:	4604      	mov	r4, r0
 800756c:	4608      	mov	r0, r1
 800756e:	602b      	str	r3, [r5, #0]
 8007570:	f7fa fa70 	bl	8001a54 <_sbrk>
 8007574:	1c43      	adds	r3, r0, #1
 8007576:	d102      	bne.n	800757e <_sbrk_r+0x1a>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	b103      	cbz	r3, 800757e <_sbrk_r+0x1a>
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	bd38      	pop	{r3, r4, r5, pc}
 8007580:	200002b0 	.word	0x200002b0

08007584 <memcpy>:
 8007584:	440a      	add	r2, r1
 8007586:	4291      	cmp	r1, r2
 8007588:	f100 33ff 	add.w	r3, r0, #4294967295
 800758c:	d100      	bne.n	8007590 <memcpy+0xc>
 800758e:	4770      	bx	lr
 8007590:	b510      	push	{r4, lr}
 8007592:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007596:	f803 4f01 	strb.w	r4, [r3, #1]!
 800759a:	4291      	cmp	r1, r2
 800759c:	d1f9      	bne.n	8007592 <memcpy+0xe>
 800759e:	bd10      	pop	{r4, pc}

080075a0 <abort>:
 80075a0:	b508      	push	{r3, lr}
 80075a2:	2006      	movs	r0, #6
 80075a4:	f000 fa34 	bl	8007a10 <raise>
 80075a8:	2001      	movs	r0, #1
 80075aa:	f7fa f9db 	bl	8001964 <_exit>

080075ae <_realloc_r>:
 80075ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b2:	4680      	mov	r8, r0
 80075b4:	4614      	mov	r4, r2
 80075b6:	460e      	mov	r6, r1
 80075b8:	b921      	cbnz	r1, 80075c4 <_realloc_r+0x16>
 80075ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075be:	4611      	mov	r1, r2
 80075c0:	f7ff bb58 	b.w	8006c74 <_malloc_r>
 80075c4:	b92a      	cbnz	r2, 80075d2 <_realloc_r+0x24>
 80075c6:	f7ff fae1 	bl	8006b8c <_free_r>
 80075ca:	4625      	mov	r5, r4
 80075cc:	4628      	mov	r0, r5
 80075ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075d2:	f000 fa39 	bl	8007a48 <_malloc_usable_size_r>
 80075d6:	4284      	cmp	r4, r0
 80075d8:	4607      	mov	r7, r0
 80075da:	d802      	bhi.n	80075e2 <_realloc_r+0x34>
 80075dc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075e0:	d812      	bhi.n	8007608 <_realloc_r+0x5a>
 80075e2:	4621      	mov	r1, r4
 80075e4:	4640      	mov	r0, r8
 80075e6:	f7ff fb45 	bl	8006c74 <_malloc_r>
 80075ea:	4605      	mov	r5, r0
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d0ed      	beq.n	80075cc <_realloc_r+0x1e>
 80075f0:	42bc      	cmp	r4, r7
 80075f2:	4622      	mov	r2, r4
 80075f4:	4631      	mov	r1, r6
 80075f6:	bf28      	it	cs
 80075f8:	463a      	movcs	r2, r7
 80075fa:	f7ff ffc3 	bl	8007584 <memcpy>
 80075fe:	4631      	mov	r1, r6
 8007600:	4640      	mov	r0, r8
 8007602:	f7ff fac3 	bl	8006b8c <_free_r>
 8007606:	e7e1      	b.n	80075cc <_realloc_r+0x1e>
 8007608:	4635      	mov	r5, r6
 800760a:	e7df      	b.n	80075cc <_realloc_r+0x1e>

0800760c <__sfputc_r>:
 800760c:	6893      	ldr	r3, [r2, #8]
 800760e:	3b01      	subs	r3, #1
 8007610:	2b00      	cmp	r3, #0
 8007612:	b410      	push	{r4}
 8007614:	6093      	str	r3, [r2, #8]
 8007616:	da08      	bge.n	800762a <__sfputc_r+0x1e>
 8007618:	6994      	ldr	r4, [r2, #24]
 800761a:	42a3      	cmp	r3, r4
 800761c:	db01      	blt.n	8007622 <__sfputc_r+0x16>
 800761e:	290a      	cmp	r1, #10
 8007620:	d103      	bne.n	800762a <__sfputc_r+0x1e>
 8007622:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007626:	f000 b935 	b.w	8007894 <__swbuf_r>
 800762a:	6813      	ldr	r3, [r2, #0]
 800762c:	1c58      	adds	r0, r3, #1
 800762e:	6010      	str	r0, [r2, #0]
 8007630:	7019      	strb	r1, [r3, #0]
 8007632:	4608      	mov	r0, r1
 8007634:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007638:	4770      	bx	lr

0800763a <__sfputs_r>:
 800763a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763c:	4606      	mov	r6, r0
 800763e:	460f      	mov	r7, r1
 8007640:	4614      	mov	r4, r2
 8007642:	18d5      	adds	r5, r2, r3
 8007644:	42ac      	cmp	r4, r5
 8007646:	d101      	bne.n	800764c <__sfputs_r+0x12>
 8007648:	2000      	movs	r0, #0
 800764a:	e007      	b.n	800765c <__sfputs_r+0x22>
 800764c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007650:	463a      	mov	r2, r7
 8007652:	4630      	mov	r0, r6
 8007654:	f7ff ffda 	bl	800760c <__sfputc_r>
 8007658:	1c43      	adds	r3, r0, #1
 800765a:	d1f3      	bne.n	8007644 <__sfputs_r+0xa>
 800765c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007660 <_vfiprintf_r>:
 8007660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007664:	460d      	mov	r5, r1
 8007666:	b09d      	sub	sp, #116	; 0x74
 8007668:	4614      	mov	r4, r2
 800766a:	4698      	mov	r8, r3
 800766c:	4606      	mov	r6, r0
 800766e:	b118      	cbz	r0, 8007678 <_vfiprintf_r+0x18>
 8007670:	6a03      	ldr	r3, [r0, #32]
 8007672:	b90b      	cbnz	r3, 8007678 <_vfiprintf_r+0x18>
 8007674:	f7fe fee0 	bl	8006438 <__sinit>
 8007678:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800767a:	07d9      	lsls	r1, r3, #31
 800767c:	d405      	bmi.n	800768a <_vfiprintf_r+0x2a>
 800767e:	89ab      	ldrh	r3, [r5, #12]
 8007680:	059a      	lsls	r2, r3, #22
 8007682:	d402      	bmi.n	800768a <_vfiprintf_r+0x2a>
 8007684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007686:	f7ff fa60 	bl	8006b4a <__retarget_lock_acquire_recursive>
 800768a:	89ab      	ldrh	r3, [r5, #12]
 800768c:	071b      	lsls	r3, r3, #28
 800768e:	d501      	bpl.n	8007694 <_vfiprintf_r+0x34>
 8007690:	692b      	ldr	r3, [r5, #16]
 8007692:	b99b      	cbnz	r3, 80076bc <_vfiprintf_r+0x5c>
 8007694:	4629      	mov	r1, r5
 8007696:	4630      	mov	r0, r6
 8007698:	f000 f93a 	bl	8007910 <__swsetup_r>
 800769c:	b170      	cbz	r0, 80076bc <_vfiprintf_r+0x5c>
 800769e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076a0:	07dc      	lsls	r4, r3, #31
 80076a2:	d504      	bpl.n	80076ae <_vfiprintf_r+0x4e>
 80076a4:	f04f 30ff 	mov.w	r0, #4294967295
 80076a8:	b01d      	add	sp, #116	; 0x74
 80076aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ae:	89ab      	ldrh	r3, [r5, #12]
 80076b0:	0598      	lsls	r0, r3, #22
 80076b2:	d4f7      	bmi.n	80076a4 <_vfiprintf_r+0x44>
 80076b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076b6:	f7ff fa49 	bl	8006b4c <__retarget_lock_release_recursive>
 80076ba:	e7f3      	b.n	80076a4 <_vfiprintf_r+0x44>
 80076bc:	2300      	movs	r3, #0
 80076be:	9309      	str	r3, [sp, #36]	; 0x24
 80076c0:	2320      	movs	r3, #32
 80076c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80076ca:	2330      	movs	r3, #48	; 0x30
 80076cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007880 <_vfiprintf_r+0x220>
 80076d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076d4:	f04f 0901 	mov.w	r9, #1
 80076d8:	4623      	mov	r3, r4
 80076da:	469a      	mov	sl, r3
 80076dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076e0:	b10a      	cbz	r2, 80076e6 <_vfiprintf_r+0x86>
 80076e2:	2a25      	cmp	r2, #37	; 0x25
 80076e4:	d1f9      	bne.n	80076da <_vfiprintf_r+0x7a>
 80076e6:	ebba 0b04 	subs.w	fp, sl, r4
 80076ea:	d00b      	beq.n	8007704 <_vfiprintf_r+0xa4>
 80076ec:	465b      	mov	r3, fp
 80076ee:	4622      	mov	r2, r4
 80076f0:	4629      	mov	r1, r5
 80076f2:	4630      	mov	r0, r6
 80076f4:	f7ff ffa1 	bl	800763a <__sfputs_r>
 80076f8:	3001      	adds	r0, #1
 80076fa:	f000 80a9 	beq.w	8007850 <_vfiprintf_r+0x1f0>
 80076fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007700:	445a      	add	r2, fp
 8007702:	9209      	str	r2, [sp, #36]	; 0x24
 8007704:	f89a 3000 	ldrb.w	r3, [sl]
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 80a1 	beq.w	8007850 <_vfiprintf_r+0x1f0>
 800770e:	2300      	movs	r3, #0
 8007710:	f04f 32ff 	mov.w	r2, #4294967295
 8007714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007718:	f10a 0a01 	add.w	sl, sl, #1
 800771c:	9304      	str	r3, [sp, #16]
 800771e:	9307      	str	r3, [sp, #28]
 8007720:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007724:	931a      	str	r3, [sp, #104]	; 0x68
 8007726:	4654      	mov	r4, sl
 8007728:	2205      	movs	r2, #5
 800772a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800772e:	4854      	ldr	r0, [pc, #336]	; (8007880 <_vfiprintf_r+0x220>)
 8007730:	f7f8 fd56 	bl	80001e0 <memchr>
 8007734:	9a04      	ldr	r2, [sp, #16]
 8007736:	b9d8      	cbnz	r0, 8007770 <_vfiprintf_r+0x110>
 8007738:	06d1      	lsls	r1, r2, #27
 800773a:	bf44      	itt	mi
 800773c:	2320      	movmi	r3, #32
 800773e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007742:	0713      	lsls	r3, r2, #28
 8007744:	bf44      	itt	mi
 8007746:	232b      	movmi	r3, #43	; 0x2b
 8007748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800774c:	f89a 3000 	ldrb.w	r3, [sl]
 8007750:	2b2a      	cmp	r3, #42	; 0x2a
 8007752:	d015      	beq.n	8007780 <_vfiprintf_r+0x120>
 8007754:	9a07      	ldr	r2, [sp, #28]
 8007756:	4654      	mov	r4, sl
 8007758:	2000      	movs	r0, #0
 800775a:	f04f 0c0a 	mov.w	ip, #10
 800775e:	4621      	mov	r1, r4
 8007760:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007764:	3b30      	subs	r3, #48	; 0x30
 8007766:	2b09      	cmp	r3, #9
 8007768:	d94d      	bls.n	8007806 <_vfiprintf_r+0x1a6>
 800776a:	b1b0      	cbz	r0, 800779a <_vfiprintf_r+0x13a>
 800776c:	9207      	str	r2, [sp, #28]
 800776e:	e014      	b.n	800779a <_vfiprintf_r+0x13a>
 8007770:	eba0 0308 	sub.w	r3, r0, r8
 8007774:	fa09 f303 	lsl.w	r3, r9, r3
 8007778:	4313      	orrs	r3, r2
 800777a:	9304      	str	r3, [sp, #16]
 800777c:	46a2      	mov	sl, r4
 800777e:	e7d2      	b.n	8007726 <_vfiprintf_r+0xc6>
 8007780:	9b03      	ldr	r3, [sp, #12]
 8007782:	1d19      	adds	r1, r3, #4
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	9103      	str	r1, [sp, #12]
 8007788:	2b00      	cmp	r3, #0
 800778a:	bfbb      	ittet	lt
 800778c:	425b      	neglt	r3, r3
 800778e:	f042 0202 	orrlt.w	r2, r2, #2
 8007792:	9307      	strge	r3, [sp, #28]
 8007794:	9307      	strlt	r3, [sp, #28]
 8007796:	bfb8      	it	lt
 8007798:	9204      	strlt	r2, [sp, #16]
 800779a:	7823      	ldrb	r3, [r4, #0]
 800779c:	2b2e      	cmp	r3, #46	; 0x2e
 800779e:	d10c      	bne.n	80077ba <_vfiprintf_r+0x15a>
 80077a0:	7863      	ldrb	r3, [r4, #1]
 80077a2:	2b2a      	cmp	r3, #42	; 0x2a
 80077a4:	d134      	bne.n	8007810 <_vfiprintf_r+0x1b0>
 80077a6:	9b03      	ldr	r3, [sp, #12]
 80077a8:	1d1a      	adds	r2, r3, #4
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	9203      	str	r2, [sp, #12]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	bfb8      	it	lt
 80077b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80077b6:	3402      	adds	r4, #2
 80077b8:	9305      	str	r3, [sp, #20]
 80077ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007890 <_vfiprintf_r+0x230>
 80077be:	7821      	ldrb	r1, [r4, #0]
 80077c0:	2203      	movs	r2, #3
 80077c2:	4650      	mov	r0, sl
 80077c4:	f7f8 fd0c 	bl	80001e0 <memchr>
 80077c8:	b138      	cbz	r0, 80077da <_vfiprintf_r+0x17a>
 80077ca:	9b04      	ldr	r3, [sp, #16]
 80077cc:	eba0 000a 	sub.w	r0, r0, sl
 80077d0:	2240      	movs	r2, #64	; 0x40
 80077d2:	4082      	lsls	r2, r0
 80077d4:	4313      	orrs	r3, r2
 80077d6:	3401      	adds	r4, #1
 80077d8:	9304      	str	r3, [sp, #16]
 80077da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077de:	4829      	ldr	r0, [pc, #164]	; (8007884 <_vfiprintf_r+0x224>)
 80077e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077e4:	2206      	movs	r2, #6
 80077e6:	f7f8 fcfb 	bl	80001e0 <memchr>
 80077ea:	2800      	cmp	r0, #0
 80077ec:	d03f      	beq.n	800786e <_vfiprintf_r+0x20e>
 80077ee:	4b26      	ldr	r3, [pc, #152]	; (8007888 <_vfiprintf_r+0x228>)
 80077f0:	bb1b      	cbnz	r3, 800783a <_vfiprintf_r+0x1da>
 80077f2:	9b03      	ldr	r3, [sp, #12]
 80077f4:	3307      	adds	r3, #7
 80077f6:	f023 0307 	bic.w	r3, r3, #7
 80077fa:	3308      	adds	r3, #8
 80077fc:	9303      	str	r3, [sp, #12]
 80077fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007800:	443b      	add	r3, r7
 8007802:	9309      	str	r3, [sp, #36]	; 0x24
 8007804:	e768      	b.n	80076d8 <_vfiprintf_r+0x78>
 8007806:	fb0c 3202 	mla	r2, ip, r2, r3
 800780a:	460c      	mov	r4, r1
 800780c:	2001      	movs	r0, #1
 800780e:	e7a6      	b.n	800775e <_vfiprintf_r+0xfe>
 8007810:	2300      	movs	r3, #0
 8007812:	3401      	adds	r4, #1
 8007814:	9305      	str	r3, [sp, #20]
 8007816:	4619      	mov	r1, r3
 8007818:	f04f 0c0a 	mov.w	ip, #10
 800781c:	4620      	mov	r0, r4
 800781e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007822:	3a30      	subs	r2, #48	; 0x30
 8007824:	2a09      	cmp	r2, #9
 8007826:	d903      	bls.n	8007830 <_vfiprintf_r+0x1d0>
 8007828:	2b00      	cmp	r3, #0
 800782a:	d0c6      	beq.n	80077ba <_vfiprintf_r+0x15a>
 800782c:	9105      	str	r1, [sp, #20]
 800782e:	e7c4      	b.n	80077ba <_vfiprintf_r+0x15a>
 8007830:	fb0c 2101 	mla	r1, ip, r1, r2
 8007834:	4604      	mov	r4, r0
 8007836:	2301      	movs	r3, #1
 8007838:	e7f0      	b.n	800781c <_vfiprintf_r+0x1bc>
 800783a:	ab03      	add	r3, sp, #12
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	462a      	mov	r2, r5
 8007840:	4b12      	ldr	r3, [pc, #72]	; (800788c <_vfiprintf_r+0x22c>)
 8007842:	a904      	add	r1, sp, #16
 8007844:	4630      	mov	r0, r6
 8007846:	f3af 8000 	nop.w
 800784a:	4607      	mov	r7, r0
 800784c:	1c78      	adds	r0, r7, #1
 800784e:	d1d6      	bne.n	80077fe <_vfiprintf_r+0x19e>
 8007850:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007852:	07d9      	lsls	r1, r3, #31
 8007854:	d405      	bmi.n	8007862 <_vfiprintf_r+0x202>
 8007856:	89ab      	ldrh	r3, [r5, #12]
 8007858:	059a      	lsls	r2, r3, #22
 800785a:	d402      	bmi.n	8007862 <_vfiprintf_r+0x202>
 800785c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800785e:	f7ff f975 	bl	8006b4c <__retarget_lock_release_recursive>
 8007862:	89ab      	ldrh	r3, [r5, #12]
 8007864:	065b      	lsls	r3, r3, #25
 8007866:	f53f af1d 	bmi.w	80076a4 <_vfiprintf_r+0x44>
 800786a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800786c:	e71c      	b.n	80076a8 <_vfiprintf_r+0x48>
 800786e:	ab03      	add	r3, sp, #12
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	462a      	mov	r2, r5
 8007874:	4b05      	ldr	r3, [pc, #20]	; (800788c <_vfiprintf_r+0x22c>)
 8007876:	a904      	add	r1, sp, #16
 8007878:	4630      	mov	r0, r6
 800787a:	f7ff fc4d 	bl	8007118 <_printf_i>
 800787e:	e7e4      	b.n	800784a <_vfiprintf_r+0x1ea>
 8007880:	08008391 	.word	0x08008391
 8007884:	0800839b 	.word	0x0800839b
 8007888:	00000000 	.word	0x00000000
 800788c:	0800763b 	.word	0x0800763b
 8007890:	08008397 	.word	0x08008397

08007894 <__swbuf_r>:
 8007894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007896:	460e      	mov	r6, r1
 8007898:	4614      	mov	r4, r2
 800789a:	4605      	mov	r5, r0
 800789c:	b118      	cbz	r0, 80078a6 <__swbuf_r+0x12>
 800789e:	6a03      	ldr	r3, [r0, #32]
 80078a0:	b90b      	cbnz	r3, 80078a6 <__swbuf_r+0x12>
 80078a2:	f7fe fdc9 	bl	8006438 <__sinit>
 80078a6:	69a3      	ldr	r3, [r4, #24]
 80078a8:	60a3      	str	r3, [r4, #8]
 80078aa:	89a3      	ldrh	r3, [r4, #12]
 80078ac:	071a      	lsls	r2, r3, #28
 80078ae:	d525      	bpl.n	80078fc <__swbuf_r+0x68>
 80078b0:	6923      	ldr	r3, [r4, #16]
 80078b2:	b31b      	cbz	r3, 80078fc <__swbuf_r+0x68>
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	6922      	ldr	r2, [r4, #16]
 80078b8:	1a98      	subs	r0, r3, r2
 80078ba:	6963      	ldr	r3, [r4, #20]
 80078bc:	b2f6      	uxtb	r6, r6
 80078be:	4283      	cmp	r3, r0
 80078c0:	4637      	mov	r7, r6
 80078c2:	dc04      	bgt.n	80078ce <__swbuf_r+0x3a>
 80078c4:	4621      	mov	r1, r4
 80078c6:	4628      	mov	r0, r5
 80078c8:	f7ff fdce 	bl	8007468 <_fflush_r>
 80078cc:	b9e0      	cbnz	r0, 8007908 <__swbuf_r+0x74>
 80078ce:	68a3      	ldr	r3, [r4, #8]
 80078d0:	3b01      	subs	r3, #1
 80078d2:	60a3      	str	r3, [r4, #8]
 80078d4:	6823      	ldr	r3, [r4, #0]
 80078d6:	1c5a      	adds	r2, r3, #1
 80078d8:	6022      	str	r2, [r4, #0]
 80078da:	701e      	strb	r6, [r3, #0]
 80078dc:	6962      	ldr	r2, [r4, #20]
 80078de:	1c43      	adds	r3, r0, #1
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d004      	beq.n	80078ee <__swbuf_r+0x5a>
 80078e4:	89a3      	ldrh	r3, [r4, #12]
 80078e6:	07db      	lsls	r3, r3, #31
 80078e8:	d506      	bpl.n	80078f8 <__swbuf_r+0x64>
 80078ea:	2e0a      	cmp	r6, #10
 80078ec:	d104      	bne.n	80078f8 <__swbuf_r+0x64>
 80078ee:	4621      	mov	r1, r4
 80078f0:	4628      	mov	r0, r5
 80078f2:	f7ff fdb9 	bl	8007468 <_fflush_r>
 80078f6:	b938      	cbnz	r0, 8007908 <__swbuf_r+0x74>
 80078f8:	4638      	mov	r0, r7
 80078fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078fc:	4621      	mov	r1, r4
 80078fe:	4628      	mov	r0, r5
 8007900:	f000 f806 	bl	8007910 <__swsetup_r>
 8007904:	2800      	cmp	r0, #0
 8007906:	d0d5      	beq.n	80078b4 <__swbuf_r+0x20>
 8007908:	f04f 37ff 	mov.w	r7, #4294967295
 800790c:	e7f4      	b.n	80078f8 <__swbuf_r+0x64>
	...

08007910 <__swsetup_r>:
 8007910:	b538      	push	{r3, r4, r5, lr}
 8007912:	4b2a      	ldr	r3, [pc, #168]	; (80079bc <__swsetup_r+0xac>)
 8007914:	4605      	mov	r5, r0
 8007916:	6818      	ldr	r0, [r3, #0]
 8007918:	460c      	mov	r4, r1
 800791a:	b118      	cbz	r0, 8007924 <__swsetup_r+0x14>
 800791c:	6a03      	ldr	r3, [r0, #32]
 800791e:	b90b      	cbnz	r3, 8007924 <__swsetup_r+0x14>
 8007920:	f7fe fd8a 	bl	8006438 <__sinit>
 8007924:	89a3      	ldrh	r3, [r4, #12]
 8007926:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800792a:	0718      	lsls	r0, r3, #28
 800792c:	d422      	bmi.n	8007974 <__swsetup_r+0x64>
 800792e:	06d9      	lsls	r1, r3, #27
 8007930:	d407      	bmi.n	8007942 <__swsetup_r+0x32>
 8007932:	2309      	movs	r3, #9
 8007934:	602b      	str	r3, [r5, #0]
 8007936:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800793a:	81a3      	strh	r3, [r4, #12]
 800793c:	f04f 30ff 	mov.w	r0, #4294967295
 8007940:	e034      	b.n	80079ac <__swsetup_r+0x9c>
 8007942:	0758      	lsls	r0, r3, #29
 8007944:	d512      	bpl.n	800796c <__swsetup_r+0x5c>
 8007946:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007948:	b141      	cbz	r1, 800795c <__swsetup_r+0x4c>
 800794a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800794e:	4299      	cmp	r1, r3
 8007950:	d002      	beq.n	8007958 <__swsetup_r+0x48>
 8007952:	4628      	mov	r0, r5
 8007954:	f7ff f91a 	bl	8006b8c <_free_r>
 8007958:	2300      	movs	r3, #0
 800795a:	6363      	str	r3, [r4, #52]	; 0x34
 800795c:	89a3      	ldrh	r3, [r4, #12]
 800795e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007962:	81a3      	strh	r3, [r4, #12]
 8007964:	2300      	movs	r3, #0
 8007966:	6063      	str	r3, [r4, #4]
 8007968:	6923      	ldr	r3, [r4, #16]
 800796a:	6023      	str	r3, [r4, #0]
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	f043 0308 	orr.w	r3, r3, #8
 8007972:	81a3      	strh	r3, [r4, #12]
 8007974:	6923      	ldr	r3, [r4, #16]
 8007976:	b94b      	cbnz	r3, 800798c <__swsetup_r+0x7c>
 8007978:	89a3      	ldrh	r3, [r4, #12]
 800797a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800797e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007982:	d003      	beq.n	800798c <__swsetup_r+0x7c>
 8007984:	4621      	mov	r1, r4
 8007986:	4628      	mov	r0, r5
 8007988:	f000 f88c 	bl	8007aa4 <__smakebuf_r>
 800798c:	89a0      	ldrh	r0, [r4, #12]
 800798e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007992:	f010 0301 	ands.w	r3, r0, #1
 8007996:	d00a      	beq.n	80079ae <__swsetup_r+0x9e>
 8007998:	2300      	movs	r3, #0
 800799a:	60a3      	str	r3, [r4, #8]
 800799c:	6963      	ldr	r3, [r4, #20]
 800799e:	425b      	negs	r3, r3
 80079a0:	61a3      	str	r3, [r4, #24]
 80079a2:	6923      	ldr	r3, [r4, #16]
 80079a4:	b943      	cbnz	r3, 80079b8 <__swsetup_r+0xa8>
 80079a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079aa:	d1c4      	bne.n	8007936 <__swsetup_r+0x26>
 80079ac:	bd38      	pop	{r3, r4, r5, pc}
 80079ae:	0781      	lsls	r1, r0, #30
 80079b0:	bf58      	it	pl
 80079b2:	6963      	ldrpl	r3, [r4, #20]
 80079b4:	60a3      	str	r3, [r4, #8]
 80079b6:	e7f4      	b.n	80079a2 <__swsetup_r+0x92>
 80079b8:	2000      	movs	r0, #0
 80079ba:	e7f7      	b.n	80079ac <__swsetup_r+0x9c>
 80079bc:	20000078 	.word	0x20000078

080079c0 <_raise_r>:
 80079c0:	291f      	cmp	r1, #31
 80079c2:	b538      	push	{r3, r4, r5, lr}
 80079c4:	4604      	mov	r4, r0
 80079c6:	460d      	mov	r5, r1
 80079c8:	d904      	bls.n	80079d4 <_raise_r+0x14>
 80079ca:	2316      	movs	r3, #22
 80079cc:	6003      	str	r3, [r0, #0]
 80079ce:	f04f 30ff 	mov.w	r0, #4294967295
 80079d2:	bd38      	pop	{r3, r4, r5, pc}
 80079d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80079d6:	b112      	cbz	r2, 80079de <_raise_r+0x1e>
 80079d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079dc:	b94b      	cbnz	r3, 80079f2 <_raise_r+0x32>
 80079de:	4620      	mov	r0, r4
 80079e0:	f000 f830 	bl	8007a44 <_getpid_r>
 80079e4:	462a      	mov	r2, r5
 80079e6:	4601      	mov	r1, r0
 80079e8:	4620      	mov	r0, r4
 80079ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079ee:	f000 b817 	b.w	8007a20 <_kill_r>
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d00a      	beq.n	8007a0c <_raise_r+0x4c>
 80079f6:	1c59      	adds	r1, r3, #1
 80079f8:	d103      	bne.n	8007a02 <_raise_r+0x42>
 80079fa:	2316      	movs	r3, #22
 80079fc:	6003      	str	r3, [r0, #0]
 80079fe:	2001      	movs	r0, #1
 8007a00:	e7e7      	b.n	80079d2 <_raise_r+0x12>
 8007a02:	2400      	movs	r4, #0
 8007a04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a08:	4628      	mov	r0, r5
 8007a0a:	4798      	blx	r3
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	e7e0      	b.n	80079d2 <_raise_r+0x12>

08007a10 <raise>:
 8007a10:	4b02      	ldr	r3, [pc, #8]	; (8007a1c <raise+0xc>)
 8007a12:	4601      	mov	r1, r0
 8007a14:	6818      	ldr	r0, [r3, #0]
 8007a16:	f7ff bfd3 	b.w	80079c0 <_raise_r>
 8007a1a:	bf00      	nop
 8007a1c:	20000078 	.word	0x20000078

08007a20 <_kill_r>:
 8007a20:	b538      	push	{r3, r4, r5, lr}
 8007a22:	4d07      	ldr	r5, [pc, #28]	; (8007a40 <_kill_r+0x20>)
 8007a24:	2300      	movs	r3, #0
 8007a26:	4604      	mov	r4, r0
 8007a28:	4608      	mov	r0, r1
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	602b      	str	r3, [r5, #0]
 8007a2e:	f7f9 ff89 	bl	8001944 <_kill>
 8007a32:	1c43      	adds	r3, r0, #1
 8007a34:	d102      	bne.n	8007a3c <_kill_r+0x1c>
 8007a36:	682b      	ldr	r3, [r5, #0]
 8007a38:	b103      	cbz	r3, 8007a3c <_kill_r+0x1c>
 8007a3a:	6023      	str	r3, [r4, #0]
 8007a3c:	bd38      	pop	{r3, r4, r5, pc}
 8007a3e:	bf00      	nop
 8007a40:	200002b0 	.word	0x200002b0

08007a44 <_getpid_r>:
 8007a44:	f7f9 bf76 	b.w	8001934 <_getpid>

08007a48 <_malloc_usable_size_r>:
 8007a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a4c:	1f18      	subs	r0, r3, #4
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	bfbc      	itt	lt
 8007a52:	580b      	ldrlt	r3, [r1, r0]
 8007a54:	18c0      	addlt	r0, r0, r3
 8007a56:	4770      	bx	lr

08007a58 <__swhatbuf_r>:
 8007a58:	b570      	push	{r4, r5, r6, lr}
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a60:	2900      	cmp	r1, #0
 8007a62:	b096      	sub	sp, #88	; 0x58
 8007a64:	4615      	mov	r5, r2
 8007a66:	461e      	mov	r6, r3
 8007a68:	da0d      	bge.n	8007a86 <__swhatbuf_r+0x2e>
 8007a6a:	89a3      	ldrh	r3, [r4, #12]
 8007a6c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007a70:	f04f 0100 	mov.w	r1, #0
 8007a74:	bf0c      	ite	eq
 8007a76:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007a7a:	2340      	movne	r3, #64	; 0x40
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	6031      	str	r1, [r6, #0]
 8007a80:	602b      	str	r3, [r5, #0]
 8007a82:	b016      	add	sp, #88	; 0x58
 8007a84:	bd70      	pop	{r4, r5, r6, pc}
 8007a86:	466a      	mov	r2, sp
 8007a88:	f000 f848 	bl	8007b1c <_fstat_r>
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	dbec      	blt.n	8007a6a <__swhatbuf_r+0x12>
 8007a90:	9901      	ldr	r1, [sp, #4]
 8007a92:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007a96:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007a9a:	4259      	negs	r1, r3
 8007a9c:	4159      	adcs	r1, r3
 8007a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007aa2:	e7eb      	b.n	8007a7c <__swhatbuf_r+0x24>

08007aa4 <__smakebuf_r>:
 8007aa4:	898b      	ldrh	r3, [r1, #12]
 8007aa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007aa8:	079d      	lsls	r5, r3, #30
 8007aaa:	4606      	mov	r6, r0
 8007aac:	460c      	mov	r4, r1
 8007aae:	d507      	bpl.n	8007ac0 <__smakebuf_r+0x1c>
 8007ab0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	6123      	str	r3, [r4, #16]
 8007ab8:	2301      	movs	r3, #1
 8007aba:	6163      	str	r3, [r4, #20]
 8007abc:	b002      	add	sp, #8
 8007abe:	bd70      	pop	{r4, r5, r6, pc}
 8007ac0:	ab01      	add	r3, sp, #4
 8007ac2:	466a      	mov	r2, sp
 8007ac4:	f7ff ffc8 	bl	8007a58 <__swhatbuf_r>
 8007ac8:	9900      	ldr	r1, [sp, #0]
 8007aca:	4605      	mov	r5, r0
 8007acc:	4630      	mov	r0, r6
 8007ace:	f7ff f8d1 	bl	8006c74 <_malloc_r>
 8007ad2:	b948      	cbnz	r0, 8007ae8 <__smakebuf_r+0x44>
 8007ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ad8:	059a      	lsls	r2, r3, #22
 8007ada:	d4ef      	bmi.n	8007abc <__smakebuf_r+0x18>
 8007adc:	f023 0303 	bic.w	r3, r3, #3
 8007ae0:	f043 0302 	orr.w	r3, r3, #2
 8007ae4:	81a3      	strh	r3, [r4, #12]
 8007ae6:	e7e3      	b.n	8007ab0 <__smakebuf_r+0xc>
 8007ae8:	89a3      	ldrh	r3, [r4, #12]
 8007aea:	6020      	str	r0, [r4, #0]
 8007aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af0:	81a3      	strh	r3, [r4, #12]
 8007af2:	9b00      	ldr	r3, [sp, #0]
 8007af4:	6163      	str	r3, [r4, #20]
 8007af6:	9b01      	ldr	r3, [sp, #4]
 8007af8:	6120      	str	r0, [r4, #16]
 8007afa:	b15b      	cbz	r3, 8007b14 <__smakebuf_r+0x70>
 8007afc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b00:	4630      	mov	r0, r6
 8007b02:	f000 f81d 	bl	8007b40 <_isatty_r>
 8007b06:	b128      	cbz	r0, 8007b14 <__smakebuf_r+0x70>
 8007b08:	89a3      	ldrh	r3, [r4, #12]
 8007b0a:	f023 0303 	bic.w	r3, r3, #3
 8007b0e:	f043 0301 	orr.w	r3, r3, #1
 8007b12:	81a3      	strh	r3, [r4, #12]
 8007b14:	89a3      	ldrh	r3, [r4, #12]
 8007b16:	431d      	orrs	r5, r3
 8007b18:	81a5      	strh	r5, [r4, #12]
 8007b1a:	e7cf      	b.n	8007abc <__smakebuf_r+0x18>

08007b1c <_fstat_r>:
 8007b1c:	b538      	push	{r3, r4, r5, lr}
 8007b1e:	4d07      	ldr	r5, [pc, #28]	; (8007b3c <_fstat_r+0x20>)
 8007b20:	2300      	movs	r3, #0
 8007b22:	4604      	mov	r4, r0
 8007b24:	4608      	mov	r0, r1
 8007b26:	4611      	mov	r1, r2
 8007b28:	602b      	str	r3, [r5, #0]
 8007b2a:	f7f9 ff6a 	bl	8001a02 <_fstat>
 8007b2e:	1c43      	adds	r3, r0, #1
 8007b30:	d102      	bne.n	8007b38 <_fstat_r+0x1c>
 8007b32:	682b      	ldr	r3, [r5, #0]
 8007b34:	b103      	cbz	r3, 8007b38 <_fstat_r+0x1c>
 8007b36:	6023      	str	r3, [r4, #0]
 8007b38:	bd38      	pop	{r3, r4, r5, pc}
 8007b3a:	bf00      	nop
 8007b3c:	200002b0 	.word	0x200002b0

08007b40 <_isatty_r>:
 8007b40:	b538      	push	{r3, r4, r5, lr}
 8007b42:	4d06      	ldr	r5, [pc, #24]	; (8007b5c <_isatty_r+0x1c>)
 8007b44:	2300      	movs	r3, #0
 8007b46:	4604      	mov	r4, r0
 8007b48:	4608      	mov	r0, r1
 8007b4a:	602b      	str	r3, [r5, #0]
 8007b4c:	f7f9 ff69 	bl	8001a22 <_isatty>
 8007b50:	1c43      	adds	r3, r0, #1
 8007b52:	d102      	bne.n	8007b5a <_isatty_r+0x1a>
 8007b54:	682b      	ldr	r3, [r5, #0]
 8007b56:	b103      	cbz	r3, 8007b5a <_isatty_r+0x1a>
 8007b58:	6023      	str	r3, [r4, #0]
 8007b5a:	bd38      	pop	{r3, r4, r5, pc}
 8007b5c:	200002b0 	.word	0x200002b0

08007b60 <_init>:
 8007b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b62:	bf00      	nop
 8007b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b66:	bc08      	pop	{r3}
 8007b68:	469e      	mov	lr, r3
 8007b6a:	4770      	bx	lr

08007b6c <_fini>:
 8007b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6e:	bf00      	nop
 8007b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b72:	bc08      	pop	{r3}
 8007b74:	469e      	mov	lr, r3
 8007b76:	4770      	bx	lr
