
stmTest3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000854  08007d10  08007d10  00017d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008564  08008564  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008564  08008564  00018564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800856c  0800856c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800856c  0800856c  0001856c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008570  08008570  00018570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008574  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000007c  080085f0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  080085f0  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   000151c1  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023e8  00000000  00000000  000352b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  00037698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bb5  00000000  00000000  00038598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026cc2  00000000  00000000  0003914d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011a85  00000000  00000000  0005fe0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1439  00000000  00000000  00071894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000050d0  00000000  00000000  00152cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  00157da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007cf8 	.word	0x08007cf8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08007cf8 	.word	0x08007cf8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <_Z5printPKc>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
void print(const char *s)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  //    #ifdef PRINT
  HAL_StatusTypeDef code = HAL_UART_Transmit(&huart2, (uint8_t *)s, strlen(s), HAL_MAX_DELAY);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff f93f 	bl	80001d0 <strlen>
 8000f52:	4603      	mov	r3, r0
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <_Z5printPKc+0x2c>)
 8000f5e:	f003 fb71 	bl	8004644 <HAL_UART_Transmit>
 8000f62:	4603      	mov	r3, r0
 8000f64:	73fb      	strb	r3, [r7, #15]
  //    #endif
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200000e4 	.word	0x200000e4

08000f74 <printf>:
int printf(const char *s, ...)
{
 8000f74:	b40f      	push	{r0, r1, r2, r3}
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b0c2      	sub	sp, #264	; 0x108
 8000f7a:	af00      	add	r7, sp, #0
  char buffer[256];
  //    #ifdef PRINT
  va_list args;
  va_start(args, s);
 8000f7c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8000f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000f84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000f88:	601a      	str	r2, [r3, #0]
  vsprintf(buffer, s, args);
 8000f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000f8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000f92:	f107 0008 	add.w	r0, r7, #8
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8000f9c:	f005 fc36 	bl	800680c <vsiprintf>
  perror(buffer);
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f005 fbcf 	bl	8006748 <perror>
  print(buffer);
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ffc8 	bl	8000f44 <_Z5printPKc>
  va_end(args);
  //    #endif
  return strlen(buffer);
 8000fb4:	f107 0308 	add.w	r3, r7, #8
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff f909 	bl	80001d0 <strlen>
 8000fbe:	4603      	mov	r3, r0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fcc:	b004      	add	sp, #16
 8000fce:	4770      	bx	lr

08000fd0 <_ZSt4acosIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    acos(_Tp __x)
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    { return __builtin_acos(__x); }
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff faa3 	bl	8000524 <__aeabi_i2d>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	ec43 2b10 	vmov	d0, r2, r3
 8000fe6:	f004 f827 	bl	8005038 <acos>
 8000fea:	eeb0 7a40 	vmov.f32	s14, s0
 8000fee:	eef0 7a60 	vmov.f32	s15, s1
 8000ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8000ff6:	eef0 0a67 	vmov.f32	s1, s15
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001000:	b5b0      	push	{r4, r5, r7, lr}
 8001002:	b0a2      	sub	sp, #136	; 0x88
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001006:	f000 fe63 	bl	8001cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100a:	f000 fa95 	bl	8001538 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100e:	f000 fbb7 	bl	8001780 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001012:	f000 fb81 	bl	8001718 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 8001016:	f000 faef 	bl	80015f8 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  HAL_Init();
 800101a:	f000 fe59 	bl	8001cd0 <HAL_Init>
  SystemClock_Config();
 800101e:	f000 fa8b 	bl	8001538 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8001022:	f000 fbad 	bl	8001780 <_ZL12MX_GPIO_Initv>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001026:	2100      	movs	r1, #0
 8001028:	480b      	ldr	r0, [pc, #44]	; (8001058 <main+0x58>)
 800102a:	f002 fbf9 	bl	8003820 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	rover_coords[0] =0;
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	61bb      	str	r3, [r7, #24]
    rover_coords[1] =0 ;
 8001034:	f04f 0300 	mov.w	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]


	antenna_heading_params[0]=0;
 800103a:	f04f 0300 	mov.w	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
	antenna_heading_params[1]=0;
 8001040:	f04f 0300 	mov.w	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
	antenna_heading_params[2]=0;
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	613b      	str	r3, [r7, #16]
	antenna_heading_params[3]=500;
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <main+0x5c>)
 800104e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 10; i++) {
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001056:	e24f      	b.n	80014f8 <main+0x4f8>
 8001058:	20000098 	.word	0x20000098
 800105c:	43fa0000 	.word	0x43fa0000
	    rover_coords[0] = -10000+ rand()% 20001;
 8001060:	f005 f9ec 	bl	800643c <rand>
 8001064:	4602      	mov	r2, r0
 8001066:	4bd6      	ldr	r3, [pc, #856]	; (80013c0 <main+0x3c0>)
 8001068:	fb83 1302 	smull	r1, r3, r3, r2
 800106c:	1299      	asrs	r1, r3, #10
 800106e:	17d3      	asrs	r3, r2, #31
 8001070:	1acb      	subs	r3, r1, r3
 8001072:	f644 6121 	movw	r1, #20001	; 0x4e21
 8001076:	fb01 f303 	mul.w	r3, r1, r3
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8001080:	3b10      	subs	r3, #16
 8001082:	ee07 3a90 	vmov	s15, r3
 8001086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800108a:	edc7 7a06 	vstr	s15, [r7, #24]
	    rover_coords[1] = rand()% 1001;
 800108e:	f005 f9d5 	bl	800643c <rand>
 8001092:	4603      	mov	r3, r0
 8001094:	4acb      	ldr	r2, [pc, #812]	; (80013c4 <main+0x3c4>)
 8001096:	fb82 1203 	smull	r1, r2, r2, r3
 800109a:	1211      	asrs	r1, r2, #8
 800109c:	17da      	asrs	r2, r3, #31
 800109e:	1a8a      	subs	r2, r1, r2
 80010a0:	f240 31e9 	movw	r1, #1001	; 0x3e9
 80010a4:	fb01 f202 	mul.w	r2, r1, r2
 80010a8:	1a9a      	subs	r2, r3, r2
 80010aa:	ee07 2a90 	vmov	s15, r2
 80010ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b2:	edc7 7a07 	vstr	s15, [r7, #28]
	    double new_latitude_diff = rover_coords[0] - antenna_heading_params[0];
 80010b6:	ed97 7a06 	vldr	s14, [r7, #24]
 80010ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80010be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c2:	ee17 0a90 	vmov	r0, s15
 80010c6:	f7ff fa3f 	bl	8000548 <__aeabi_f2d>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	        double new_longitude_diff = rover_coords[1] - antenna_heading_params[1];
 80010d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80010d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80010da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010de:	ee17 0a90 	vmov	r0, s15
 80010e2:	f7ff fa31 	bl	8000548 <__aeabi_f2d>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	        double initial_latitude_diff = antenna_heading_params[2] - antenna_heading_params[0];
 80010ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80010f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80010f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010fa:	ee17 0a90 	vmov	r0, s15
 80010fe:	f7ff fa23 	bl	8000548 <__aeabi_f2d>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	        double initial_longitude_diff = antenna_heading_params[3] - antenna_heading_params[1];
 800110a:	ed97 7a05 	vldr	s14, [r7, #20]
 800110e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001112:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001116:	ee17 0a90 	vmov	r0, s15
 800111a:	f7ff fa15 	bl	8000548 <__aeabi_f2d>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	        double new_distance = sqrt(pow(new_latitude_diff, 2) + pow(new_longitude_diff, 2)); // new distance between the antenna and the rover
 8001126:	2002      	movs	r0, #2
 8001128:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 800112c:	f000 fbb7 	bl	800189e <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001130:	ec55 4b10 	vmov	r4, r5, d0
 8001134:	2002      	movs	r0, #2
 8001136:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 800113a:	f000 fbb0 	bl	800189e <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800113e:	ec53 2b10 	vmov	r2, r3, d0
 8001142:	4620      	mov	r0, r4
 8001144:	4629      	mov	r1, r5
 8001146:	f7ff f8a1 	bl	800028c <__adddf3>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	ec43 2b17 	vmov	d7, r2, r3
 8001152:	eeb0 0a47 	vmov.f32	s0, s14
 8001156:	eef0 0a67 	vmov.f32	s1, s15
 800115a:	f004 f811 	bl	8005180 <sqrt>
 800115e:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
	        double initial_distance = sqrt(pow(initial_latitude_diff, 2) + pow(initial_longitude_diff, 2)); // initial distance between the antenna and the rover
 8001162:	2002      	movs	r0, #2
 8001164:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 8001168:	f000 fb99 	bl	800189e <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800116c:	ec55 4b10 	vmov	r4, r5, d0
 8001170:	2002      	movs	r0, #2
 8001172:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8001176:	f000 fb92 	bl	800189e <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800117a:	ec53 2b10 	vmov	r2, r3, d0
 800117e:	4620      	mov	r0, r4
 8001180:	4629      	mov	r1, r5
 8001182:	f7ff f883 	bl	800028c <__adddf3>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	ec43 2b17 	vmov	d7, r2, r3
 800118e:	eeb0 0a47 	vmov.f32	s0, s14
 8001192:	eef0 0a67 	vmov.f32	s1, s15
 8001196:	f003 fff3 	bl	8005180 <sqrt>
 800119a:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

	        // Normalizing the angle
	        double dot_product_initial_new_distance_diff = initial_latitude_diff * new_latitude_diff + initial_longitude_diff * new_longitude_diff;
 800119e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80011a2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80011a6:	f7ff fa27 	bl	80005f8 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4614      	mov	r4, r2
 80011b0:	461d      	mov	r5, r3
 80011b2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80011b6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80011ba:	f7ff fa1d 	bl	80005f8 <__aeabi_dmul>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4620      	mov	r0, r4
 80011c4:	4629      	mov	r1, r5
 80011c6:	f7ff f861 	bl	800028c <__adddf3>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	        double divider =  new_distance * initial_distance;
 80011d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80011d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80011da:	f7ff fa0d 	bl	80005f8 <__aeabi_dmul>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	        double theta_deg = 0;
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	f04f 0300 	mov.w	r3, #0
 80011ee:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	        double sin_theta = 0;
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	f04f 0300 	mov.w	r3, #0
 80011fa:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	        if(divider > 1e-16){
 80011fe:	a36e      	add	r3, pc, #440	; (adr r3, 80013b8 <main+0x3b8>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001208:	f7ff fc86 	bl	8000b18 <__aeabi_dcmpgt>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d053      	beq.n	80012ba <main+0x2ba>
	            double theta_rad = acos(dot_product_initial_new_distance_diff/(divider));
 8001212:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001216:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800121a:	f7ff fb17 	bl	800084c <__aeabi_ddiv>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	ec43 2b17 	vmov	d7, r2, r3
 8001226:	eeb0 0a47 	vmov.f32	s0, s14
 800122a:	eef0 0a67 	vmov.f32	s1, s15
 800122e:	f003 ff03 	bl	8005038 <acos>
 8001232:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	            theta_deg = theta_rad * 180.0/(acos(0)*2);
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	4b63      	ldr	r3, [pc, #396]	; (80013c8 <main+0x3c8>)
 800123c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001240:	f7ff f9da 	bl	80005f8 <__aeabi_dmul>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4614      	mov	r4, r2
 800124a:	461d      	mov	r5, r3
 800124c:	2000      	movs	r0, #0
 800124e:	f7ff febf 	bl	8000fd0 <_ZSt4acosIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001252:	ec51 0b10 	vmov	r0, r1, d0
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	f7ff f817 	bl	800028c <__adddf3>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4620      	mov	r0, r4
 8001264:	4629      	mov	r1, r5
 8001266:	f7ff faf1 	bl	800084c <__aeabi_ddiv>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	            double cross_product = new_latitude_diff * initial_longitude_diff - initial_latitude_diff * new_longitude_diff;
 8001272:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001276:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800127a:	f7ff f9bd 	bl	80005f8 <__aeabi_dmul>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4614      	mov	r4, r2
 8001284:	461d      	mov	r5, r3
 8001286:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800128a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800128e:	f7ff f9b3 	bl	80005f8 <__aeabi_dmul>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4620      	mov	r0, r4
 8001298:	4629      	mov	r1, r5
 800129a:	f7fe fff5 	bl	8000288 <__aeabi_dsub>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	            sin_theta = cross_product/ divider;
 80012a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80012aa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012ae:	f7ff facd 	bl	800084c <__aeabi_ddiv>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	        }
	        printf("test\r\n");
 80012ba:	4844      	ldr	r0, [pc, #272]	; (80013cc <main+0x3cc>)
 80012bc:	f7ff fe5a 	bl	8000f74 <printf>
	        if(sin_theta<0){
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80012cc:	f7ff fc06 	bl	8000adc <__aeabi_dcmplt>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 8096 	beq.w	8001404 <main+0x404>
	        	servo_angle[0] = (float)(90 + theta_deg);
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <main+0x3d0>)
 80012de:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80012e2:	f7fe ffd3 	bl	800028c <__adddf3>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f7ff fc5b 	bl	8000ba8 <__aeabi_d2f>
 80012f2:	4603      	mov	r3, r0
 80012f4:	607b      	str	r3, [r7, #4]
	        	printf("x %d\r\n",(int)rover_coords[0]);
 80012f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80012fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012fe:	ee17 1a90 	vmov	r1, s15
 8001302:	4834      	ldr	r0, [pc, #208]	; (80013d4 <main+0x3d4>)
 8001304:	f7ff fe36 	bl	8000f74 <printf>
	        	printf("y %d\r\n",(int)rover_coords[1]);
 8001308:	edd7 7a07 	vldr	s15, [r7, #28]
 800130c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001310:	ee17 1a90 	vmov	r1, s15
 8001314:	4830      	ldr	r0, [pc, #192]	; (80013d8 <main+0x3d8>)
 8001316:	f7ff fe2d 	bl	8000f74 <printf>
	        	printf("theta_deg %d\r\n", (int)(theta_deg * 100));
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	4b2f      	ldr	r3, [pc, #188]	; (80013dc <main+0x3dc>)
 8001320:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001324:	f7ff f968 	bl	80005f8 <__aeabi_dmul>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f7ff fc12 	bl	8000b58 <__aeabi_d2iz>
 8001334:	4603      	mov	r3, r0
 8001336:	4619      	mov	r1, r3
 8001338:	4829      	ldr	r0, [pc, #164]	; (80013e0 <main+0x3e0>)
 800133a:	f7ff fe1b 	bl	8000f74 <printf>
	        	printf("actual rover angle %d\r\n", (int)(servo_angle[0] * 100));
 800133e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001342:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80013e4 <main+0x3e4>
 8001346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800134e:	ee17 1a90 	vmov	r1, s15
 8001352:	4825      	ldr	r0, [pc, #148]	; (80013e8 <main+0x3e8>)
 8001354:	f7ff fe0e 	bl	8000f74 <printf>
	            printf("%d\r\n",(int)(100*((servo_angle[0]/180*2000)+500)));
 8001358:	ed97 7a01 	vldr	s14, [r7, #4]
 800135c:	eddf 6a23 	vldr	s13, [pc, #140]	; 80013ec <main+0x3ec>
 8001360:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001364:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80013f0 <main+0x3f0>
 8001368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80013f4 <main+0x3f4>
 8001370:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001374:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80013e4 <main+0x3e4>
 8001378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001380:	ee17 1a90 	vmov	r1, s15
 8001384:	481c      	ldr	r0, [pc, #112]	; (80013f8 <main+0x3f8>)
 8001386:	f7ff fdf5 	bl	8000f74 <printf>
	            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,(servo_angle[0]/180*2000)+500);
 800138a:	ed97 7a01 	vldr	s14, [r7, #4]
 800138e:	eddf 6a17 	vldr	s13, [pc, #92]	; 80013ec <main+0x3ec>
 8001392:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001396:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80013f0 <main+0x3f0>
 800139a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800139e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80013f4 <main+0x3f4>
 80013a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <main+0x3fc>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ae:	ee17 2a90 	vmov	r2, s15
 80013b2:	e025      	b.n	8001400 <main+0x400>
 80013b4:	f3af 8000 	nop.w
 80013b8:	97d889bc 	.word	0x97d889bc
 80013bc:	3c9cd2b2 	.word	0x3c9cd2b2
 80013c0:	0d1b4683 	.word	0x0d1b4683
 80013c4:	4178749f 	.word	0x4178749f
 80013c8:	40668000 	.word	0x40668000
 80013cc:	08007d10 	.word	0x08007d10
 80013d0:	40568000 	.word	0x40568000
 80013d4:	08007d18 	.word	0x08007d18
 80013d8:	08007d20 	.word	0x08007d20
 80013dc:	40590000 	.word	0x40590000
 80013e0:	08007d28 	.word	0x08007d28
 80013e4:	42c80000 	.word	0x42c80000
 80013e8:	08007d38 	.word	0x08007d38
 80013ec:	43340000 	.word	0x43340000
 80013f0:	44fa0000 	.word	0x44fa0000
 80013f4:	43fa0000 	.word	0x43fa0000
 80013f8:	08007d50 	.word	0x08007d50
 80013fc:	20000098 	.word	0x20000098
 8001400:	635a      	str	r2, [r3, #52]	; 0x34
 8001402:	e06d      	b.n	80014e0 <main+0x4e0>
	        }
	        else{
	        	servo_angle[0] = (float)(90 - theta_deg);
 8001404:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001408:	f04f 0000 	mov.w	r0, #0
 800140c:	493d      	ldr	r1, [pc, #244]	; (8001504 <main+0x504>)
 800140e:	f7fe ff3b 	bl	8000288 <__aeabi_dsub>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	f7ff fbc5 	bl	8000ba8 <__aeabi_d2f>
 800141e:	4603      	mov	r3, r0
 8001420:	607b      	str	r3, [r7, #4]
	        	printf("x %d\r\n",(int)rover_coords[0]);
 8001422:	edd7 7a06 	vldr	s15, [r7, #24]
 8001426:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800142a:	ee17 1a90 	vmov	r1, s15
 800142e:	4836      	ldr	r0, [pc, #216]	; (8001508 <main+0x508>)
 8001430:	f7ff fda0 	bl	8000f74 <printf>
	        	printf("y %d\r\n",(int)rover_coords[1]);
 8001434:	edd7 7a07 	vldr	s15, [r7, #28]
 8001438:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800143c:	ee17 1a90 	vmov	r1, s15
 8001440:	4832      	ldr	r0, [pc, #200]	; (800150c <main+0x50c>)
 8001442:	f7ff fd97 	bl	8000f74 <printf>
	         	printf("theta_deg %d\r\n", (int)(theta_deg * 100));
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	4b31      	ldr	r3, [pc, #196]	; (8001510 <main+0x510>)
 800144c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001450:	f7ff f8d2 	bl	80005f8 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	f7ff fb7c 	bl	8000b58 <__aeabi_d2iz>
 8001460:	4603      	mov	r3, r0
 8001462:	4619      	mov	r1, r3
 8001464:	482b      	ldr	r0, [pc, #172]	; (8001514 <main+0x514>)
 8001466:	f7ff fd85 	bl	8000f74 <printf>
	           	printf("actual rover angle %d\r\n", (int)(servo_angle[0] * 100));
 800146a:	edd7 7a01 	vldr	s15, [r7, #4]
 800146e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001518 <main+0x518>
 8001472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800147a:	ee17 1a90 	vmov	r1, s15
 800147e:	4827      	ldr	r0, [pc, #156]	; (800151c <main+0x51c>)
 8001480:	f7ff fd78 	bl	8000f74 <printf>
	        	printf("pwm %d\r\n",(int)(100*((servo_angle[0]/180*2000)+500)));
 8001484:	ed97 7a01 	vldr	s14, [r7, #4]
 8001488:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001520 <main+0x520>
 800148c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001490:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001524 <main+0x524>
 8001494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001498:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001528 <main+0x528>
 800149c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014a0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001518 <main+0x518>
 80014a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ac:	ee17 1a90 	vmov	r1, s15
 80014b0:	481e      	ldr	r0, [pc, #120]	; (800152c <main+0x52c>)
 80014b2:	f7ff fd5f 	bl	8000f74 <printf>
	        	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,(servo_angle[0]/180*2000)+500);
 80014b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80014ba:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001520 <main+0x520>
 80014be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001524 <main+0x524>
 80014c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ca:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001528 <main+0x528>
 80014ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <main+0x530>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014da:	ee17 2a90 	vmov	r2, s15
 80014de:	635a      	str	r2, [r3, #52]	; 0x34
	        }
	        HAL_Delay(3000);
 80014e0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80014e4:	f000 fc70 	bl	8001dc8 <HAL_Delay>
	    printf("moved 10 steps\n");
 80014e8:	4812      	ldr	r0, [pc, #72]	; (8001534 <main+0x534>)
 80014ea:	f7ff fd43 	bl	8000f74 <printf>
	for (int i = 0; i < 10; i++) {
 80014ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014f2:	3301      	adds	r3, #1
 80014f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80014f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014fc:	2b09      	cmp	r3, #9
 80014fe:	f77f adaf 	ble.w	8001060 <main+0x60>
*/
    
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001502:	e594      	b.n	800102e <main+0x2e>
 8001504:	40568000 	.word	0x40568000
 8001508:	08007d18 	.word	0x08007d18
 800150c:	08007d20 	.word	0x08007d20
 8001510:	40590000 	.word	0x40590000
 8001514:	08007d28 	.word	0x08007d28
 8001518:	42c80000 	.word	0x42c80000
 800151c:	08007d38 	.word	0x08007d38
 8001520:	43340000 	.word	0x43340000
 8001524:	44fa0000 	.word	0x44fa0000
 8001528:	43fa0000 	.word	0x43fa0000
 800152c:	08007d58 	.word	0x08007d58
 8001530:	20000098 	.word	0x20000098
 8001534:	08007d64 	.word	0x08007d64

08001538 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b096      	sub	sp, #88	; 0x58
 800153c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	2244      	movs	r2, #68	; 0x44
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f005 f96a 	bl	8006820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800154c:	463b      	mov	r3, r7
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800155a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800155e:	f000 fedd 	bl	800231c <HAL_PWREx_ControlVoltageScaling>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	bf14      	ite	ne
 8001568:	2301      	movne	r3, #1
 800156a:	2300      	moveq	r3, #0
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8001572:	f000 f98f 	bl	8001894 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001576:	2302      	movs	r3, #2
 8001578:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800157a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001580:	2310      	movs	r3, #16
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001584:	2302      	movs	r3, #2
 8001586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001588:	2302      	movs	r3, #2
 800158a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800158c:	2301      	movs	r3, #1
 800158e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001590:	230a      	movs	r3, #10
 8001592:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001594:	2307      	movs	r3, #7
 8001596:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001598:	2302      	movs	r3, #2
 800159a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800159c:	2302      	movs	r3, #2
 800159e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 ff0f 	bl	80023c8 <HAL_RCC_OscConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf14      	ite	ne
 80015b0:	2301      	movne	r3, #1
 80015b2:	2300      	moveq	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 80015ba:	f000 f96b 	bl	8001894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015be:	230f      	movs	r3, #15
 80015c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c2:	2303      	movs	r3, #3
 80015c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015d2:	463b      	mov	r3, r7
 80015d4:	2104      	movs	r1, #4
 80015d6:	4618      	mov	r0, r3
 80015d8:	f001 fb0a 	bl	8002bf0 <HAL_RCC_ClockConfig>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	bf14      	ite	ne
 80015e2:	2301      	movne	r3, #1
 80015e4:	2300      	moveq	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 80015ec:	f000 f952 	bl	8001894 <Error_Handler>
  }
}
 80015f0:	bf00      	nop
 80015f2:	3758      	adds	r7, #88	; 0x58
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08e      	sub	sp, #56	; 0x38
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001618:	463b      	mov	r3, r7
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]
 8001626:	615a      	str	r2, [r3, #20]
 8001628:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800162a:	4b3a      	ldr	r3, [pc, #232]	; (8001714 <_ZL12MX_TIM2_Initv+0x11c>)
 800162c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001630:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001632:	4b38      	ldr	r3, [pc, #224]	; (8001714 <_ZL12MX_TIM2_Initv+0x11c>)
 8001634:	224f      	movs	r2, #79	; 0x4f
 8001636:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001638:	4b36      	ldr	r3, [pc, #216]	; (8001714 <_ZL12MX_TIM2_Initv+0x11c>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 800163e:	4b35      	ldr	r3, [pc, #212]	; (8001714 <_ZL12MX_TIM2_Initv+0x11c>)
 8001640:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001644:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001646:	4b33      	ldr	r3, [pc, #204]	; (8001714 <_ZL12MX_TIM2_Initv+0x11c>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800164c:	4b31      	ldr	r3, [pc, #196]	; (8001714 <_ZL12MX_TIM2_Initv+0x11c>)
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001652:	4830      	ldr	r0, [pc, #192]	; (8001714 <_ZL12MX_TIM2_Initv+0x11c>)
 8001654:	f002 f82c 	bl	80036b0 <HAL_TIM_Base_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	bf14      	ite	ne
 800165e:	2301      	movne	r3, #1
 8001660:	2300      	moveq	r3, #0
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 8001668:	f000 f914 	bl	8001894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001676:	4619      	mov	r1, r3
 8001678:	4826      	ldr	r0, [pc, #152]	; (8001714 <_ZL12MX_TIM2_Initv+0x11c>)
 800167a:	f002 fac3 	bl	8003c04 <HAL_TIM_ConfigClockSource>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	bf14      	ite	ne
 8001684:	2301      	movne	r3, #1
 8001686:	2300      	moveq	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 800168e:	f000 f901 	bl	8001894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001692:	4820      	ldr	r0, [pc, #128]	; (8001714 <_ZL12MX_TIM2_Initv+0x11c>)
 8001694:	f002 f863 	bl	800375e <HAL_TIM_PWM_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	bf14      	ite	ne
 800169e:	2301      	movne	r3, #1
 80016a0:	2300      	moveq	r3, #0
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 80016a8:	f000 f8f4 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4619      	mov	r1, r3
 80016ba:	4816      	ldr	r0, [pc, #88]	; (8001714 <_ZL12MX_TIM2_Initv+0x11c>)
 80016bc:	f002 ff0e 	bl	80044dc <HAL_TIMEx_MasterConfigSynchronization>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	bf14      	ite	ne
 80016c6:	2301      	movne	r3, #1
 80016c8:	2300      	moveq	r3, #0
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 80016d0:	f000 f8e0 	bl	8001894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d4:	2360      	movs	r3, #96	; 0x60
 80016d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016e4:	463b      	mov	r3, r7
 80016e6:	2200      	movs	r2, #0
 80016e8:	4619      	mov	r1, r3
 80016ea:	480a      	ldr	r0, [pc, #40]	; (8001714 <_ZL12MX_TIM2_Initv+0x11c>)
 80016ec:	f002 f976 	bl	80039dc <HAL_TIM_PWM_ConfigChannel>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	bf14      	ite	ne
 80016f6:	2301      	movne	r3, #1
 80016f8:	2300      	moveq	r3, #0
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <_ZL12MX_TIM2_Initv+0x10c>
  {
    Error_Handler();
 8001700:	f000 f8c8 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001704:	4803      	ldr	r0, [pc, #12]	; (8001714 <_ZL12MX_TIM2_Initv+0x11c>)
 8001706:	f000 f929 	bl	800195c <HAL_TIM_MspPostInit>

}
 800170a:	bf00      	nop
 800170c:	3738      	adds	r7, #56	; 0x38
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000098 	.word	0x20000098

08001718 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800171c:	4b16      	ldr	r3, [pc, #88]	; (8001778 <_ZL19MX_USART2_UART_Initv+0x60>)
 800171e:	4a17      	ldr	r2, [pc, #92]	; (800177c <_ZL19MX_USART2_UART_Initv+0x64>)
 8001720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <_ZL19MX_USART2_UART_Initv+0x60>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <_ZL19MX_USART2_UART_Initv+0x60>)
 800173e:	220c      	movs	r2, #12
 8001740:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001742:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <_ZL19MX_USART2_UART_Initv+0x60>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001756:	2200      	movs	r2, #0
 8001758:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800175a:	4807      	ldr	r0, [pc, #28]	; (8001778 <_ZL19MX_USART2_UART_Initv+0x60>)
 800175c:	f002 ff24 	bl	80045a8 <HAL_UART_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	bf14      	ite	ne
 8001766:	2301      	movne	r3, #1
 8001768:	2300      	moveq	r3, #0
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8001770:	f000 f890 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200000e4 	.word	0x200000e4
 800177c:	40004400 	.word	0x40004400

08001780 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001796:	4b3c      	ldr	r3, [pc, #240]	; (8001888 <_ZL12MX_GPIO_Initv+0x108>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179a:	4a3b      	ldr	r2, [pc, #236]	; (8001888 <_ZL12MX_GPIO_Initv+0x108>)
 800179c:	f043 0304 	orr.w	r3, r3, #4
 80017a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a2:	4b39      	ldr	r3, [pc, #228]	; (8001888 <_ZL12MX_GPIO_Initv+0x108>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ae:	4b36      	ldr	r3, [pc, #216]	; (8001888 <_ZL12MX_GPIO_Initv+0x108>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	4a35      	ldr	r2, [pc, #212]	; (8001888 <_ZL12MX_GPIO_Initv+0x108>)
 80017b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ba:	4b33      	ldr	r3, [pc, #204]	; (8001888 <_ZL12MX_GPIO_Initv+0x108>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	4b30      	ldr	r3, [pc, #192]	; (8001888 <_ZL12MX_GPIO_Initv+0x108>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	4a2f      	ldr	r2, [pc, #188]	; (8001888 <_ZL12MX_GPIO_Initv+0x108>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d2:	4b2d      	ldr	r3, [pc, #180]	; (8001888 <_ZL12MX_GPIO_Initv+0x108>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017de:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <_ZL12MX_GPIO_Initv+0x108>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	4a29      	ldr	r2, [pc, #164]	; (8001888 <_ZL12MX_GPIO_Initv+0x108>)
 80017e4:	f043 0302 	orr.w	r3, r3, #2
 80017e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ea:	4b27      	ldr	r3, [pc, #156]	; (8001888 <_ZL12MX_GPIO_Initv+0x108>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	21b0      	movs	r1, #176	; 0xb0
 80017fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fe:	f000 fd67 	bl	80022d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001808:	4820      	ldr	r0, [pc, #128]	; (800188c <_ZL12MX_GPIO_Initv+0x10c>)
 800180a:	f000 fd61 	bl	80022d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800180e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001814:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	481a      	ldr	r0, [pc, #104]	; (8001890 <_ZL12MX_GPIO_Initv+0x110>)
 8001826:	f000 fbd9 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 800182a:	23b0      	movs	r3, #176	; 0xb0
 800182c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182e:	2301      	movs	r3, #1
 8001830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001844:	f000 fbca 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8001848:	2340      	movs	r3, #64	; 0x40
 800184a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001850:	2301      	movs	r3, #1
 8001852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800185e:	f000 fbbd 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001862:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001868:	2301      	movs	r3, #1
 800186a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	4804      	ldr	r0, [pc, #16]	; (800188c <_ZL12MX_GPIO_Initv+0x10c>)
 800187c:	f000 fbae 	bl	8001fdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001880:	bf00      	nop
 8001882:	3728      	adds	r7, #40	; 0x28
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40021000 	.word	0x40021000
 800188c:	48000400 	.word	0x48000400
 8001890:	48000800 	.word	0x48000800

08001894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001898:	b672      	cpsid	i
}
 800189a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800189c:	e7fe      	b.n	800189c <Error_Handler+0x8>

0800189e <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	ed87 0b02 	vstr	d0, [r7, #8]
 80018a8:	6078      	str	r0, [r7, #4]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7fe fe3a 	bl	8000524 <__aeabi_i2d>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	ec43 2b11 	vmov	d1, r2, r3
 80018b8:	ed97 0b02 	vldr	d0, [r7, #8]
 80018bc:	f003 fbf0 	bl	80050a0 <pow>
 80018c0:	eeb0 7a40 	vmov.f32	s14, s0
 80018c4:	eef0 7a60 	vmov.f32	s15, s1
    }
 80018c8:	eeb0 0a47 	vmov.f32	s0, s14
 80018cc:	eef0 0a67 	vmov.f32	s1, s15
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <HAL_MspInit+0x44>)
 80018e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e2:	4a0e      	ldr	r2, [pc, #56]	; (800191c <HAL_MspInit+0x44>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6613      	str	r3, [r2, #96]	; 0x60
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <HAL_MspInit+0x44>)
 80018ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_MspInit+0x44>)
 80018f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fa:	4a08      	ldr	r2, [pc, #32]	; (800191c <HAL_MspInit+0x44>)
 80018fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001900:	6593      	str	r3, [r2, #88]	; 0x58
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_MspInit+0x44>)
 8001904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000

08001920 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001930:	d10b      	bne.n	800194a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_TIM_Base_MspInit+0x38>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	4a08      	ldr	r2, [pc, #32]	; (8001958 <HAL_TIM_Base_MspInit+0x38>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6593      	str	r3, [r2, #88]	; 0x58
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_TIM_Base_MspInit+0x38>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000

0800195c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800197c:	d11c      	bne.n	80019b8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <HAL_TIM_MspPostInit+0x64>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001982:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <HAL_TIM_MspPostInit+0x64>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198a:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <HAL_TIM_MspPostInit+0x64>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001996:	2301      	movs	r3, #1
 8001998:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019a6:	2301      	movs	r3, #1
 80019a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019aa:	f107 030c 	add.w	r3, r7, #12
 80019ae:	4619      	mov	r1, r3
 80019b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b4:	f000 fb12 	bl	8001fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019b8:	bf00      	nop
 80019ba:	3720      	adds	r7, #32
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021000 	.word	0x40021000

080019c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b0a2      	sub	sp, #136	; 0x88
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	2260      	movs	r2, #96	; 0x60
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f004 ff1b 	bl	8006820 <memset>
  if(huart->Instance==USART2)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a20      	ldr	r2, [pc, #128]	; (8001a70 <HAL_UART_MspInit+0xac>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d138      	bne.n	8001a66 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019f4:	2302      	movs	r3, #2
 80019f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019f8:	2300      	movs	r3, #0
 80019fa:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	4618      	mov	r0, r3
 8001a02:	f001 fb19 	bl	8003038 <HAL_RCCEx_PeriphCLKConfig>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a0c:	f7ff ff42 	bl	8001894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a10:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <HAL_UART_MspInit+0xb0>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	4a17      	ldr	r2, [pc, #92]	; (8001a74 <HAL_UART_MspInit+0xb0>)
 8001a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a1c:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <HAL_UART_MspInit+0xb0>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_UART_MspInit+0xb0>)
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2c:	4a11      	ldr	r2, [pc, #68]	; (8001a74 <HAL_UART_MspInit+0xb0>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <HAL_UART_MspInit+0xb0>)
 8001a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a40:	230c      	movs	r3, #12
 8001a42:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a52:	2307      	movs	r3, #7
 8001a54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a58:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a62:	f000 fabb 	bl	8001fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a66:	bf00      	nop
 8001a68:	3788      	adds	r7, #136	; 0x88
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40004400 	.word	0x40004400
 8001a74:	40021000 	.word	0x40021000

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <NMI_Handler+0x4>

08001a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <HardFault_Handler+0x4>

08001a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <MemManage_Handler+0x4>

08001a8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <BusFault_Handler+0x4>

08001a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <UsageFault_Handler+0x4>

08001a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac4:	f000 f960 	bl	8001d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}

08001acc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return 1;
 8001ad0:	2301      	movs	r3, #1
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <_kill>:

int _kill(int pid, int sig)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ae6:	f005 f8d1 	bl	8006c8c <__errno>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2216      	movs	r2, #22
 8001aee:	601a      	str	r2, [r3, #0]
  return -1;
 8001af0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_exit>:

void _exit (int status)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ffe7 	bl	8001adc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b0e:	e7fe      	b.n	8001b0e <_exit+0x12>

08001b10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	e00a      	b.n	8001b38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b22:	f3af 8000 	nop.w
 8001b26:	4601      	mov	r1, r0
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	60ba      	str	r2, [r7, #8]
 8001b2e:	b2ca      	uxtb	r2, r1
 8001b30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	dbf0      	blt.n	8001b22 <_read+0x12>
  }

  return len;
 8001b40:	687b      	ldr	r3, [r7, #4]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	e009      	b.n	8001b70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	60ba      	str	r2, [r7, #8]
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	dbf1      	blt.n	8001b5c <_write+0x12>
  }
  return len;
 8001b78:	687b      	ldr	r3, [r7, #4]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <_close>:

int _close(int file)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001baa:	605a      	str	r2, [r3, #4]
  return 0;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <_isatty>:

int _isatty(int file)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf4:	4a14      	ldr	r2, [pc, #80]	; (8001c48 <_sbrk+0x5c>)
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <_sbrk+0x60>)
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <_sbrk+0x64>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d102      	bne.n	8001c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <_sbrk+0x64>)
 8001c0a:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <_sbrk+0x68>)
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d207      	bcs.n	8001c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c1c:	f005 f836 	bl	8006c8c <__errno>
 8001c20:	4603      	mov	r3, r0
 8001c22:	220c      	movs	r2, #12
 8001c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	e009      	b.n	8001c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c32:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <_sbrk+0x64>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <_sbrk+0x64>)
 8001c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20010000 	.word	0x20010000
 8001c4c:	00000400 	.word	0x00000400
 8001c50:	2000016c 	.word	0x2000016c
 8001c54:	200002c0 	.word	0x200002c0

08001c58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <SystemInit+0x20>)
 8001c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c62:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <SystemInit+0x20>)
 8001c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c80:	f7ff ffea 	bl	8001c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c84:	480c      	ldr	r0, [pc, #48]	; (8001cb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c86:	490d      	ldr	r1, [pc, #52]	; (8001cbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c88:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <LoopForever+0xe>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c8c:	e002      	b.n	8001c94 <LoopCopyDataInit>

08001c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c92:	3304      	adds	r3, #4

08001c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c98:	d3f9      	bcc.n	8001c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c9c:	4c0a      	ldr	r4, [pc, #40]	; (8001cc8 <LoopForever+0x16>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca0:	e001      	b.n	8001ca6 <LoopFillZerobss>

08001ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca4:	3204      	adds	r2, #4

08001ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca8:	d3fb      	bcc.n	8001ca2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001caa:	f004 fff5 	bl	8006c98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cae:	f7ff f9a7 	bl	8001000 <main>

08001cb2 <LoopForever>:

LoopForever:
    b LoopForever
 8001cb2:	e7fe      	b.n	8001cb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cb4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cbc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001cc0:	08008574 	.word	0x08008574
  ldr r2, =_sbss
 8001cc4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001cc8:	200002c0 	.word	0x200002c0

08001ccc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ccc:	e7fe      	b.n	8001ccc <ADC1_IRQHandler>
	...

08001cd0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <HAL_Init+0x3c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <HAL_Init+0x3c>)
 8001ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce6:	2003      	movs	r0, #3
 8001ce8:	f000 f944 	bl	8001f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cec:	2000      	movs	r0, #0
 8001cee:	f000 f80f 	bl	8001d10 <HAL_InitTick>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	71fb      	strb	r3, [r7, #7]
 8001cfc:	e001      	b.n	8001d02 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cfe:	f7ff fdeb 	bl	80018d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d02:	79fb      	ldrb	r3, [r7, #7]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40022000 	.word	0x40022000

08001d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d1c:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <HAL_InitTick+0x6c>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d023      	beq.n	8001d6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d24:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <HAL_InitTick+0x70>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <HAL_InitTick+0x6c>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 f941 	bl	8001fc2 <HAL_SYSTICK_Config>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10f      	bne.n	8001d66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b0f      	cmp	r3, #15
 8001d4a:	d809      	bhi.n	8001d60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295
 8001d54:	f000 f919 	bl	8001f8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d58:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <HAL_InitTick+0x74>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e007      	b.n	8001d70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	73fb      	strb	r3, [r7, #15]
 8001d64:	e004      	b.n	8001d70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
 8001d6a:	e001      	b.n	8001d70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000008 	.word	0x20000008
 8001d80:	20000000 	.word	0x20000000
 8001d84:	20000004 	.word	0x20000004

08001d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_IncTick+0x20>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_IncTick+0x24>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	4a04      	ldr	r2, [pc, #16]	; (8001dac <HAL_IncTick+0x24>)
 8001d9a:	6013      	str	r3, [r2, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20000008 	.word	0x20000008
 8001dac:	20000170 	.word	0x20000170

08001db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return uwTick;
 8001db4:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <HAL_GetTick+0x14>)
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000170 	.word	0x20000170

08001dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd0:	f7ff ffee 	bl	8001db0 <HAL_GetTick>
 8001dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de0:	d005      	beq.n	8001dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001de2:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <HAL_Delay+0x44>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dee:	bf00      	nop
 8001df0:	f7ff ffde 	bl	8001db0 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d8f7      	bhi.n	8001df0 <HAL_Delay+0x28>
  {
  }
}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000008 	.word	0x20000008

08001e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <__NVIC_SetPriorityGrouping+0x44>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e42:	4a04      	ldr	r2, [pc, #16]	; (8001e54 <__NVIC_SetPriorityGrouping+0x44>)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	60d3      	str	r3, [r2, #12]
}
 8001e48:	bf00      	nop
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <__NVIC_GetPriorityGrouping+0x18>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	0a1b      	lsrs	r3, r3, #8
 8001e62:	f003 0307 	and.w	r3, r3, #7
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	db0a      	blt.n	8001e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	490c      	ldr	r1, [pc, #48]	; (8001ec0 <__NVIC_SetPriority+0x4c>)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	0112      	lsls	r2, r2, #4
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	440b      	add	r3, r1
 8001e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e9c:	e00a      	b.n	8001eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4908      	ldr	r1, [pc, #32]	; (8001ec4 <__NVIC_SetPriority+0x50>)
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	3b04      	subs	r3, #4
 8001eac:	0112      	lsls	r2, r2, #4
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	761a      	strb	r2, [r3, #24]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000e100 	.word	0xe000e100
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	; 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f1c3 0307 	rsb	r3, r3, #7
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	bf28      	it	cs
 8001ee6:	2304      	movcs	r3, #4
 8001ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3304      	adds	r3, #4
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d902      	bls.n	8001ef8 <NVIC_EncodePriority+0x30>
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3b03      	subs	r3, #3
 8001ef6:	e000      	b.n	8001efa <NVIC_EncodePriority+0x32>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	f04f 32ff 	mov.w	r2, #4294967295
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	43d9      	mvns	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	4313      	orrs	r3, r2
         );
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3724      	adds	r7, #36	; 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f40:	d301      	bcc.n	8001f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f42:	2301      	movs	r3, #1
 8001f44:	e00f      	b.n	8001f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f46:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <SysTick_Config+0x40>)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f4e:	210f      	movs	r1, #15
 8001f50:	f04f 30ff 	mov.w	r0, #4294967295
 8001f54:	f7ff ff8e 	bl	8001e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <SysTick_Config+0x40>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f5e:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <SysTick_Config+0x40>)
 8001f60:	2207      	movs	r2, #7
 8001f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	e000e010 	.word	0xe000e010

08001f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ff47 	bl	8001e10 <__NVIC_SetPriorityGrouping>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	4603      	mov	r3, r0
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f9c:	f7ff ff5c 	bl	8001e58 <__NVIC_GetPriorityGrouping>
 8001fa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	6978      	ldr	r0, [r7, #20]
 8001fa8:	f7ff ff8e 	bl	8001ec8 <NVIC_EncodePriority>
 8001fac:	4602      	mov	r2, r0
 8001fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff5d 	bl	8001e74 <__NVIC_SetPriority>
}
 8001fba:	bf00      	nop
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ffb0 	bl	8001f30 <SysTick_Config>
 8001fd0:	4603      	mov	r3, r0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fea:	e154      	b.n	8002296 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 8146 	beq.w	8002290 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	2b01      	cmp	r3, #1
 800200e:	d005      	beq.n	800201c <HAL_GPIO_Init+0x40>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d130      	bne.n	800207e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	2203      	movs	r2, #3
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002052:	2201      	movs	r2, #1
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	091b      	lsrs	r3, r3, #4
 8002068:	f003 0201 	and.w	r2, r3, #1
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b03      	cmp	r3, #3
 8002088:	d017      	beq.n	80020ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	2203      	movs	r2, #3
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d123      	bne.n	800210e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	08da      	lsrs	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3208      	adds	r2, #8
 80020ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	220f      	movs	r2, #15
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4013      	ands	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	691a      	ldr	r2, [r3, #16]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	08da      	lsrs	r2, r3, #3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3208      	adds	r2, #8
 8002108:	6939      	ldr	r1, [r7, #16]
 800210a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	2203      	movs	r2, #3
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4013      	ands	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 0203 	and.w	r2, r3, #3
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 80a0 	beq.w	8002290 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002150:	4b58      	ldr	r3, [pc, #352]	; (80022b4 <HAL_GPIO_Init+0x2d8>)
 8002152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002154:	4a57      	ldr	r2, [pc, #348]	; (80022b4 <HAL_GPIO_Init+0x2d8>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6613      	str	r3, [r2, #96]	; 0x60
 800215c:	4b55      	ldr	r3, [pc, #340]	; (80022b4 <HAL_GPIO_Init+0x2d8>)
 800215e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002168:	4a53      	ldr	r2, [pc, #332]	; (80022b8 <HAL_GPIO_Init+0x2dc>)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	089b      	lsrs	r3, r3, #2
 800216e:	3302      	adds	r3, #2
 8002170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002174:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	220f      	movs	r2, #15
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002192:	d019      	beq.n	80021c8 <HAL_GPIO_Init+0x1ec>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a49      	ldr	r2, [pc, #292]	; (80022bc <HAL_GPIO_Init+0x2e0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d013      	beq.n	80021c4 <HAL_GPIO_Init+0x1e8>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a48      	ldr	r2, [pc, #288]	; (80022c0 <HAL_GPIO_Init+0x2e4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d00d      	beq.n	80021c0 <HAL_GPIO_Init+0x1e4>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a47      	ldr	r2, [pc, #284]	; (80022c4 <HAL_GPIO_Init+0x2e8>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d007      	beq.n	80021bc <HAL_GPIO_Init+0x1e0>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a46      	ldr	r2, [pc, #280]	; (80022c8 <HAL_GPIO_Init+0x2ec>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d101      	bne.n	80021b8 <HAL_GPIO_Init+0x1dc>
 80021b4:	2304      	movs	r3, #4
 80021b6:	e008      	b.n	80021ca <HAL_GPIO_Init+0x1ee>
 80021b8:	2307      	movs	r3, #7
 80021ba:	e006      	b.n	80021ca <HAL_GPIO_Init+0x1ee>
 80021bc:	2303      	movs	r3, #3
 80021be:	e004      	b.n	80021ca <HAL_GPIO_Init+0x1ee>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e002      	b.n	80021ca <HAL_GPIO_Init+0x1ee>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <HAL_GPIO_Init+0x1ee>
 80021c8:	2300      	movs	r3, #0
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	f002 0203 	and.w	r2, r2, #3
 80021d0:	0092      	lsls	r2, r2, #2
 80021d2:	4093      	lsls	r3, r2
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021da:	4937      	ldr	r1, [pc, #220]	; (80022b8 <HAL_GPIO_Init+0x2dc>)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021e8:	4b38      	ldr	r3, [pc, #224]	; (80022cc <HAL_GPIO_Init+0x2f0>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4013      	ands	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800220c:	4a2f      	ldr	r2, [pc, #188]	; (80022cc <HAL_GPIO_Init+0x2f0>)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002212:	4b2e      	ldr	r3, [pc, #184]	; (80022cc <HAL_GPIO_Init+0x2f0>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	43db      	mvns	r3, r3
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4013      	ands	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4313      	orrs	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002236:	4a25      	ldr	r2, [pc, #148]	; (80022cc <HAL_GPIO_Init+0x2f0>)
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800223c:	4b23      	ldr	r3, [pc, #140]	; (80022cc <HAL_GPIO_Init+0x2f0>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	43db      	mvns	r3, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002260:	4a1a      	ldr	r2, [pc, #104]	; (80022cc <HAL_GPIO_Init+0x2f0>)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002266:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_GPIO_Init+0x2f0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	43db      	mvns	r3, r3
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4013      	ands	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4313      	orrs	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800228a:	4a10      	ldr	r2, [pc, #64]	; (80022cc <HAL_GPIO_Init+0x2f0>)
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	3301      	adds	r3, #1
 8002294:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f47f aea3 	bne.w	8001fec <HAL_GPIO_Init+0x10>
  }
}
 80022a6:	bf00      	nop
 80022a8:	bf00      	nop
 80022aa:	371c      	adds	r7, #28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40010000 	.word	0x40010000
 80022bc:	48000400 	.word	0x48000400
 80022c0:	48000800 	.word	0x48000800
 80022c4:	48000c00 	.word	0x48000c00
 80022c8:	48001000 	.word	0x48001000
 80022cc:	40010400 	.word	0x40010400

080022d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	807b      	strh	r3, [r7, #2]
 80022dc:	4613      	mov	r3, r2
 80022de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022e0:	787b      	ldrb	r3, [r7, #1]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022e6:	887a      	ldrh	r2, [r7, #2]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022ec:	e002      	b.n	80022f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022ee:	887a      	ldrh	r2, [r7, #2]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <HAL_PWREx_GetVoltageRange+0x18>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40007000 	.word	0x40007000

0800231c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800232a:	d130      	bne.n	800238e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800232c:	4b23      	ldr	r3, [pc, #140]	; (80023bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002338:	d038      	beq.n	80023ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800233a:	4b20      	ldr	r3, [pc, #128]	; (80023bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002342:	4a1e      	ldr	r2, [pc, #120]	; (80023bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002344:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002348:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800234a:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2232      	movs	r2, #50	; 0x32
 8002350:	fb02 f303 	mul.w	r3, r2, r3
 8002354:	4a1b      	ldr	r2, [pc, #108]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	0c9b      	lsrs	r3, r3, #18
 800235c:	3301      	adds	r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002360:	e002      	b.n	8002368 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	3b01      	subs	r3, #1
 8002366:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002368:	4b14      	ldr	r3, [pc, #80]	; (80023bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002374:	d102      	bne.n	800237c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f2      	bne.n	8002362 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800237c:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002388:	d110      	bne.n	80023ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e00f      	b.n	80023ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800238e:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800239a:	d007      	beq.n	80023ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023a4:	4a05      	ldr	r2, [pc, #20]	; (80023bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40007000 	.word	0x40007000
 80023c0:	20000000 	.word	0x20000000
 80023c4:	431bde83 	.word	0x431bde83

080023c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d102      	bne.n	80023dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	f000 bc02 	b.w	8002be0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023dc:	4b96      	ldr	r3, [pc, #600]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023e6:	4b94      	ldr	r3, [pc, #592]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0310 	and.w	r3, r3, #16
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 80e4 	beq.w	80025c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d007      	beq.n	8002414 <HAL_RCC_OscConfig+0x4c>
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	2b0c      	cmp	r3, #12
 8002408:	f040 808b 	bne.w	8002522 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	2b01      	cmp	r3, #1
 8002410:	f040 8087 	bne.w	8002522 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002414:	4b88      	ldr	r3, [pc, #544]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <HAL_RCC_OscConfig+0x64>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e3d9      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1a      	ldr	r2, [r3, #32]
 8002430:	4b81      	ldr	r3, [pc, #516]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d004      	beq.n	8002446 <HAL_RCC_OscConfig+0x7e>
 800243c:	4b7e      	ldr	r3, [pc, #504]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002444:	e005      	b.n	8002452 <HAL_RCC_OscConfig+0x8a>
 8002446:	4b7c      	ldr	r3, [pc, #496]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002452:	4293      	cmp	r3, r2
 8002454:	d223      	bcs.n	800249e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	4618      	mov	r0, r3
 800245c:	f000 fd8c 	bl	8002f78 <RCC_SetFlashLatencyFromMSIRange>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e3ba      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800246a:	4b73      	ldr	r3, [pc, #460]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a72      	ldr	r2, [pc, #456]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002470:	f043 0308 	orr.w	r3, r3, #8
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b70      	ldr	r3, [pc, #448]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	496d      	ldr	r1, [pc, #436]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002484:	4313      	orrs	r3, r2
 8002486:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002488:	4b6b      	ldr	r3, [pc, #428]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	021b      	lsls	r3, r3, #8
 8002496:	4968      	ldr	r1, [pc, #416]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002498:	4313      	orrs	r3, r2
 800249a:	604b      	str	r3, [r1, #4]
 800249c:	e025      	b.n	80024ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800249e:	4b66      	ldr	r3, [pc, #408]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a65      	ldr	r2, [pc, #404]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 80024a4:	f043 0308 	orr.w	r3, r3, #8
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	4b63      	ldr	r3, [pc, #396]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	4960      	ldr	r1, [pc, #384]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024bc:	4b5e      	ldr	r3, [pc, #376]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	021b      	lsls	r3, r3, #8
 80024ca:	495b      	ldr	r1, [pc, #364]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d109      	bne.n	80024ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 fd4c 	bl	8002f78 <RCC_SetFlashLatencyFromMSIRange>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e37a      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024ea:	f000 fc81 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 80024ee:	4602      	mov	r2, r0
 80024f0:	4b51      	ldr	r3, [pc, #324]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	4950      	ldr	r1, [pc, #320]	; (800263c <HAL_RCC_OscConfig+0x274>)
 80024fc:	5ccb      	ldrb	r3, [r1, r3]
 80024fe:	f003 031f 	and.w	r3, r3, #31
 8002502:	fa22 f303 	lsr.w	r3, r2, r3
 8002506:	4a4e      	ldr	r2, [pc, #312]	; (8002640 <HAL_RCC_OscConfig+0x278>)
 8002508:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800250a:	4b4e      	ldr	r3, [pc, #312]	; (8002644 <HAL_RCC_OscConfig+0x27c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fbfe 	bl	8001d10 <HAL_InitTick>
 8002514:	4603      	mov	r3, r0
 8002516:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d052      	beq.n	80025c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	e35e      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d032      	beq.n	8002590 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800252a:	4b43      	ldr	r3, [pc, #268]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a42      	ldr	r2, [pc, #264]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002536:	f7ff fc3b 	bl	8001db0 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800253e:	f7ff fc37 	bl	8001db0 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e347      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002550:	4b39      	ldr	r3, [pc, #228]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800255c:	4b36      	ldr	r3, [pc, #216]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a35      	ldr	r2, [pc, #212]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002562:	f043 0308 	orr.w	r3, r3, #8
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	4b33      	ldr	r3, [pc, #204]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4930      	ldr	r1, [pc, #192]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800257a:	4b2f      	ldr	r3, [pc, #188]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	492b      	ldr	r1, [pc, #172]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
 800258e:	e01a      	b.n	80025c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002590:	4b29      	ldr	r3, [pc, #164]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a28      	ldr	r2, [pc, #160]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002596:	f023 0301 	bic.w	r3, r3, #1
 800259a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800259c:	f7ff fc08 	bl	8001db0 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025a4:	f7ff fc04 	bl	8001db0 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e314      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025b6:	4b20      	ldr	r3, [pc, #128]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x1dc>
 80025c2:	e000      	b.n	80025c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d073      	beq.n	80026ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d005      	beq.n	80025e4 <HAL_RCC_OscConfig+0x21c>
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2b0c      	cmp	r3, #12
 80025dc:	d10e      	bne.n	80025fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d10b      	bne.n	80025fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e4:	4b14      	ldr	r3, [pc, #80]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d063      	beq.n	80026b8 <HAL_RCC_OscConfig+0x2f0>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d15f      	bne.n	80026b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e2f1      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002604:	d106      	bne.n	8002614 <HAL_RCC_OscConfig+0x24c>
 8002606:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a0b      	ldr	r2, [pc, #44]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 800260c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	e025      	b.n	8002660 <HAL_RCC_OscConfig+0x298>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800261c:	d114      	bne.n	8002648 <HAL_RCC_OscConfig+0x280>
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a05      	ldr	r2, [pc, #20]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	4b03      	ldr	r3, [pc, #12]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a02      	ldr	r2, [pc, #8]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e013      	b.n	8002660 <HAL_RCC_OscConfig+0x298>
 8002638:	40021000 	.word	0x40021000
 800263c:	08007d74 	.word	0x08007d74
 8002640:	20000000 	.word	0x20000000
 8002644:	20000004 	.word	0x20000004
 8002648:	4ba0      	ldr	r3, [pc, #640]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a9f      	ldr	r2, [pc, #636]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 800264e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b9d      	ldr	r3, [pc, #628]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a9c      	ldr	r2, [pc, #624]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 800265a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800265e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d013      	beq.n	8002690 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7ff fba2 	bl	8001db0 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002670:	f7ff fb9e 	bl	8001db0 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	; 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e2ae      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002682:	4b92      	ldr	r3, [pc, #584]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x2a8>
 800268e:	e014      	b.n	80026ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002690:	f7ff fb8e 	bl	8001db0 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002698:	f7ff fb8a 	bl	8001db0 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b64      	cmp	r3, #100	; 0x64
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e29a      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026aa:	4b88      	ldr	r3, [pc, #544]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x2d0>
 80026b6:	e000      	b.n	80026ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d060      	beq.n	8002788 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_OscConfig+0x310>
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	2b0c      	cmp	r3, #12
 80026d0:	d119      	bne.n	8002706 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d116      	bne.n	8002706 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026d8:	4b7c      	ldr	r3, [pc, #496]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_OscConfig+0x328>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e277      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f0:	4b76      	ldr	r3, [pc, #472]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	061b      	lsls	r3, r3, #24
 80026fe:	4973      	ldr	r1, [pc, #460]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002704:	e040      	b.n	8002788 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d023      	beq.n	8002756 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800270e:	4b6f      	ldr	r3, [pc, #444]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a6e      	ldr	r2, [pc, #440]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271a:	f7ff fb49 	bl	8001db0 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002722:	f7ff fb45 	bl	8001db0 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e255      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002734:	4b65      	ldr	r3, [pc, #404]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002740:	4b62      	ldr	r3, [pc, #392]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	061b      	lsls	r3, r3, #24
 800274e:	495f      	ldr	r1, [pc, #380]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]
 8002754:	e018      	b.n	8002788 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002756:	4b5d      	ldr	r3, [pc, #372]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a5c      	ldr	r2, [pc, #368]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 800275c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002762:	f7ff fb25 	bl	8001db0 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800276a:	f7ff fb21 	bl	8001db0 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e231      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800277c:	4b53      	ldr	r3, [pc, #332]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f0      	bne.n	800276a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d03c      	beq.n	800280e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d01c      	beq.n	80027d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800279c:	4b4b      	ldr	r3, [pc, #300]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 800279e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a2:	4a4a      	ldr	r2, [pc, #296]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ac:	f7ff fb00 	bl	8001db0 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b4:	f7ff fafc 	bl	8001db0 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e20c      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027c6:	4b41      	ldr	r3, [pc, #260]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 80027c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0ef      	beq.n	80027b4 <HAL_RCC_OscConfig+0x3ec>
 80027d4:	e01b      	b.n	800280e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027d6:	4b3d      	ldr	r3, [pc, #244]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 80027d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027dc:	4a3b      	ldr	r2, [pc, #236]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 80027de:	f023 0301 	bic.w	r3, r3, #1
 80027e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e6:	f7ff fae3 	bl	8001db0 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ee:	f7ff fadf 	bl	8001db0 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e1ef      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002800:	4b32      	ldr	r3, [pc, #200]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1ef      	bne.n	80027ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 80a6 	beq.w	8002968 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800281c:	2300      	movs	r3, #0
 800281e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002820:	4b2a      	ldr	r3, [pc, #168]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10d      	bne.n	8002848 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800282c:	4b27      	ldr	r3, [pc, #156]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 800282e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002830:	4a26      	ldr	r2, [pc, #152]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002836:	6593      	str	r3, [r2, #88]	; 0x58
 8002838:	4b24      	ldr	r3, [pc, #144]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 800283a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002844:	2301      	movs	r3, #1
 8002846:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002848:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <HAL_RCC_OscConfig+0x508>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002850:	2b00      	cmp	r3, #0
 8002852:	d118      	bne.n	8002886 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002854:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <HAL_RCC_OscConfig+0x508>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <HAL_RCC_OscConfig+0x508>)
 800285a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002860:	f7ff faa6 	bl	8001db0 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002868:	f7ff faa2 	bl	8001db0 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e1b2      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <HAL_RCC_OscConfig+0x508>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d108      	bne.n	80028a0 <HAL_RCC_OscConfig+0x4d8>
 800288e:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002894:	4a0d      	ldr	r2, [pc, #52]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800289e:	e029      	b.n	80028f4 <HAL_RCC_OscConfig+0x52c>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b05      	cmp	r3, #5
 80028a6:	d115      	bne.n	80028d4 <HAL_RCC_OscConfig+0x50c>
 80028a8:	4b08      	ldr	r3, [pc, #32]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 80028aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ae:	4a07      	ldr	r2, [pc, #28]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 80028b0:	f043 0304 	orr.w	r3, r3, #4
 80028b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028b8:	4b04      	ldr	r3, [pc, #16]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 80028ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028be:	4a03      	ldr	r2, [pc, #12]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028c8:	e014      	b.n	80028f4 <HAL_RCC_OscConfig+0x52c>
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40007000 	.word	0x40007000
 80028d4:	4b9a      	ldr	r3, [pc, #616]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028da:	4a99      	ldr	r2, [pc, #612]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028e4:	4b96      	ldr	r3, [pc, #600]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ea:	4a95      	ldr	r2, [pc, #596]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 80028ec:	f023 0304 	bic.w	r3, r3, #4
 80028f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d016      	beq.n	800292a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fc:	f7ff fa58 	bl	8001db0 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002902:	e00a      	b.n	800291a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002904:	f7ff fa54 	bl	8001db0 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e162      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800291a:	4b89      	ldr	r3, [pc, #548]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 800291c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0ed      	beq.n	8002904 <HAL_RCC_OscConfig+0x53c>
 8002928:	e015      	b.n	8002956 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292a:	f7ff fa41 	bl	8001db0 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002930:	e00a      	b.n	8002948 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002932:	f7ff fa3d 	bl	8001db0 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002940:	4293      	cmp	r3, r2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e14b      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002948:	4b7d      	ldr	r3, [pc, #500]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1ed      	bne.n	8002932 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002956:	7ffb      	ldrb	r3, [r7, #31]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d105      	bne.n	8002968 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800295c:	4b78      	ldr	r3, [pc, #480]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 800295e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002960:	4a77      	ldr	r2, [pc, #476]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 8002962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002966:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b00      	cmp	r3, #0
 8002972:	d03c      	beq.n	80029ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	2b00      	cmp	r3, #0
 800297a:	d01c      	beq.n	80029b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800297c:	4b70      	ldr	r3, [pc, #448]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 800297e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002982:	4a6f      	ldr	r2, [pc, #444]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298c:	f7ff fa10 	bl	8001db0 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002994:	f7ff fa0c 	bl	8001db0 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e11c      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029a6:	4b66      	ldr	r3, [pc, #408]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 80029a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0ef      	beq.n	8002994 <HAL_RCC_OscConfig+0x5cc>
 80029b4:	e01b      	b.n	80029ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029b6:	4b62      	ldr	r3, [pc, #392]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 80029b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029bc:	4a60      	ldr	r2, [pc, #384]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 80029be:	f023 0301 	bic.w	r3, r3, #1
 80029c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c6:	f7ff f9f3 	bl	8001db0 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029ce:	f7ff f9ef 	bl	8001db0 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e0ff      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029e0:	4b57      	ldr	r3, [pc, #348]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 80029e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1ef      	bne.n	80029ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 80f3 	beq.w	8002bde <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	f040 80c9 	bne.w	8002b94 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a02:	4b4f      	ldr	r3, [pc, #316]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f003 0203 	and.w	r2, r3, #3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d12c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	3b01      	subs	r3, #1
 8002a22:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d123      	bne.n	8002a70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a32:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d11b      	bne.n	8002a70 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a42:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d113      	bne.n	8002a70 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a52:	085b      	lsrs	r3, r3, #1
 8002a54:	3b01      	subs	r3, #1
 8002a56:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d109      	bne.n	8002a70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	085b      	lsrs	r3, r3, #1
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d06b      	beq.n	8002b48 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b0c      	cmp	r3, #12
 8002a74:	d062      	beq.n	8002b3c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a76:	4b32      	ldr	r3, [pc, #200]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e0ac      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a86:	4b2e      	ldr	r3, [pc, #184]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a2d      	ldr	r2, [pc, #180]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 8002a8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a90:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a92:	f7ff f98d 	bl	8001db0 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9a:	f7ff f989 	bl	8001db0 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e099      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aac:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1f0      	bne.n	8002a9a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ab8:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <HAL_RCC_OscConfig+0x77c>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ac8:	3a01      	subs	r2, #1
 8002aca:	0112      	lsls	r2, r2, #4
 8002acc:	4311      	orrs	r1, r2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ad2:	0212      	lsls	r2, r2, #8
 8002ad4:	4311      	orrs	r1, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ada:	0852      	lsrs	r2, r2, #1
 8002adc:	3a01      	subs	r2, #1
 8002ade:	0552      	lsls	r2, r2, #21
 8002ae0:	4311      	orrs	r1, r2
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ae6:	0852      	lsrs	r2, r2, #1
 8002ae8:	3a01      	subs	r2, #1
 8002aea:	0652      	lsls	r2, r2, #25
 8002aec:	4311      	orrs	r1, r2
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002af2:	06d2      	lsls	r2, r2, #27
 8002af4:	430a      	orrs	r2, r1
 8002af6:	4912      	ldr	r1, [pc, #72]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002afc:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a0f      	ldr	r2, [pc, #60]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 8002b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b08:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4a0c      	ldr	r2, [pc, #48]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 8002b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b14:	f7ff f94c 	bl	8001db0 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7ff f948 	bl	8001db0 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e058      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b2e:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <HAL_RCC_OscConfig+0x778>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b3a:	e050      	b.n	8002bde <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e04f      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
 8002b40:	40021000 	.word	0x40021000
 8002b44:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b48:	4b27      	ldr	r3, [pc, #156]	; (8002be8 <HAL_RCC_OscConfig+0x820>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d144      	bne.n	8002bde <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b54:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <HAL_RCC_OscConfig+0x820>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a23      	ldr	r2, [pc, #140]	; (8002be8 <HAL_RCC_OscConfig+0x820>)
 8002b5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b60:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <HAL_RCC_OscConfig+0x820>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4a20      	ldr	r2, [pc, #128]	; (8002be8 <HAL_RCC_OscConfig+0x820>)
 8002b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b6c:	f7ff f920 	bl	8001db0 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b74:	f7ff f91c 	bl	8001db0 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e02c      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b86:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <HAL_RCC_OscConfig+0x820>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x7ac>
 8002b92:	e024      	b.n	8002bde <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2b0c      	cmp	r3, #12
 8002b98:	d01f      	beq.n	8002bda <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9a:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <HAL_RCC_OscConfig+0x820>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <HAL_RCC_OscConfig+0x820>)
 8002ba0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba6:	f7ff f903 	bl	8001db0 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bae:	f7ff f8ff 	bl	8001db0 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e00f      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc0:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <HAL_RCC_OscConfig+0x820>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1f0      	bne.n	8002bae <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <HAL_RCC_OscConfig+0x820>)
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	4905      	ldr	r1, [pc, #20]	; (8002be8 <HAL_RCC_OscConfig+0x820>)
 8002bd2:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_RCC_OscConfig+0x824>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	60cb      	str	r3, [r1, #12]
 8002bd8:	e001      	b.n	8002bde <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3720      	adds	r7, #32
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40021000 	.word	0x40021000
 8002bec:	feeefffc 	.word	0xfeeefffc

08002bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0e7      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c04:	4b75      	ldr	r3, [pc, #468]	; (8002ddc <HAL_RCC_ClockConfig+0x1ec>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d910      	bls.n	8002c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c12:	4b72      	ldr	r3, [pc, #456]	; (8002ddc <HAL_RCC_ClockConfig+0x1ec>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 0207 	bic.w	r2, r3, #7
 8002c1a:	4970      	ldr	r1, [pc, #448]	; (8002ddc <HAL_RCC_ClockConfig+0x1ec>)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c22:	4b6e      	ldr	r3, [pc, #440]	; (8002ddc <HAL_RCC_ClockConfig+0x1ec>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0cf      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d010      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	4b66      	ldr	r3, [pc, #408]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d908      	bls.n	8002c62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c50:	4b63      	ldr	r3, [pc, #396]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	4960      	ldr	r1, [pc, #384]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d04c      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d107      	bne.n	8002c86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c76:	4b5a      	ldr	r3, [pc, #360]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d121      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e0a6      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d107      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c8e:	4b54      	ldr	r3, [pc, #336]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d115      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e09a      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d107      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ca6:	4b4e      	ldr	r3, [pc, #312]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d109      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e08e      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cb6:	4b4a      	ldr	r3, [pc, #296]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e086      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cc6:	4b46      	ldr	r3, [pc, #280]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f023 0203 	bic.w	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	4943      	ldr	r1, [pc, #268]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd8:	f7ff f86a 	bl	8001db0 <HAL_GetTick>
 8002cdc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cde:	e00a      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce0:	f7ff f866 	bl	8001db0 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e06e      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf6:	4b3a      	ldr	r3, [pc, #232]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 020c 	and.w	r2, r3, #12
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d1eb      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d010      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	4b31      	ldr	r3, [pc, #196]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d208      	bcs.n	8002d36 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d24:	4b2e      	ldr	r3, [pc, #184]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	492b      	ldr	r1, [pc, #172]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d36:	4b29      	ldr	r3, [pc, #164]	; (8002ddc <HAL_RCC_ClockConfig+0x1ec>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d210      	bcs.n	8002d66 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d44:	4b25      	ldr	r3, [pc, #148]	; (8002ddc <HAL_RCC_ClockConfig+0x1ec>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f023 0207 	bic.w	r2, r3, #7
 8002d4c:	4923      	ldr	r1, [pc, #140]	; (8002ddc <HAL_RCC_ClockConfig+0x1ec>)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d54:	4b21      	ldr	r3, [pc, #132]	; (8002ddc <HAL_RCC_ClockConfig+0x1ec>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d001      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e036      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d008      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d72:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	4918      	ldr	r1, [pc, #96]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d009      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d90:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	4910      	ldr	r1, [pc, #64]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002da4:	f000 f824 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 8002da8:	4602      	mov	r2, r0
 8002daa:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	091b      	lsrs	r3, r3, #4
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	490b      	ldr	r1, [pc, #44]	; (8002de4 <HAL_RCC_ClockConfig+0x1f4>)
 8002db6:	5ccb      	ldrb	r3, [r1, r3]
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc0:	4a09      	ldr	r2, [pc, #36]	; (8002de8 <HAL_RCC_ClockConfig+0x1f8>)
 8002dc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dc4:	4b09      	ldr	r3, [pc, #36]	; (8002dec <HAL_RCC_ClockConfig+0x1fc>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fe ffa1 	bl	8001d10 <HAL_InitTick>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002dd2:	7afb      	ldrb	r3, [r7, #11]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40022000 	.word	0x40022000
 8002de0:	40021000 	.word	0x40021000
 8002de4:	08007d74 	.word	0x08007d74
 8002de8:	20000000 	.word	0x20000000
 8002dec:	20000004 	.word	0x20000004

08002df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b089      	sub	sp, #36	; 0x24
 8002df4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dfe:	4b3e      	ldr	r3, [pc, #248]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 030c 	and.w	r3, r3, #12
 8002e06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e08:	4b3b      	ldr	r3, [pc, #236]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0x34>
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	2b0c      	cmp	r3, #12
 8002e1c:	d121      	bne.n	8002e62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d11e      	bne.n	8002e62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e24:	4b34      	ldr	r3, [pc, #208]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d107      	bne.n	8002e40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e30:	4b31      	ldr	r3, [pc, #196]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e36:	0a1b      	lsrs	r3, r3, #8
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	e005      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e40:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e4c:	4a2b      	ldr	r2, [pc, #172]	; (8002efc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10d      	bne.n	8002e78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e60:	e00a      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d102      	bne.n	8002e6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e68:	4b25      	ldr	r3, [pc, #148]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e6a:	61bb      	str	r3, [r7, #24]
 8002e6c:	e004      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d101      	bne.n	8002e78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e74:	4b23      	ldr	r3, [pc, #140]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	2b0c      	cmp	r3, #12
 8002e7c:	d134      	bne.n	8002ee8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d003      	beq.n	8002e96 <HAL_RCC_GetSysClockFreq+0xa6>
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d003      	beq.n	8002e9c <HAL_RCC_GetSysClockFreq+0xac>
 8002e94:	e005      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e96:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e98:	617b      	str	r3, [r7, #20]
      break;
 8002e9a:	e005      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e9c:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e9e:	617b      	str	r3, [r7, #20]
      break;
 8002ea0:	e002      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	617b      	str	r3, [r7, #20]
      break;
 8002ea6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ea8:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	091b      	lsrs	r3, r3, #4
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	0a1b      	lsrs	r3, r3, #8
 8002ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	fb03 f202 	mul.w	r2, r3, r2
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ecc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	0e5b      	lsrs	r3, r3, #25
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	3301      	adds	r3, #1
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ee8:	69bb      	ldr	r3, [r7, #24]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3724      	adds	r7, #36	; 0x24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	08007d8c 	.word	0x08007d8c
 8002f00:	00f42400 	.word	0x00f42400
 8002f04:	007a1200 	.word	0x007a1200

08002f08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f0c:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	20000000 	.word	0x20000000

08002f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f24:	f7ff fff0 	bl	8002f08 <HAL_RCC_GetHCLKFreq>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	0a1b      	lsrs	r3, r3, #8
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	4904      	ldr	r1, [pc, #16]	; (8002f48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f36:	5ccb      	ldrb	r3, [r1, r3]
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40021000 	.word	0x40021000
 8002f48:	08007d84 	.word	0x08007d84

08002f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f50:	f7ff ffda 	bl	8002f08 <HAL_RCC_GetHCLKFreq>
 8002f54:	4602      	mov	r2, r0
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	0adb      	lsrs	r3, r3, #11
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	4904      	ldr	r1, [pc, #16]	; (8002f74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f62:	5ccb      	ldrb	r3, [r1, r3]
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000
 8002f74:	08007d84 	.word	0x08007d84

08002f78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f80:	2300      	movs	r3, #0
 8002f82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f84:	4b2a      	ldr	r3, [pc, #168]	; (8003030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f90:	f7ff f9b6 	bl	8002300 <HAL_PWREx_GetVoltageRange>
 8002f94:	6178      	str	r0, [r7, #20]
 8002f96:	e014      	b.n	8002fc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f98:	4b25      	ldr	r3, [pc, #148]	; (8003030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9c:	4a24      	ldr	r2, [pc, #144]	; (8003030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	6593      	str	r3, [r2, #88]	; 0x58
 8002fa4:	4b22      	ldr	r3, [pc, #136]	; (8003030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fb0:	f7ff f9a6 	bl	8002300 <HAL_PWREx_GetVoltageRange>
 8002fb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002fb6:	4b1e      	ldr	r3, [pc, #120]	; (8003030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fba:	4a1d      	ldr	r2, [pc, #116]	; (8003030 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc8:	d10b      	bne.n	8002fe2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b80      	cmp	r3, #128	; 0x80
 8002fce:	d919      	bls.n	8003004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2ba0      	cmp	r3, #160	; 0xa0
 8002fd4:	d902      	bls.n	8002fdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	e013      	b.n	8003004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fdc:	2301      	movs	r3, #1
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	e010      	b.n	8003004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b80      	cmp	r3, #128	; 0x80
 8002fe6:	d902      	bls.n	8002fee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fe8:	2303      	movs	r3, #3
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	e00a      	b.n	8003004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b80      	cmp	r3, #128	; 0x80
 8002ff2:	d102      	bne.n	8002ffa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	e004      	b.n	8003004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b70      	cmp	r3, #112	; 0x70
 8002ffe:	d101      	bne.n	8003004 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003000:	2301      	movs	r3, #1
 8003002:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003004:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f023 0207 	bic.w	r2, r3, #7
 800300c:	4909      	ldr	r1, [pc, #36]	; (8003034 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003014:	4b07      	ldr	r3, [pc, #28]	; (8003034 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	429a      	cmp	r2, r3
 8003020:	d001      	beq.n	8003026 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40021000 	.word	0x40021000
 8003034:	40022000 	.word	0x40022000

08003038 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003040:	2300      	movs	r3, #0
 8003042:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003044:	2300      	movs	r3, #0
 8003046:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003050:	2b00      	cmp	r3, #0
 8003052:	d031      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003058:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800305c:	d01a      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800305e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003062:	d814      	bhi.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003064:	2b00      	cmp	r3, #0
 8003066:	d009      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003068:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800306c:	d10f      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800306e:	4b5d      	ldr	r3, [pc, #372]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	4a5c      	ldr	r2, [pc, #368]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003078:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800307a:	e00c      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3304      	adds	r3, #4
 8003080:	2100      	movs	r1, #0
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fa22 	bl	80034cc <RCCEx_PLLSAI1_Config>
 8003088:	4603      	mov	r3, r0
 800308a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800308c:	e003      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	74fb      	strb	r3, [r7, #19]
      break;
 8003092:	e000      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003096:	7cfb      	ldrb	r3, [r7, #19]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10b      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800309c:	4b51      	ldr	r3, [pc, #324]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	494e      	ldr	r1, [pc, #312]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030b2:	e001      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b4:	7cfb      	ldrb	r3, [r7, #19]
 80030b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 809e 	beq.w	8003202 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c6:	2300      	movs	r3, #0
 80030c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030ca:	4b46      	ldr	r3, [pc, #280]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80030da:	2300      	movs	r3, #0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00d      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e0:	4b40      	ldr	r3, [pc, #256]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e4:	4a3f      	ldr	r2, [pc, #252]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ea:	6593      	str	r3, [r2, #88]	; 0x58
 80030ec:	4b3d      	ldr	r3, [pc, #244]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f8:	2301      	movs	r3, #1
 80030fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030fc:	4b3a      	ldr	r3, [pc, #232]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a39      	ldr	r2, [pc, #228]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003106:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003108:	f7fe fe52 	bl	8001db0 <HAL_GetTick>
 800310c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800310e:	e009      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003110:	f7fe fe4e 	bl	8001db0 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d902      	bls.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	74fb      	strb	r3, [r7, #19]
        break;
 8003122:	e005      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003124:	4b30      	ldr	r3, [pc, #192]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0ef      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003130:	7cfb      	ldrb	r3, [r7, #19]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d15a      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003136:	4b2b      	ldr	r3, [pc, #172]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003140:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d01e      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	429a      	cmp	r2, r3
 8003150:	d019      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003152:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800315c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800315e:	4b21      	ldr	r3, [pc, #132]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003164:	4a1f      	ldr	r2, [pc, #124]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800316a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800316e:	4b1d      	ldr	r3, [pc, #116]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003174:	4a1b      	ldr	r2, [pc, #108]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800317e:	4a19      	ldr	r2, [pc, #100]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d016      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003190:	f7fe fe0e 	bl	8001db0 <HAL_GetTick>
 8003194:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003196:	e00b      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003198:	f7fe fe0a 	bl	8001db0 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d902      	bls.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	74fb      	strb	r3, [r7, #19]
            break;
 80031ae:	e006      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031b0:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0ec      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80031be:	7cfb      	ldrb	r3, [r7, #19]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10b      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031c4:	4b07      	ldr	r3, [pc, #28]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d2:	4904      	ldr	r1, [pc, #16]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031da:	e009      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031dc:	7cfb      	ldrb	r3, [r7, #19]
 80031de:	74bb      	strb	r3, [r7, #18]
 80031e0:	e006      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ec:	7cfb      	ldrb	r3, [r7, #19]
 80031ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031f0:	7c7b      	ldrb	r3, [r7, #17]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d105      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f6:	4b8d      	ldr	r3, [pc, #564]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fa:	4a8c      	ldr	r2, [pc, #560]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80031fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003200:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800320e:	4b87      	ldr	r3, [pc, #540]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003214:	f023 0203 	bic.w	r2, r3, #3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	4983      	ldr	r1, [pc, #524]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800321e:	4313      	orrs	r3, r2
 8003220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003230:	4b7e      	ldr	r3, [pc, #504]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003236:	f023 020c 	bic.w	r2, r3, #12
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	497b      	ldr	r1, [pc, #492]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003252:	4b76      	ldr	r3, [pc, #472]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003258:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003260:	4972      	ldr	r1, [pc, #456]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0320 	and.w	r3, r3, #32
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003274:	4b6d      	ldr	r3, [pc, #436]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	496a      	ldr	r1, [pc, #424]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003296:	4b65      	ldr	r3, [pc, #404]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a4:	4961      	ldr	r1, [pc, #388]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032b8:	4b5c      	ldr	r3, [pc, #368]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80032ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	4959      	ldr	r1, [pc, #356]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032da:	4b54      	ldr	r3, [pc, #336]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	4950      	ldr	r1, [pc, #320]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032fc:	4b4b      	ldr	r3, [pc, #300]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003302:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330a:	4948      	ldr	r1, [pc, #288]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800331e:	4b43      	ldr	r3, [pc, #268]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003324:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	493f      	ldr	r1, [pc, #252]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d028      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003340:	4b3a      	ldr	r3, [pc, #232]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003346:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800334e:	4937      	ldr	r1, [pc, #220]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800335a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800335e:	d106      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003360:	4b32      	ldr	r3, [pc, #200]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	4a31      	ldr	r2, [pc, #196]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800336a:	60d3      	str	r3, [r2, #12]
 800336c:	e011      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003372:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003376:	d10c      	bne.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3304      	adds	r3, #4
 800337c:	2101      	movs	r1, #1
 800337e:	4618      	mov	r0, r3
 8003380:	f000 f8a4 	bl	80034cc <RCCEx_PLLSAI1_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003388:	7cfb      	ldrb	r3, [r7, #19]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800338e:	7cfb      	ldrb	r3, [r7, #19]
 8003390:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d028      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800339e:	4b23      	ldr	r3, [pc, #140]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ac:	491f      	ldr	r1, [pc, #124]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033bc:	d106      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033be:	4b1b      	ldr	r3, [pc, #108]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	4a1a      	ldr	r2, [pc, #104]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033c8:	60d3      	str	r3, [r2, #12]
 80033ca:	e011      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033d4:	d10c      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3304      	adds	r3, #4
 80033da:	2101      	movs	r1, #1
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 f875 	bl	80034cc <RCCEx_PLLSAI1_Config>
 80033e2:	4603      	mov	r3, r0
 80033e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033e6:	7cfb      	ldrb	r3, [r7, #19]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80033ec:	7cfb      	ldrb	r3, [r7, #19]
 80033ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d02b      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003402:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800340a:	4908      	ldr	r1, [pc, #32]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003416:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800341a:	d109      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800341c:	4b03      	ldr	r3, [pc, #12]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	4a02      	ldr	r2, [pc, #8]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003422:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003426:	60d3      	str	r3, [r2, #12]
 8003428:	e014      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800342a:	bf00      	nop
 800342c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003434:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003438:	d10c      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3304      	adds	r3, #4
 800343e:	2101      	movs	r1, #1
 8003440:	4618      	mov	r0, r3
 8003442:	f000 f843 	bl	80034cc <RCCEx_PLLSAI1_Config>
 8003446:	4603      	mov	r3, r0
 8003448:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800344a:	7cfb      	ldrb	r3, [r7, #19]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8003450:	7cfb      	ldrb	r3, [r7, #19]
 8003452:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d01c      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003460:	4b19      	ldr	r3, [pc, #100]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003466:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346e:	4916      	ldr	r1, [pc, #88]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800347e:	d10c      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3304      	adds	r3, #4
 8003484:	2102      	movs	r1, #2
 8003486:	4618      	mov	r0, r3
 8003488:	f000 f820 	bl	80034cc <RCCEx_PLLSAI1_Config>
 800348c:	4603      	mov	r3, r0
 800348e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003490:	7cfb      	ldrb	r3, [r7, #19]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8003496:	7cfb      	ldrb	r3, [r7, #19]
 8003498:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034a6:	4b08      	ldr	r3, [pc, #32]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b4:	4904      	ldr	r1, [pc, #16]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40021000 	.word	0x40021000

080034cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034da:	4b74      	ldr	r3, [pc, #464]	; (80036ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d018      	beq.n	8003518 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034e6:	4b71      	ldr	r3, [pc, #452]	; (80036ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f003 0203 	and.w	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d10d      	bne.n	8003512 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
       ||
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d009      	beq.n	8003512 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80034fe:	4b6b      	ldr	r3, [pc, #428]	; (80036ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	091b      	lsrs	r3, r3, #4
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
       ||
 800350e:	429a      	cmp	r2, r3
 8003510:	d047      	beq.n	80035a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	73fb      	strb	r3, [r7, #15]
 8003516:	e044      	b.n	80035a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b03      	cmp	r3, #3
 800351e:	d018      	beq.n	8003552 <RCCEx_PLLSAI1_Config+0x86>
 8003520:	2b03      	cmp	r3, #3
 8003522:	d825      	bhi.n	8003570 <RCCEx_PLLSAI1_Config+0xa4>
 8003524:	2b01      	cmp	r3, #1
 8003526:	d002      	beq.n	800352e <RCCEx_PLLSAI1_Config+0x62>
 8003528:	2b02      	cmp	r3, #2
 800352a:	d009      	beq.n	8003540 <RCCEx_PLLSAI1_Config+0x74>
 800352c:	e020      	b.n	8003570 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800352e:	4b5f      	ldr	r3, [pc, #380]	; (80036ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d11d      	bne.n	8003576 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800353e:	e01a      	b.n	8003576 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003540:	4b5a      	ldr	r3, [pc, #360]	; (80036ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003548:	2b00      	cmp	r3, #0
 800354a:	d116      	bne.n	800357a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003550:	e013      	b.n	800357a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003552:	4b56      	ldr	r3, [pc, #344]	; (80036ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10f      	bne.n	800357e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800355e:	4b53      	ldr	r3, [pc, #332]	; (80036ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800356e:	e006      	b.n	800357e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
      break;
 8003574:	e004      	b.n	8003580 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003576:	bf00      	nop
 8003578:	e002      	b.n	8003580 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800357a:	bf00      	nop
 800357c:	e000      	b.n	8003580 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800357e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10d      	bne.n	80035a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003586:	4b49      	ldr	r3, [pc, #292]	; (80036ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6819      	ldr	r1, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	3b01      	subs	r3, #1
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	430b      	orrs	r3, r1
 800359c:	4943      	ldr	r1, [pc, #268]	; (80036ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d17c      	bne.n	80036a2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035a8:	4b40      	ldr	r3, [pc, #256]	; (80036ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a3f      	ldr	r2, [pc, #252]	; (80036ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80035ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b4:	f7fe fbfc 	bl	8001db0 <HAL_GetTick>
 80035b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035ba:	e009      	b.n	80035d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035bc:	f7fe fbf8 	bl	8001db0 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d902      	bls.n	80035d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	73fb      	strb	r3, [r7, #15]
        break;
 80035ce:	e005      	b.n	80035dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035d0:	4b36      	ldr	r3, [pc, #216]	; (80036ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1ef      	bne.n	80035bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d15f      	bne.n	80036a2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d110      	bne.n	800360a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035e8:	4b30      	ldr	r3, [pc, #192]	; (80036ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80035f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6892      	ldr	r2, [r2, #8]
 80035f8:	0211      	lsls	r1, r2, #8
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68d2      	ldr	r2, [r2, #12]
 80035fe:	06d2      	lsls	r2, r2, #27
 8003600:	430a      	orrs	r2, r1
 8003602:	492a      	ldr	r1, [pc, #168]	; (80036ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003604:	4313      	orrs	r3, r2
 8003606:	610b      	str	r3, [r1, #16]
 8003608:	e027      	b.n	800365a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d112      	bne.n	8003636 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003610:	4b26      	ldr	r3, [pc, #152]	; (80036ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003618:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6892      	ldr	r2, [r2, #8]
 8003620:	0211      	lsls	r1, r2, #8
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6912      	ldr	r2, [r2, #16]
 8003626:	0852      	lsrs	r2, r2, #1
 8003628:	3a01      	subs	r2, #1
 800362a:	0552      	lsls	r2, r2, #21
 800362c:	430a      	orrs	r2, r1
 800362e:	491f      	ldr	r1, [pc, #124]	; (80036ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003630:	4313      	orrs	r3, r2
 8003632:	610b      	str	r3, [r1, #16]
 8003634:	e011      	b.n	800365a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003636:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800363e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6892      	ldr	r2, [r2, #8]
 8003646:	0211      	lsls	r1, r2, #8
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6952      	ldr	r2, [r2, #20]
 800364c:	0852      	lsrs	r2, r2, #1
 800364e:	3a01      	subs	r2, #1
 8003650:	0652      	lsls	r2, r2, #25
 8003652:	430a      	orrs	r2, r1
 8003654:	4915      	ldr	r1, [pc, #84]	; (80036ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003656:	4313      	orrs	r3, r2
 8003658:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800365a:	4b14      	ldr	r3, [pc, #80]	; (80036ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a13      	ldr	r2, [pc, #76]	; (80036ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003660:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003664:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003666:	f7fe fba3 	bl	8001db0 <HAL_GetTick>
 800366a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800366c:	e009      	b.n	8003682 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800366e:	f7fe fb9f 	bl	8001db0 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d902      	bls.n	8003682 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	73fb      	strb	r3, [r7, #15]
          break;
 8003680:	e005      	b.n	800368e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003682:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0ef      	beq.n	800366e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d106      	bne.n	80036a2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	4903      	ldr	r1, [pc, #12]	; (80036ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40021000 	.word	0x40021000

080036b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e049      	b.n	8003756 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fe f922 	bl	8001920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3304      	adds	r3, #4
 80036ec:	4619      	mov	r1, r3
 80036ee:	4610      	mov	r0, r2
 80036f0:	f000 fb52 	bl	8003d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e049      	b.n	8003804 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d106      	bne.n	800378a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f841 	bl	800380c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2202      	movs	r2, #2
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	3304      	adds	r3, #4
 800379a:	4619      	mov	r1, r3
 800379c:	4610      	mov	r0, r2
 800379e:	f000 fafb 	bl	8003d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d109      	bne.n	8003844 <HAL_TIM_PWM_Start+0x24>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b01      	cmp	r3, #1
 800383a:	bf14      	ite	ne
 800383c:	2301      	movne	r3, #1
 800383e:	2300      	moveq	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	e03c      	b.n	80038be <HAL_TIM_PWM_Start+0x9e>
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	2b04      	cmp	r3, #4
 8003848:	d109      	bne.n	800385e <HAL_TIM_PWM_Start+0x3e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b01      	cmp	r3, #1
 8003854:	bf14      	ite	ne
 8003856:	2301      	movne	r3, #1
 8003858:	2300      	moveq	r3, #0
 800385a:	b2db      	uxtb	r3, r3
 800385c:	e02f      	b.n	80038be <HAL_TIM_PWM_Start+0x9e>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b08      	cmp	r3, #8
 8003862:	d109      	bne.n	8003878 <HAL_TIM_PWM_Start+0x58>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b01      	cmp	r3, #1
 800386e:	bf14      	ite	ne
 8003870:	2301      	movne	r3, #1
 8003872:	2300      	moveq	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	e022      	b.n	80038be <HAL_TIM_PWM_Start+0x9e>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b0c      	cmp	r3, #12
 800387c:	d109      	bne.n	8003892 <HAL_TIM_PWM_Start+0x72>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b01      	cmp	r3, #1
 8003888:	bf14      	ite	ne
 800388a:	2301      	movne	r3, #1
 800388c:	2300      	moveq	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	e015      	b.n	80038be <HAL_TIM_PWM_Start+0x9e>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b10      	cmp	r3, #16
 8003896:	d109      	bne.n	80038ac <HAL_TIM_PWM_Start+0x8c>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	bf14      	ite	ne
 80038a4:	2301      	movne	r3, #1
 80038a6:	2300      	moveq	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	e008      	b.n	80038be <HAL_TIM_PWM_Start+0x9e>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	bf14      	ite	ne
 80038b8:	2301      	movne	r3, #1
 80038ba:	2300      	moveq	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e07e      	b.n	80039c4 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d104      	bne.n	80038d6 <HAL_TIM_PWM_Start+0xb6>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038d4:	e023      	b.n	800391e <HAL_TIM_PWM_Start+0xfe>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d104      	bne.n	80038e6 <HAL_TIM_PWM_Start+0xc6>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038e4:	e01b      	b.n	800391e <HAL_TIM_PWM_Start+0xfe>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d104      	bne.n	80038f6 <HAL_TIM_PWM_Start+0xd6>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038f4:	e013      	b.n	800391e <HAL_TIM_PWM_Start+0xfe>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b0c      	cmp	r3, #12
 80038fa:	d104      	bne.n	8003906 <HAL_TIM_PWM_Start+0xe6>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003904:	e00b      	b.n	800391e <HAL_TIM_PWM_Start+0xfe>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b10      	cmp	r3, #16
 800390a:	d104      	bne.n	8003916 <HAL_TIM_PWM_Start+0xf6>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003914:	e003      	b.n	800391e <HAL_TIM_PWM_Start+0xfe>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2202      	movs	r2, #2
 800391a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2201      	movs	r2, #1
 8003924:	6839      	ldr	r1, [r7, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fdb2 	bl	8004490 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a26      	ldr	r2, [pc, #152]	; (80039cc <HAL_TIM_PWM_Start+0x1ac>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d009      	beq.n	800394a <HAL_TIM_PWM_Start+0x12a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a25      	ldr	r2, [pc, #148]	; (80039d0 <HAL_TIM_PWM_Start+0x1b0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d004      	beq.n	800394a <HAL_TIM_PWM_Start+0x12a>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a23      	ldr	r2, [pc, #140]	; (80039d4 <HAL_TIM_PWM_Start+0x1b4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d101      	bne.n	800394e <HAL_TIM_PWM_Start+0x12e>
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <HAL_TIM_PWM_Start+0x130>
 800394e:	2300      	movs	r3, #0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d007      	beq.n	8003964 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003962:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a18      	ldr	r2, [pc, #96]	; (80039cc <HAL_TIM_PWM_Start+0x1ac>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d009      	beq.n	8003982 <HAL_TIM_PWM_Start+0x162>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003976:	d004      	beq.n	8003982 <HAL_TIM_PWM_Start+0x162>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a14      	ldr	r2, [pc, #80]	; (80039d0 <HAL_TIM_PWM_Start+0x1b0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d115      	bne.n	80039ae <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <HAL_TIM_PWM_Start+0x1b8>)
 800398a:	4013      	ands	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b06      	cmp	r3, #6
 8003992:	d015      	beq.n	80039c0 <HAL_TIM_PWM_Start+0x1a0>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399a:	d011      	beq.n	80039c0 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ac:	e008      	b.n	80039c0 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0201 	orr.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	e000      	b.n	80039c2 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40012c00 	.word	0x40012c00
 80039d0:	40014000 	.word	0x40014000
 80039d4:	40014400 	.word	0x40014400
 80039d8:	00010007 	.word	0x00010007

080039dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e0ff      	b.n	8003bfa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b14      	cmp	r3, #20
 8003a06:	f200 80f0 	bhi.w	8003bea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003a0a:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a10:	08003a65 	.word	0x08003a65
 8003a14:	08003beb 	.word	0x08003beb
 8003a18:	08003beb 	.word	0x08003beb
 8003a1c:	08003beb 	.word	0x08003beb
 8003a20:	08003aa5 	.word	0x08003aa5
 8003a24:	08003beb 	.word	0x08003beb
 8003a28:	08003beb 	.word	0x08003beb
 8003a2c:	08003beb 	.word	0x08003beb
 8003a30:	08003ae7 	.word	0x08003ae7
 8003a34:	08003beb 	.word	0x08003beb
 8003a38:	08003beb 	.word	0x08003beb
 8003a3c:	08003beb 	.word	0x08003beb
 8003a40:	08003b27 	.word	0x08003b27
 8003a44:	08003beb 	.word	0x08003beb
 8003a48:	08003beb 	.word	0x08003beb
 8003a4c:	08003beb 	.word	0x08003beb
 8003a50:	08003b69 	.word	0x08003b69
 8003a54:	08003beb 	.word	0x08003beb
 8003a58:	08003beb 	.word	0x08003beb
 8003a5c:	08003beb 	.word	0x08003beb
 8003a60:	08003ba9 	.word	0x08003ba9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 f9f8 	bl	8003e60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0208 	orr.w	r2, r2, #8
 8003a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0204 	bic.w	r2, r2, #4
 8003a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6999      	ldr	r1, [r3, #24]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	619a      	str	r2, [r3, #24]
      break;
 8003aa2:	e0a5      	b.n	8003bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68b9      	ldr	r1, [r7, #8]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 fa54 	bl	8003f58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699a      	ldr	r2, [r3, #24]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6999      	ldr	r1, [r3, #24]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	021a      	lsls	r2, r3, #8
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	619a      	str	r2, [r3, #24]
      break;
 8003ae4:	e084      	b.n	8003bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 faad 	bl	800404c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 0208 	orr.w	r2, r2, #8
 8003b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69da      	ldr	r2, [r3, #28]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0204 	bic.w	r2, r2, #4
 8003b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69d9      	ldr	r1, [r3, #28]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	61da      	str	r2, [r3, #28]
      break;
 8003b24:	e064      	b.n	8003bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 fb05 	bl	800413c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69da      	ldr	r2, [r3, #28]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69da      	ldr	r2, [r3, #28]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69d9      	ldr	r1, [r3, #28]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	021a      	lsls	r2, r3, #8
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	61da      	str	r2, [r3, #28]
      break;
 8003b66:	e043      	b.n	8003bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68b9      	ldr	r1, [r7, #8]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 fb42 	bl	80041f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0208 	orr.w	r2, r2, #8
 8003b82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0204 	bic.w	r2, r2, #4
 8003b92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	691a      	ldr	r2, [r3, #16]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ba6:	e023      	b.n	8003bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68b9      	ldr	r1, [r7, #8]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fb7a 	bl	80042a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bc2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	021a      	lsls	r2, r3, #8
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003be8:	e002      	b.n	8003bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	75fb      	strb	r3, [r7, #23]
      break;
 8003bee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop

08003c04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_TIM_ConfigClockSource+0x1c>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e0b6      	b.n	8003d8e <HAL_TIM_ConfigClockSource+0x18a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c5c:	d03e      	beq.n	8003cdc <HAL_TIM_ConfigClockSource+0xd8>
 8003c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c62:	f200 8087 	bhi.w	8003d74 <HAL_TIM_ConfigClockSource+0x170>
 8003c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6a:	f000 8086 	beq.w	8003d7a <HAL_TIM_ConfigClockSource+0x176>
 8003c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c72:	d87f      	bhi.n	8003d74 <HAL_TIM_ConfigClockSource+0x170>
 8003c74:	2b70      	cmp	r3, #112	; 0x70
 8003c76:	d01a      	beq.n	8003cae <HAL_TIM_ConfigClockSource+0xaa>
 8003c78:	2b70      	cmp	r3, #112	; 0x70
 8003c7a:	d87b      	bhi.n	8003d74 <HAL_TIM_ConfigClockSource+0x170>
 8003c7c:	2b60      	cmp	r3, #96	; 0x60
 8003c7e:	d050      	beq.n	8003d22 <HAL_TIM_ConfigClockSource+0x11e>
 8003c80:	2b60      	cmp	r3, #96	; 0x60
 8003c82:	d877      	bhi.n	8003d74 <HAL_TIM_ConfigClockSource+0x170>
 8003c84:	2b50      	cmp	r3, #80	; 0x50
 8003c86:	d03c      	beq.n	8003d02 <HAL_TIM_ConfigClockSource+0xfe>
 8003c88:	2b50      	cmp	r3, #80	; 0x50
 8003c8a:	d873      	bhi.n	8003d74 <HAL_TIM_ConfigClockSource+0x170>
 8003c8c:	2b40      	cmp	r3, #64	; 0x40
 8003c8e:	d058      	beq.n	8003d42 <HAL_TIM_ConfigClockSource+0x13e>
 8003c90:	2b40      	cmp	r3, #64	; 0x40
 8003c92:	d86f      	bhi.n	8003d74 <HAL_TIM_ConfigClockSource+0x170>
 8003c94:	2b30      	cmp	r3, #48	; 0x30
 8003c96:	d064      	beq.n	8003d62 <HAL_TIM_ConfigClockSource+0x15e>
 8003c98:	2b30      	cmp	r3, #48	; 0x30
 8003c9a:	d86b      	bhi.n	8003d74 <HAL_TIM_ConfigClockSource+0x170>
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	d060      	beq.n	8003d62 <HAL_TIM_ConfigClockSource+0x15e>
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d867      	bhi.n	8003d74 <HAL_TIM_ConfigClockSource+0x170>
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d05c      	beq.n	8003d62 <HAL_TIM_ConfigClockSource+0x15e>
 8003ca8:	2b10      	cmp	r3, #16
 8003caa:	d05a      	beq.n	8003d62 <HAL_TIM_ConfigClockSource+0x15e>
 8003cac:	e062      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cbe:	f000 fbc7 	bl	8004450 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	609a      	str	r2, [r3, #8]
      break;
 8003cda:	e04f      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cec:	f000 fbb0 	bl	8004450 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cfe:	609a      	str	r2, [r3, #8]
      break;
 8003d00:	e03c      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d0e:	461a      	mov	r2, r3
 8003d10:	f000 fb24 	bl	800435c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2150      	movs	r1, #80	; 0x50
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fb7d 	bl	800441a <TIM_ITRx_SetConfig>
      break;
 8003d20:	e02c      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d2e:	461a      	mov	r2, r3
 8003d30:	f000 fb43 	bl	80043ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2160      	movs	r1, #96	; 0x60
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fb6d 	bl	800441a <TIM_ITRx_SetConfig>
      break;
 8003d40:	e01c      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f000 fb04 	bl	800435c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2140      	movs	r1, #64	; 0x40
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fb5d 	bl	800441a <TIM_ITRx_SetConfig>
      break;
 8003d60:	e00c      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	f000 fb54 	bl	800441a <TIM_ITRx_SetConfig>
      break;
 8003d72:	e003      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	73fb      	strb	r3, [r7, #15]
      break;
 8003d78:	e000      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003d7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a2a      	ldr	r2, [pc, #168]	; (8003e54 <TIM_Base_SetConfig+0xbc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d003      	beq.n	8003db8 <TIM_Base_SetConfig+0x20>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db6:	d108      	bne.n	8003dca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a21      	ldr	r2, [pc, #132]	; (8003e54 <TIM_Base_SetConfig+0xbc>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00b      	beq.n	8003dea <TIM_Base_SetConfig+0x52>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd8:	d007      	beq.n	8003dea <TIM_Base_SetConfig+0x52>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a1e      	ldr	r2, [pc, #120]	; (8003e58 <TIM_Base_SetConfig+0xc0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d003      	beq.n	8003dea <TIM_Base_SetConfig+0x52>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a1d      	ldr	r2, [pc, #116]	; (8003e5c <TIM_Base_SetConfig+0xc4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d108      	bne.n	8003dfc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a0c      	ldr	r2, [pc, #48]	; (8003e54 <TIM_Base_SetConfig+0xbc>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d007      	beq.n	8003e38 <TIM_Base_SetConfig+0xa0>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a0b      	ldr	r2, [pc, #44]	; (8003e58 <TIM_Base_SetConfig+0xc0>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d003      	beq.n	8003e38 <TIM_Base_SetConfig+0xa0>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a0a      	ldr	r2, [pc, #40]	; (8003e5c <TIM_Base_SetConfig+0xc4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d103      	bne.n	8003e40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	615a      	str	r2, [r3, #20]
}
 8003e46:	bf00      	nop
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40012c00 	.word	0x40012c00
 8003e58:	40014000 	.word	0x40014000
 8003e5c:	40014400 	.word	0x40014400

08003e60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	f023 0201 	bic.w	r2, r3, #1
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0303 	bic.w	r3, r3, #3
 8003e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f023 0302 	bic.w	r3, r3, #2
 8003eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a24      	ldr	r2, [pc, #144]	; (8003f4c <TIM_OC1_SetConfig+0xec>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d007      	beq.n	8003ed0 <TIM_OC1_SetConfig+0x70>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a23      	ldr	r2, [pc, #140]	; (8003f50 <TIM_OC1_SetConfig+0xf0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d003      	beq.n	8003ed0 <TIM_OC1_SetConfig+0x70>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a22      	ldr	r2, [pc, #136]	; (8003f54 <TIM_OC1_SetConfig+0xf4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d10c      	bne.n	8003eea <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f023 0308 	bic.w	r3, r3, #8
 8003ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f023 0304 	bic.w	r3, r3, #4
 8003ee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a17      	ldr	r2, [pc, #92]	; (8003f4c <TIM_OC1_SetConfig+0xec>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d007      	beq.n	8003f02 <TIM_OC1_SetConfig+0xa2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a16      	ldr	r2, [pc, #88]	; (8003f50 <TIM_OC1_SetConfig+0xf0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d003      	beq.n	8003f02 <TIM_OC1_SetConfig+0xa2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a15      	ldr	r2, [pc, #84]	; (8003f54 <TIM_OC1_SetConfig+0xf4>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d111      	bne.n	8003f26 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	621a      	str	r2, [r3, #32]
}
 8003f40:	bf00      	nop
 8003f42:	371c      	adds	r7, #28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	40012c00 	.word	0x40012c00
 8003f50:	40014000 	.word	0x40014000
 8003f54:	40014400 	.word	0x40014400

08003f58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	f023 0210 	bic.w	r2, r3, #16
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	021b      	lsls	r3, r3, #8
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f023 0320 	bic.w	r3, r3, #32
 8003fa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a22      	ldr	r2, [pc, #136]	; (8004040 <TIM_OC2_SetConfig+0xe8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d10d      	bne.n	8003fd8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a19      	ldr	r2, [pc, #100]	; (8004040 <TIM_OC2_SetConfig+0xe8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d007      	beq.n	8003ff0 <TIM_OC2_SetConfig+0x98>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a18      	ldr	r2, [pc, #96]	; (8004044 <TIM_OC2_SetConfig+0xec>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d003      	beq.n	8003ff0 <TIM_OC2_SetConfig+0x98>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a17      	ldr	r2, [pc, #92]	; (8004048 <TIM_OC2_SetConfig+0xf0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d113      	bne.n	8004018 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ff6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	4313      	orrs	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	621a      	str	r2, [r3, #32]
}
 8004032:	bf00      	nop
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40012c00 	.word	0x40012c00
 8004044:	40014000 	.word	0x40014000
 8004048:	40014400 	.word	0x40014400

0800404c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800407a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0303 	bic.w	r3, r3, #3
 8004086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	021b      	lsls	r3, r3, #8
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a21      	ldr	r2, [pc, #132]	; (8004130 <TIM_OC3_SetConfig+0xe4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d10d      	bne.n	80040ca <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	021b      	lsls	r3, r3, #8
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	4313      	orrs	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a18      	ldr	r2, [pc, #96]	; (8004130 <TIM_OC3_SetConfig+0xe4>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d007      	beq.n	80040e2 <TIM_OC3_SetConfig+0x96>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a17      	ldr	r2, [pc, #92]	; (8004134 <TIM_OC3_SetConfig+0xe8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d003      	beq.n	80040e2 <TIM_OC3_SetConfig+0x96>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a16      	ldr	r2, [pc, #88]	; (8004138 <TIM_OC3_SetConfig+0xec>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d113      	bne.n	800410a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	621a      	str	r2, [r3, #32]
}
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40014000 	.word	0x40014000
 8004138:	40014400 	.word	0x40014400

0800413c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800416a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800416e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4313      	orrs	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800418a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	031b      	lsls	r3, r3, #12
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a14      	ldr	r2, [pc, #80]	; (80041ec <TIM_OC4_SetConfig+0xb0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d007      	beq.n	80041b0 <TIM_OC4_SetConfig+0x74>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a13      	ldr	r2, [pc, #76]	; (80041f0 <TIM_OC4_SetConfig+0xb4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d003      	beq.n	80041b0 <TIM_OC4_SetConfig+0x74>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a12      	ldr	r2, [pc, #72]	; (80041f4 <TIM_OC4_SetConfig+0xb8>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d109      	bne.n	80041c4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	019b      	lsls	r3, r3, #6
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	621a      	str	r2, [r3, #32]
}
 80041de:	bf00      	nop
 80041e0:	371c      	adds	r7, #28
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40012c00 	.word	0x40012c00
 80041f0:	40014000 	.word	0x40014000
 80041f4:	40014400 	.word	0x40014400

080041f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800423c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	041b      	lsls	r3, r3, #16
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4313      	orrs	r3, r2
 8004248:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a13      	ldr	r2, [pc, #76]	; (800429c <TIM_OC5_SetConfig+0xa4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d007      	beq.n	8004262 <TIM_OC5_SetConfig+0x6a>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a12      	ldr	r2, [pc, #72]	; (80042a0 <TIM_OC5_SetConfig+0xa8>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d003      	beq.n	8004262 <TIM_OC5_SetConfig+0x6a>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a11      	ldr	r2, [pc, #68]	; (80042a4 <TIM_OC5_SetConfig+0xac>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d109      	bne.n	8004276 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004268:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	021b      	lsls	r3, r3, #8
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	4313      	orrs	r3, r2
 8004274:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	621a      	str	r2, [r3, #32]
}
 8004290:	bf00      	nop
 8004292:	371c      	adds	r7, #28
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	40012c00 	.word	0x40012c00
 80042a0:	40014000 	.word	0x40014000
 80042a4:	40014400 	.word	0x40014400

080042a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	021b      	lsls	r3, r3, #8
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	051b      	lsls	r3, r3, #20
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a14      	ldr	r2, [pc, #80]	; (8004350 <TIM_OC6_SetConfig+0xa8>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d007      	beq.n	8004314 <TIM_OC6_SetConfig+0x6c>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a13      	ldr	r2, [pc, #76]	; (8004354 <TIM_OC6_SetConfig+0xac>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d003      	beq.n	8004314 <TIM_OC6_SetConfig+0x6c>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a12      	ldr	r2, [pc, #72]	; (8004358 <TIM_OC6_SetConfig+0xb0>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d109      	bne.n	8004328 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800431a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	029b      	lsls	r3, r3, #10
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4313      	orrs	r3, r2
 8004326:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	621a      	str	r2, [r3, #32]
}
 8004342:	bf00      	nop
 8004344:	371c      	adds	r7, #28
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40012c00 	.word	0x40012c00
 8004354:	40014000 	.word	0x40014000
 8004358:	40014400 	.word	0x40014400

0800435c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f023 0201 	bic.w	r2, r3, #1
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	4313      	orrs	r3, r2
 8004390:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f023 030a 	bic.w	r3, r3, #10
 8004398:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4313      	orrs	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	621a      	str	r2, [r3, #32]
}
 80043ae:	bf00      	nop
 80043b0:	371c      	adds	r7, #28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b087      	sub	sp, #28
 80043be:	af00      	add	r7, sp, #0
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	f023 0210 	bic.w	r2, r3, #16
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	031b      	lsls	r3, r3, #12
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	4313      	orrs	r3, r2
 8004400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	621a      	str	r2, [r3, #32]
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800441a:	b480      	push	{r7}
 800441c:	b085      	sub	sp, #20
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004430:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	f043 0307 	orr.w	r3, r3, #7
 800443c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	609a      	str	r2, [r3, #8]
}
 8004444:	bf00      	nop
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800446a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	021a      	lsls	r2, r3, #8
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	431a      	orrs	r2, r3
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4313      	orrs	r3, r2
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	4313      	orrs	r3, r2
 800447c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	609a      	str	r2, [r3, #8]
}
 8004484:	bf00      	nop
 8004486:	371c      	adds	r7, #28
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f003 031f 	and.w	r3, r3, #31
 80044a2:	2201      	movs	r2, #1
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a1a      	ldr	r2, [r3, #32]
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	43db      	mvns	r3, r3
 80044b2:	401a      	ands	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a1a      	ldr	r2, [r3, #32]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f003 031f 	and.w	r3, r3, #31
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	fa01 f303 	lsl.w	r3, r1, r3
 80044c8:	431a      	orrs	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	621a      	str	r2, [r3, #32]
}
 80044ce:	bf00      	nop
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
	...

080044dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d101      	bne.n	80044f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044f0:	2302      	movs	r3, #2
 80044f2:	e04f      	b.n	8004594 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a21      	ldr	r2, [pc, #132]	; (80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d108      	bne.n	8004530 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004524:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004536:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	4313      	orrs	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a14      	ldr	r2, [pc, #80]	; (80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d009      	beq.n	8004568 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455c:	d004      	beq.n	8004568 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a10      	ldr	r2, [pc, #64]	; (80045a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d10c      	bne.n	8004582 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800456e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	4313      	orrs	r3, r2
 8004578:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	40012c00 	.word	0x40012c00
 80045a4:	40014000 	.word	0x40014000

080045a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e040      	b.n	800463c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d106      	bne.n	80045d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7fd f9fa 	bl	80019c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2224      	movs	r2, #36	; 0x24
 80045d4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0201 	bic.w	r2, r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fb0c 	bl	8004c0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f8af 	bl	8004758 <UART_SetConfig>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e01b      	b.n	800463c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004612:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004622:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0201 	orr.w	r2, r2, #1
 8004632:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 fb8b 	bl	8004d50 <UART_CheckIdleState>
 800463a:	4603      	mov	r3, r0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08a      	sub	sp, #40	; 0x28
 8004648:	af02      	add	r7, sp, #8
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	4613      	mov	r3, r2
 8004652:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004658:	2b20      	cmp	r3, #32
 800465a:	d178      	bne.n	800474e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <HAL_UART_Transmit+0x24>
 8004662:	88fb      	ldrh	r3, [r7, #6]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e071      	b.n	8004750 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2221      	movs	r2, #33	; 0x21
 8004678:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800467a:	f7fd fb99 	bl	8001db0 <HAL_GetTick>
 800467e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	88fa      	ldrh	r2, [r7, #6]
 8004684:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	88fa      	ldrh	r2, [r7, #6]
 800468c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004698:	d108      	bne.n	80046ac <HAL_UART_Transmit+0x68>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d104      	bne.n	80046ac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	61bb      	str	r3, [r7, #24]
 80046aa:	e003      	b.n	80046b4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046b0:	2300      	movs	r3, #0
 80046b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046b4:	e030      	b.n	8004718 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2200      	movs	r2, #0
 80046be:	2180      	movs	r1, #128	; 0x80
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 fbed 	bl	8004ea0 <UART_WaitOnFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d004      	beq.n	80046d6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2220      	movs	r2, #32
 80046d0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e03c      	b.n	8004750 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10b      	bne.n	80046f4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	881a      	ldrh	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e8:	b292      	uxth	r2, r2
 80046ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	3302      	adds	r3, #2
 80046f0:	61bb      	str	r3, [r7, #24]
 80046f2:	e008      	b.n	8004706 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	781a      	ldrb	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	b292      	uxth	r2, r2
 80046fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	3301      	adds	r3, #1
 8004704:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1c8      	bne.n	80046b6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2200      	movs	r2, #0
 800472c:	2140      	movs	r1, #64	; 0x40
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 fbb6 	bl	8004ea0 <UART_WaitOnFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d004      	beq.n	8004744 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2220      	movs	r2, #32
 800473e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e005      	b.n	8004750 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2220      	movs	r2, #32
 8004748:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	e000      	b.n	8004750 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800474e:	2302      	movs	r3, #2
  }
}
 8004750:	4618      	mov	r0, r3
 8004752:	3720      	adds	r7, #32
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800475c:	b08a      	sub	sp, #40	; 0x28
 800475e:	af00      	add	r7, sp, #0
 8004760:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	431a      	orrs	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	431a      	orrs	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	4313      	orrs	r3, r2
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	4b9e      	ldr	r3, [pc, #632]	; (8004a00 <UART_SetConfig+0x2a8>)
 8004788:	4013      	ands	r3, r2
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	6812      	ldr	r2, [r2, #0]
 800478e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004790:	430b      	orrs	r3, r1
 8004792:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a93      	ldr	r2, [pc, #588]	; (8004a04 <UART_SetConfig+0x2ac>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d004      	beq.n	80047c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c0:	4313      	orrs	r3, r2
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d4:	430a      	orrs	r2, r1
 80047d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a8a      	ldr	r2, [pc, #552]	; (8004a08 <UART_SetConfig+0x2b0>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d126      	bne.n	8004830 <UART_SetConfig+0xd8>
 80047e2:	4b8a      	ldr	r3, [pc, #552]	; (8004a0c <UART_SetConfig+0x2b4>)
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e8:	f003 0303 	and.w	r3, r3, #3
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d81b      	bhi.n	8004828 <UART_SetConfig+0xd0>
 80047f0:	a201      	add	r2, pc, #4	; (adr r2, 80047f8 <UART_SetConfig+0xa0>)
 80047f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f6:	bf00      	nop
 80047f8:	08004809 	.word	0x08004809
 80047fc:	08004819 	.word	0x08004819
 8004800:	08004811 	.word	0x08004811
 8004804:	08004821 	.word	0x08004821
 8004808:	2301      	movs	r3, #1
 800480a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800480e:	e0ab      	b.n	8004968 <UART_SetConfig+0x210>
 8004810:	2302      	movs	r3, #2
 8004812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004816:	e0a7      	b.n	8004968 <UART_SetConfig+0x210>
 8004818:	2304      	movs	r3, #4
 800481a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800481e:	e0a3      	b.n	8004968 <UART_SetConfig+0x210>
 8004820:	2308      	movs	r3, #8
 8004822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004826:	e09f      	b.n	8004968 <UART_SetConfig+0x210>
 8004828:	2310      	movs	r3, #16
 800482a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800482e:	e09b      	b.n	8004968 <UART_SetConfig+0x210>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a76      	ldr	r2, [pc, #472]	; (8004a10 <UART_SetConfig+0x2b8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d138      	bne.n	80048ac <UART_SetConfig+0x154>
 800483a:	4b74      	ldr	r3, [pc, #464]	; (8004a0c <UART_SetConfig+0x2b4>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004840:	f003 030c 	and.w	r3, r3, #12
 8004844:	2b0c      	cmp	r3, #12
 8004846:	d82d      	bhi.n	80048a4 <UART_SetConfig+0x14c>
 8004848:	a201      	add	r2, pc, #4	; (adr r2, 8004850 <UART_SetConfig+0xf8>)
 800484a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484e:	bf00      	nop
 8004850:	08004885 	.word	0x08004885
 8004854:	080048a5 	.word	0x080048a5
 8004858:	080048a5 	.word	0x080048a5
 800485c:	080048a5 	.word	0x080048a5
 8004860:	08004895 	.word	0x08004895
 8004864:	080048a5 	.word	0x080048a5
 8004868:	080048a5 	.word	0x080048a5
 800486c:	080048a5 	.word	0x080048a5
 8004870:	0800488d 	.word	0x0800488d
 8004874:	080048a5 	.word	0x080048a5
 8004878:	080048a5 	.word	0x080048a5
 800487c:	080048a5 	.word	0x080048a5
 8004880:	0800489d 	.word	0x0800489d
 8004884:	2300      	movs	r3, #0
 8004886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800488a:	e06d      	b.n	8004968 <UART_SetConfig+0x210>
 800488c:	2302      	movs	r3, #2
 800488e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004892:	e069      	b.n	8004968 <UART_SetConfig+0x210>
 8004894:	2304      	movs	r3, #4
 8004896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800489a:	e065      	b.n	8004968 <UART_SetConfig+0x210>
 800489c:	2308      	movs	r3, #8
 800489e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a2:	e061      	b.n	8004968 <UART_SetConfig+0x210>
 80048a4:	2310      	movs	r3, #16
 80048a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048aa:	e05d      	b.n	8004968 <UART_SetConfig+0x210>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a58      	ldr	r2, [pc, #352]	; (8004a14 <UART_SetConfig+0x2bc>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d125      	bne.n	8004902 <UART_SetConfig+0x1aa>
 80048b6:	4b55      	ldr	r3, [pc, #340]	; (8004a0c <UART_SetConfig+0x2b4>)
 80048b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048c0:	2b30      	cmp	r3, #48	; 0x30
 80048c2:	d016      	beq.n	80048f2 <UART_SetConfig+0x19a>
 80048c4:	2b30      	cmp	r3, #48	; 0x30
 80048c6:	d818      	bhi.n	80048fa <UART_SetConfig+0x1a2>
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d00a      	beq.n	80048e2 <UART_SetConfig+0x18a>
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d814      	bhi.n	80048fa <UART_SetConfig+0x1a2>
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <UART_SetConfig+0x182>
 80048d4:	2b10      	cmp	r3, #16
 80048d6:	d008      	beq.n	80048ea <UART_SetConfig+0x192>
 80048d8:	e00f      	b.n	80048fa <UART_SetConfig+0x1a2>
 80048da:	2300      	movs	r3, #0
 80048dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048e0:	e042      	b.n	8004968 <UART_SetConfig+0x210>
 80048e2:	2302      	movs	r3, #2
 80048e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048e8:	e03e      	b.n	8004968 <UART_SetConfig+0x210>
 80048ea:	2304      	movs	r3, #4
 80048ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048f0:	e03a      	b.n	8004968 <UART_SetConfig+0x210>
 80048f2:	2308      	movs	r3, #8
 80048f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048f8:	e036      	b.n	8004968 <UART_SetConfig+0x210>
 80048fa:	2310      	movs	r3, #16
 80048fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004900:	e032      	b.n	8004968 <UART_SetConfig+0x210>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a3f      	ldr	r2, [pc, #252]	; (8004a04 <UART_SetConfig+0x2ac>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d12a      	bne.n	8004962 <UART_SetConfig+0x20a>
 800490c:	4b3f      	ldr	r3, [pc, #252]	; (8004a0c <UART_SetConfig+0x2b4>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004912:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004916:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800491a:	d01a      	beq.n	8004952 <UART_SetConfig+0x1fa>
 800491c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004920:	d81b      	bhi.n	800495a <UART_SetConfig+0x202>
 8004922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004926:	d00c      	beq.n	8004942 <UART_SetConfig+0x1ea>
 8004928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800492c:	d815      	bhi.n	800495a <UART_SetConfig+0x202>
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <UART_SetConfig+0x1e2>
 8004932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004936:	d008      	beq.n	800494a <UART_SetConfig+0x1f2>
 8004938:	e00f      	b.n	800495a <UART_SetConfig+0x202>
 800493a:	2300      	movs	r3, #0
 800493c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004940:	e012      	b.n	8004968 <UART_SetConfig+0x210>
 8004942:	2302      	movs	r3, #2
 8004944:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004948:	e00e      	b.n	8004968 <UART_SetConfig+0x210>
 800494a:	2304      	movs	r3, #4
 800494c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004950:	e00a      	b.n	8004968 <UART_SetConfig+0x210>
 8004952:	2308      	movs	r3, #8
 8004954:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004958:	e006      	b.n	8004968 <UART_SetConfig+0x210>
 800495a:	2310      	movs	r3, #16
 800495c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004960:	e002      	b.n	8004968 <UART_SetConfig+0x210>
 8004962:	2310      	movs	r3, #16
 8004964:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a25      	ldr	r2, [pc, #148]	; (8004a04 <UART_SetConfig+0x2ac>)
 800496e:	4293      	cmp	r3, r2
 8004970:	f040 808a 	bne.w	8004a88 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004974:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004978:	2b08      	cmp	r3, #8
 800497a:	d824      	bhi.n	80049c6 <UART_SetConfig+0x26e>
 800497c:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <UART_SetConfig+0x22c>)
 800497e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004982:	bf00      	nop
 8004984:	080049a9 	.word	0x080049a9
 8004988:	080049c7 	.word	0x080049c7
 800498c:	080049b1 	.word	0x080049b1
 8004990:	080049c7 	.word	0x080049c7
 8004994:	080049b7 	.word	0x080049b7
 8004998:	080049c7 	.word	0x080049c7
 800499c:	080049c7 	.word	0x080049c7
 80049a0:	080049c7 	.word	0x080049c7
 80049a4:	080049bf 	.word	0x080049bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a8:	f7fe faba 	bl	8002f20 <HAL_RCC_GetPCLK1Freq>
 80049ac:	61f8      	str	r0, [r7, #28]
        break;
 80049ae:	e010      	b.n	80049d2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b0:	4b19      	ldr	r3, [pc, #100]	; (8004a18 <UART_SetConfig+0x2c0>)
 80049b2:	61fb      	str	r3, [r7, #28]
        break;
 80049b4:	e00d      	b.n	80049d2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049b6:	f7fe fa1b 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 80049ba:	61f8      	str	r0, [r7, #28]
        break;
 80049bc:	e009      	b.n	80049d2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049c2:	61fb      	str	r3, [r7, #28]
        break;
 80049c4:	e005      	b.n	80049d2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 8109 	beq.w	8004bec <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	4413      	add	r3, r2
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d305      	bcc.n	80049f6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049f0:	69fa      	ldr	r2, [r7, #28]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d912      	bls.n	8004a1c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049fc:	e0f6      	b.n	8004bec <UART_SetConfig+0x494>
 80049fe:	bf00      	nop
 8004a00:	efff69f3 	.word	0xefff69f3
 8004a04:	40008000 	.word	0x40008000
 8004a08:	40013800 	.word	0x40013800
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	40004400 	.word	0x40004400
 8004a14:	40004800 	.word	0x40004800
 8004a18:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	461c      	mov	r4, r3
 8004a22:	4615      	mov	r5, r2
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	022b      	lsls	r3, r5, #8
 8004a2e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004a32:	0222      	lsls	r2, r4, #8
 8004a34:	68f9      	ldr	r1, [r7, #12]
 8004a36:	6849      	ldr	r1, [r1, #4]
 8004a38:	0849      	lsrs	r1, r1, #1
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	4688      	mov	r8, r1
 8004a3e:	4681      	mov	r9, r0
 8004a40:	eb12 0a08 	adds.w	sl, r2, r8
 8004a44:	eb43 0b09 	adc.w	fp, r3, r9
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	603b      	str	r3, [r7, #0]
 8004a50:	607a      	str	r2, [r7, #4]
 8004a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a56:	4650      	mov	r0, sl
 8004a58:	4659      	mov	r1, fp
 8004a5a:	f7fc f8f5 	bl	8000c48 <__aeabi_uldivmod>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	4613      	mov	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a6c:	d308      	bcc.n	8004a80 <UART_SetConfig+0x328>
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a74:	d204      	bcs.n	8004a80 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	60da      	str	r2, [r3, #12]
 8004a7e:	e0b5      	b.n	8004bec <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a86:	e0b1      	b.n	8004bec <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a90:	d15d      	bne.n	8004b4e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004a92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d827      	bhi.n	8004aea <UART_SetConfig+0x392>
 8004a9a:	a201      	add	r2, pc, #4	; (adr r2, 8004aa0 <UART_SetConfig+0x348>)
 8004a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa0:	08004ac5 	.word	0x08004ac5
 8004aa4:	08004acd 	.word	0x08004acd
 8004aa8:	08004ad5 	.word	0x08004ad5
 8004aac:	08004aeb 	.word	0x08004aeb
 8004ab0:	08004adb 	.word	0x08004adb
 8004ab4:	08004aeb 	.word	0x08004aeb
 8004ab8:	08004aeb 	.word	0x08004aeb
 8004abc:	08004aeb 	.word	0x08004aeb
 8004ac0:	08004ae3 	.word	0x08004ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ac4:	f7fe fa2c 	bl	8002f20 <HAL_RCC_GetPCLK1Freq>
 8004ac8:	61f8      	str	r0, [r7, #28]
        break;
 8004aca:	e014      	b.n	8004af6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004acc:	f7fe fa3e 	bl	8002f4c <HAL_RCC_GetPCLK2Freq>
 8004ad0:	61f8      	str	r0, [r7, #28]
        break;
 8004ad2:	e010      	b.n	8004af6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ad4:	4b4c      	ldr	r3, [pc, #304]	; (8004c08 <UART_SetConfig+0x4b0>)
 8004ad6:	61fb      	str	r3, [r7, #28]
        break;
 8004ad8:	e00d      	b.n	8004af6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ada:	f7fe f989 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 8004ade:	61f8      	str	r0, [r7, #28]
        break;
 8004ae0:	e009      	b.n	8004af6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ae6:	61fb      	str	r3, [r7, #28]
        break;
 8004ae8:	e005      	b.n	8004af6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004af4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d077      	beq.n	8004bec <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	005a      	lsls	r2, r3, #1
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	085b      	lsrs	r3, r3, #1
 8004b06:	441a      	add	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b10:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b0f      	cmp	r3, #15
 8004b16:	d916      	bls.n	8004b46 <UART_SetConfig+0x3ee>
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b1e:	d212      	bcs.n	8004b46 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	f023 030f 	bic.w	r3, r3, #15
 8004b28:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	085b      	lsrs	r3, r3, #1
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	8afb      	ldrh	r3, [r7, #22]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	8afa      	ldrh	r2, [r7, #22]
 8004b42:	60da      	str	r2, [r3, #12]
 8004b44:	e052      	b.n	8004bec <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b4c:	e04e      	b.n	8004bec <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b52:	2b08      	cmp	r3, #8
 8004b54:	d827      	bhi.n	8004ba6 <UART_SetConfig+0x44e>
 8004b56:	a201      	add	r2, pc, #4	; (adr r2, 8004b5c <UART_SetConfig+0x404>)
 8004b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5c:	08004b81 	.word	0x08004b81
 8004b60:	08004b89 	.word	0x08004b89
 8004b64:	08004b91 	.word	0x08004b91
 8004b68:	08004ba7 	.word	0x08004ba7
 8004b6c:	08004b97 	.word	0x08004b97
 8004b70:	08004ba7 	.word	0x08004ba7
 8004b74:	08004ba7 	.word	0x08004ba7
 8004b78:	08004ba7 	.word	0x08004ba7
 8004b7c:	08004b9f 	.word	0x08004b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b80:	f7fe f9ce 	bl	8002f20 <HAL_RCC_GetPCLK1Freq>
 8004b84:	61f8      	str	r0, [r7, #28]
        break;
 8004b86:	e014      	b.n	8004bb2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b88:	f7fe f9e0 	bl	8002f4c <HAL_RCC_GetPCLK2Freq>
 8004b8c:	61f8      	str	r0, [r7, #28]
        break;
 8004b8e:	e010      	b.n	8004bb2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b90:	4b1d      	ldr	r3, [pc, #116]	; (8004c08 <UART_SetConfig+0x4b0>)
 8004b92:	61fb      	str	r3, [r7, #28]
        break;
 8004b94:	e00d      	b.n	8004bb2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b96:	f7fe f92b 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 8004b9a:	61f8      	str	r0, [r7, #28]
        break;
 8004b9c:	e009      	b.n	8004bb2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ba2:	61fb      	str	r3, [r7, #28]
        break;
 8004ba4:	e005      	b.n	8004bb2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004bb0:	bf00      	nop
    }

    if (pclk != 0U)
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d019      	beq.n	8004bec <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	085a      	lsrs	r2, r3, #1
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	441a      	add	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	2b0f      	cmp	r3, #15
 8004bd0:	d909      	bls.n	8004be6 <UART_SetConfig+0x48e>
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd8:	d205      	bcs.n	8004be6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60da      	str	r2, [r3, #12]
 8004be4:	e002      	b.n	8004bec <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004bf8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3728      	adds	r7, #40	; 0x28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c06:	bf00      	nop
 8004c08:	00f42400 	.word	0x00f42400

08004c0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	f003 0304 	and.w	r3, r3, #4
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	f003 0310 	and.w	r3, r3, #16
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01a      	beq.n	8004d22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d0a:	d10a      	bne.n	8004d22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	605a      	str	r2, [r3, #4]
  }
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b098      	sub	sp, #96	; 0x60
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d60:	f7fd f826 	bl	8001db0 <HAL_GetTick>
 8004d64:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d12e      	bne.n	8004dd2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f88c 	bl	8004ea0 <UART_WaitOnFlagUntilTimeout>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d021      	beq.n	8004dd2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004da2:	653b      	str	r3, [r7, #80]	; 0x50
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dac:	647b      	str	r3, [r7, #68]	; 0x44
 8004dae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004db2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e6      	bne.n	8004d8e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e062      	b.n	8004e98 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	d149      	bne.n	8004e74 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004de8:	2200      	movs	r2, #0
 8004dea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f856 	bl	8004ea0 <UART_WaitOnFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d03c      	beq.n	8004e74 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	e853 3f00 	ldrex	r3, [r3]
 8004e06:	623b      	str	r3, [r7, #32]
   return(result);
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e18:	633b      	str	r3, [r7, #48]	; 0x30
 8004e1a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e20:	e841 2300 	strex	r3, r2, [r1]
 8004e24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e6      	bne.n	8004dfa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3308      	adds	r3, #8
 8004e32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	e853 3f00 	ldrex	r3, [r3]
 8004e3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0301 	bic.w	r3, r3, #1
 8004e42:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3308      	adds	r3, #8
 8004e4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e4c:	61fa      	str	r2, [r7, #28]
 8004e4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	69b9      	ldr	r1, [r7, #24]
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	e841 2300 	strex	r3, r2, [r1]
 8004e58:	617b      	str	r3, [r7, #20]
   return(result);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e5      	bne.n	8004e2c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e011      	b.n	8004e98 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2220      	movs	r2, #32
 8004e78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3758      	adds	r7, #88	; 0x58
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	603b      	str	r3, [r7, #0]
 8004eac:	4613      	mov	r3, r2
 8004eae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb0:	e049      	b.n	8004f46 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb8:	d045      	beq.n	8004f46 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eba:	f7fc ff79 	bl	8001db0 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d302      	bcc.n	8004ed0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e048      	b.n	8004f66 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d031      	beq.n	8004f46 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	f003 0308 	and.w	r3, r3, #8
 8004eec:	2b08      	cmp	r3, #8
 8004eee:	d110      	bne.n	8004f12 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 f838 	bl	8004f6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2208      	movs	r2, #8
 8004f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e029      	b.n	8004f66 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f20:	d111      	bne.n	8004f46 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 f81e 	bl	8004f6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2220      	movs	r2, #32
 8004f36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e00f      	b.n	8004f66 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	69da      	ldr	r2, [r3, #28]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	bf0c      	ite	eq
 8004f56:	2301      	moveq	r3, #1
 8004f58:	2300      	movne	r3, #0
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d0a6      	beq.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b095      	sub	sp, #84	; 0x54
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f7e:	e853 3f00 	ldrex	r3, [r3]
 8004f82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f94:	643b      	str	r3, [r7, #64]	; 0x40
 8004f96:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f9c:	e841 2300 	strex	r3, r2, [r1]
 8004fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1e6      	bne.n	8004f76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3308      	adds	r3, #8
 8004fae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	e853 3f00 	ldrex	r3, [r3]
 8004fb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	f023 0301 	bic.w	r3, r3, #1
 8004fbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fd0:	e841 2300 	strex	r3, r2, [r1]
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1e5      	bne.n	8004fa8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d118      	bne.n	8005016 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f023 0310 	bic.w	r3, r3, #16
 8004ff8:	647b      	str	r3, [r7, #68]	; 0x44
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005002:	61bb      	str	r3, [r7, #24]
 8005004:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	6979      	ldr	r1, [r7, #20]
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	613b      	str	r3, [r7, #16]
   return(result);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e6      	bne.n	8004fe4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2220      	movs	r2, #32
 800501a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	669a      	str	r2, [r3, #104]	; 0x68
}
 800502a:	bf00      	nop
 800502c:	3754      	adds	r7, #84	; 0x54
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
	...

08005038 <acos>:
 8005038:	b538      	push	{r3, r4, r5, lr}
 800503a:	ed2d 8b02 	vpush	{d8}
 800503e:	ec55 4b10 	vmov	r4, r5, d0
 8005042:	f000 f9c1 	bl	80053c8 <__ieee754_acos>
 8005046:	4622      	mov	r2, r4
 8005048:	462b      	mov	r3, r5
 800504a:	4620      	mov	r0, r4
 800504c:	4629      	mov	r1, r5
 800504e:	eeb0 8a40 	vmov.f32	s16, s0
 8005052:	eef0 8a60 	vmov.f32	s17, s1
 8005056:	f7fb fd69 	bl	8000b2c <__aeabi_dcmpun>
 800505a:	b9a8      	cbnz	r0, 8005088 <acos+0x50>
 800505c:	ec45 4b10 	vmov	d0, r4, r5
 8005060:	f000 f8ba 	bl	80051d8 <fabs>
 8005064:	4b0c      	ldr	r3, [pc, #48]	; (8005098 <acos+0x60>)
 8005066:	ec51 0b10 	vmov	r0, r1, d0
 800506a:	2200      	movs	r2, #0
 800506c:	f7fb fd54 	bl	8000b18 <__aeabi_dcmpgt>
 8005070:	b150      	cbz	r0, 8005088 <acos+0x50>
 8005072:	f001 fe0b 	bl	8006c8c <__errno>
 8005076:	ecbd 8b02 	vpop	{d8}
 800507a:	2321      	movs	r3, #33	; 0x21
 800507c:	6003      	str	r3, [r0, #0]
 800507e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005082:	4806      	ldr	r0, [pc, #24]	; (800509c <acos+0x64>)
 8005084:	f000 b8bc 	b.w	8005200 <nan>
 8005088:	eeb0 0a48 	vmov.f32	s0, s16
 800508c:	eef0 0a68 	vmov.f32	s1, s17
 8005090:	ecbd 8b02 	vpop	{d8}
 8005094:	bd38      	pop	{r3, r4, r5, pc}
 8005096:	bf00      	nop
 8005098:	3ff00000 	.word	0x3ff00000
 800509c:	08008530 	.word	0x08008530

080050a0 <pow>:
 80050a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a2:	ed2d 8b02 	vpush	{d8}
 80050a6:	eeb0 8a40 	vmov.f32	s16, s0
 80050aa:	eef0 8a60 	vmov.f32	s17, s1
 80050ae:	ec55 4b11 	vmov	r4, r5, d1
 80050b2:	f000 fbe9 	bl	8005888 <__ieee754_pow>
 80050b6:	4622      	mov	r2, r4
 80050b8:	462b      	mov	r3, r5
 80050ba:	4620      	mov	r0, r4
 80050bc:	4629      	mov	r1, r5
 80050be:	ec57 6b10 	vmov	r6, r7, d0
 80050c2:	f7fb fd33 	bl	8000b2c <__aeabi_dcmpun>
 80050c6:	2800      	cmp	r0, #0
 80050c8:	d13b      	bne.n	8005142 <pow+0xa2>
 80050ca:	ec51 0b18 	vmov	r0, r1, d8
 80050ce:	2200      	movs	r2, #0
 80050d0:	2300      	movs	r3, #0
 80050d2:	f7fb fcf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80050d6:	b1b8      	cbz	r0, 8005108 <pow+0x68>
 80050d8:	2200      	movs	r2, #0
 80050da:	2300      	movs	r3, #0
 80050dc:	4620      	mov	r0, r4
 80050de:	4629      	mov	r1, r5
 80050e0:	f7fb fcf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80050e4:	2800      	cmp	r0, #0
 80050e6:	d146      	bne.n	8005176 <pow+0xd6>
 80050e8:	ec45 4b10 	vmov	d0, r4, r5
 80050ec:	f000 f87d 	bl	80051ea <finite>
 80050f0:	b338      	cbz	r0, 8005142 <pow+0xa2>
 80050f2:	2200      	movs	r2, #0
 80050f4:	2300      	movs	r3, #0
 80050f6:	4620      	mov	r0, r4
 80050f8:	4629      	mov	r1, r5
 80050fa:	f7fb fcef 	bl	8000adc <__aeabi_dcmplt>
 80050fe:	b300      	cbz	r0, 8005142 <pow+0xa2>
 8005100:	f001 fdc4 	bl	8006c8c <__errno>
 8005104:	2322      	movs	r3, #34	; 0x22
 8005106:	e01b      	b.n	8005140 <pow+0xa0>
 8005108:	ec47 6b10 	vmov	d0, r6, r7
 800510c:	f000 f86d 	bl	80051ea <finite>
 8005110:	b9e0      	cbnz	r0, 800514c <pow+0xac>
 8005112:	eeb0 0a48 	vmov.f32	s0, s16
 8005116:	eef0 0a68 	vmov.f32	s1, s17
 800511a:	f000 f866 	bl	80051ea <finite>
 800511e:	b1a8      	cbz	r0, 800514c <pow+0xac>
 8005120:	ec45 4b10 	vmov	d0, r4, r5
 8005124:	f000 f861 	bl	80051ea <finite>
 8005128:	b180      	cbz	r0, 800514c <pow+0xac>
 800512a:	4632      	mov	r2, r6
 800512c:	463b      	mov	r3, r7
 800512e:	4630      	mov	r0, r6
 8005130:	4639      	mov	r1, r7
 8005132:	f7fb fcfb 	bl	8000b2c <__aeabi_dcmpun>
 8005136:	2800      	cmp	r0, #0
 8005138:	d0e2      	beq.n	8005100 <pow+0x60>
 800513a:	f001 fda7 	bl	8006c8c <__errno>
 800513e:	2321      	movs	r3, #33	; 0x21
 8005140:	6003      	str	r3, [r0, #0]
 8005142:	ecbd 8b02 	vpop	{d8}
 8005146:	ec47 6b10 	vmov	d0, r6, r7
 800514a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800514c:	2200      	movs	r2, #0
 800514e:	2300      	movs	r3, #0
 8005150:	4630      	mov	r0, r6
 8005152:	4639      	mov	r1, r7
 8005154:	f7fb fcb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005158:	2800      	cmp	r0, #0
 800515a:	d0f2      	beq.n	8005142 <pow+0xa2>
 800515c:	eeb0 0a48 	vmov.f32	s0, s16
 8005160:	eef0 0a68 	vmov.f32	s1, s17
 8005164:	f000 f841 	bl	80051ea <finite>
 8005168:	2800      	cmp	r0, #0
 800516a:	d0ea      	beq.n	8005142 <pow+0xa2>
 800516c:	ec45 4b10 	vmov	d0, r4, r5
 8005170:	f000 f83b 	bl	80051ea <finite>
 8005174:	e7c3      	b.n	80050fe <pow+0x5e>
 8005176:	4f01      	ldr	r7, [pc, #4]	; (800517c <pow+0xdc>)
 8005178:	2600      	movs	r6, #0
 800517a:	e7e2      	b.n	8005142 <pow+0xa2>
 800517c:	3ff00000 	.word	0x3ff00000

08005180 <sqrt>:
 8005180:	b538      	push	{r3, r4, r5, lr}
 8005182:	ed2d 8b02 	vpush	{d8}
 8005186:	ec55 4b10 	vmov	r4, r5, d0
 800518a:	f000 f841 	bl	8005210 <__ieee754_sqrt>
 800518e:	4622      	mov	r2, r4
 8005190:	462b      	mov	r3, r5
 8005192:	4620      	mov	r0, r4
 8005194:	4629      	mov	r1, r5
 8005196:	eeb0 8a40 	vmov.f32	s16, s0
 800519a:	eef0 8a60 	vmov.f32	s17, s1
 800519e:	f7fb fcc5 	bl	8000b2c <__aeabi_dcmpun>
 80051a2:	b990      	cbnz	r0, 80051ca <sqrt+0x4a>
 80051a4:	2200      	movs	r2, #0
 80051a6:	2300      	movs	r3, #0
 80051a8:	4620      	mov	r0, r4
 80051aa:	4629      	mov	r1, r5
 80051ac:	f7fb fc96 	bl	8000adc <__aeabi_dcmplt>
 80051b0:	b158      	cbz	r0, 80051ca <sqrt+0x4a>
 80051b2:	f001 fd6b 	bl	8006c8c <__errno>
 80051b6:	2321      	movs	r3, #33	; 0x21
 80051b8:	6003      	str	r3, [r0, #0]
 80051ba:	2200      	movs	r2, #0
 80051bc:	2300      	movs	r3, #0
 80051be:	4610      	mov	r0, r2
 80051c0:	4619      	mov	r1, r3
 80051c2:	f7fb fb43 	bl	800084c <__aeabi_ddiv>
 80051c6:	ec41 0b18 	vmov	d8, r0, r1
 80051ca:	eeb0 0a48 	vmov.f32	s0, s16
 80051ce:	eef0 0a68 	vmov.f32	s1, s17
 80051d2:	ecbd 8b02 	vpop	{d8}
 80051d6:	bd38      	pop	{r3, r4, r5, pc}

080051d8 <fabs>:
 80051d8:	ec51 0b10 	vmov	r0, r1, d0
 80051dc:	ee10 2a10 	vmov	r2, s0
 80051e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80051e4:	ec43 2b10 	vmov	d0, r2, r3
 80051e8:	4770      	bx	lr

080051ea <finite>:
 80051ea:	b082      	sub	sp, #8
 80051ec:	ed8d 0b00 	vstr	d0, [sp]
 80051f0:	9801      	ldr	r0, [sp, #4]
 80051f2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80051f6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80051fa:	0fc0      	lsrs	r0, r0, #31
 80051fc:	b002      	add	sp, #8
 80051fe:	4770      	bx	lr

08005200 <nan>:
 8005200:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005208 <nan+0x8>
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	00000000 	.word	0x00000000
 800520c:	7ff80000 	.word	0x7ff80000

08005210 <__ieee754_sqrt>:
 8005210:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005214:	ec55 4b10 	vmov	r4, r5, d0
 8005218:	4e67      	ldr	r6, [pc, #412]	; (80053b8 <__ieee754_sqrt+0x1a8>)
 800521a:	43ae      	bics	r6, r5
 800521c:	ee10 0a10 	vmov	r0, s0
 8005220:	ee10 2a10 	vmov	r2, s0
 8005224:	4629      	mov	r1, r5
 8005226:	462b      	mov	r3, r5
 8005228:	d10d      	bne.n	8005246 <__ieee754_sqrt+0x36>
 800522a:	f7fb f9e5 	bl	80005f8 <__aeabi_dmul>
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	4620      	mov	r0, r4
 8005234:	4629      	mov	r1, r5
 8005236:	f7fb f829 	bl	800028c <__adddf3>
 800523a:	4604      	mov	r4, r0
 800523c:	460d      	mov	r5, r1
 800523e:	ec45 4b10 	vmov	d0, r4, r5
 8005242:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005246:	2d00      	cmp	r5, #0
 8005248:	dc0b      	bgt.n	8005262 <__ieee754_sqrt+0x52>
 800524a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800524e:	4326      	orrs	r6, r4
 8005250:	d0f5      	beq.n	800523e <__ieee754_sqrt+0x2e>
 8005252:	b135      	cbz	r5, 8005262 <__ieee754_sqrt+0x52>
 8005254:	f7fb f818 	bl	8000288 <__aeabi_dsub>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	f7fb faf6 	bl	800084c <__aeabi_ddiv>
 8005260:	e7eb      	b.n	800523a <__ieee754_sqrt+0x2a>
 8005262:	1509      	asrs	r1, r1, #20
 8005264:	f000 808d 	beq.w	8005382 <__ieee754_sqrt+0x172>
 8005268:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800526c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8005270:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005274:	07c9      	lsls	r1, r1, #31
 8005276:	bf5c      	itt	pl
 8005278:	005b      	lslpl	r3, r3, #1
 800527a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800527e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005282:	bf58      	it	pl
 8005284:	0052      	lslpl	r2, r2, #1
 8005286:	2500      	movs	r5, #0
 8005288:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800528c:	1076      	asrs	r6, r6, #1
 800528e:	0052      	lsls	r2, r2, #1
 8005290:	f04f 0e16 	mov.w	lr, #22
 8005294:	46ac      	mov	ip, r5
 8005296:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800529a:	eb0c 0001 	add.w	r0, ip, r1
 800529e:	4298      	cmp	r0, r3
 80052a0:	bfde      	ittt	le
 80052a2:	1a1b      	suble	r3, r3, r0
 80052a4:	eb00 0c01 	addle.w	ip, r0, r1
 80052a8:	186d      	addle	r5, r5, r1
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	f1be 0e01 	subs.w	lr, lr, #1
 80052b0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80052b4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80052b8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80052bc:	d1ed      	bne.n	800529a <__ieee754_sqrt+0x8a>
 80052be:	4674      	mov	r4, lr
 80052c0:	2720      	movs	r7, #32
 80052c2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80052c6:	4563      	cmp	r3, ip
 80052c8:	eb01 000e 	add.w	r0, r1, lr
 80052cc:	dc02      	bgt.n	80052d4 <__ieee754_sqrt+0xc4>
 80052ce:	d113      	bne.n	80052f8 <__ieee754_sqrt+0xe8>
 80052d0:	4290      	cmp	r0, r2
 80052d2:	d811      	bhi.n	80052f8 <__ieee754_sqrt+0xe8>
 80052d4:	2800      	cmp	r0, #0
 80052d6:	eb00 0e01 	add.w	lr, r0, r1
 80052da:	da57      	bge.n	800538c <__ieee754_sqrt+0x17c>
 80052dc:	f1be 0f00 	cmp.w	lr, #0
 80052e0:	db54      	blt.n	800538c <__ieee754_sqrt+0x17c>
 80052e2:	f10c 0801 	add.w	r8, ip, #1
 80052e6:	eba3 030c 	sub.w	r3, r3, ip
 80052ea:	4290      	cmp	r0, r2
 80052ec:	bf88      	it	hi
 80052ee:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80052f2:	1a12      	subs	r2, r2, r0
 80052f4:	440c      	add	r4, r1
 80052f6:	46c4      	mov	ip, r8
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	3f01      	subs	r7, #1
 80052fc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005300:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005304:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005308:	d1dd      	bne.n	80052c6 <__ieee754_sqrt+0xb6>
 800530a:	4313      	orrs	r3, r2
 800530c:	d01b      	beq.n	8005346 <__ieee754_sqrt+0x136>
 800530e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80053bc <__ieee754_sqrt+0x1ac>
 8005312:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80053c0 <__ieee754_sqrt+0x1b0>
 8005316:	e9da 0100 	ldrd	r0, r1, [sl]
 800531a:	e9db 2300 	ldrd	r2, r3, [fp]
 800531e:	f7fa ffb3 	bl	8000288 <__aeabi_dsub>
 8005322:	e9da 8900 	ldrd	r8, r9, [sl]
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	4640      	mov	r0, r8
 800532c:	4649      	mov	r1, r9
 800532e:	f7fb fbdf 	bl	8000af0 <__aeabi_dcmple>
 8005332:	b140      	cbz	r0, 8005346 <__ieee754_sqrt+0x136>
 8005334:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005338:	e9da 0100 	ldrd	r0, r1, [sl]
 800533c:	e9db 2300 	ldrd	r2, r3, [fp]
 8005340:	d126      	bne.n	8005390 <__ieee754_sqrt+0x180>
 8005342:	3501      	adds	r5, #1
 8005344:	463c      	mov	r4, r7
 8005346:	106a      	asrs	r2, r5, #1
 8005348:	0863      	lsrs	r3, r4, #1
 800534a:	07e9      	lsls	r1, r5, #31
 800534c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005350:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005354:	bf48      	it	mi
 8005356:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800535a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800535e:	461c      	mov	r4, r3
 8005360:	e76d      	b.n	800523e <__ieee754_sqrt+0x2e>
 8005362:	0ad3      	lsrs	r3, r2, #11
 8005364:	3815      	subs	r0, #21
 8005366:	0552      	lsls	r2, r2, #21
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0fa      	beq.n	8005362 <__ieee754_sqrt+0x152>
 800536c:	02dc      	lsls	r4, r3, #11
 800536e:	d50a      	bpl.n	8005386 <__ieee754_sqrt+0x176>
 8005370:	f1c1 0420 	rsb	r4, r1, #32
 8005374:	fa22 f404 	lsr.w	r4, r2, r4
 8005378:	1e4d      	subs	r5, r1, #1
 800537a:	408a      	lsls	r2, r1
 800537c:	4323      	orrs	r3, r4
 800537e:	1b41      	subs	r1, r0, r5
 8005380:	e772      	b.n	8005268 <__ieee754_sqrt+0x58>
 8005382:	4608      	mov	r0, r1
 8005384:	e7f0      	b.n	8005368 <__ieee754_sqrt+0x158>
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	3101      	adds	r1, #1
 800538a:	e7ef      	b.n	800536c <__ieee754_sqrt+0x15c>
 800538c:	46e0      	mov	r8, ip
 800538e:	e7aa      	b.n	80052e6 <__ieee754_sqrt+0xd6>
 8005390:	f7fa ff7c 	bl	800028c <__adddf3>
 8005394:	e9da 8900 	ldrd	r8, r9, [sl]
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	4640      	mov	r0, r8
 800539e:	4649      	mov	r1, r9
 80053a0:	f7fb fb9c 	bl	8000adc <__aeabi_dcmplt>
 80053a4:	b120      	cbz	r0, 80053b0 <__ieee754_sqrt+0x1a0>
 80053a6:	1ca0      	adds	r0, r4, #2
 80053a8:	bf08      	it	eq
 80053aa:	3501      	addeq	r5, #1
 80053ac:	3402      	adds	r4, #2
 80053ae:	e7ca      	b.n	8005346 <__ieee754_sqrt+0x136>
 80053b0:	3401      	adds	r4, #1
 80053b2:	f024 0401 	bic.w	r4, r4, #1
 80053b6:	e7c6      	b.n	8005346 <__ieee754_sqrt+0x136>
 80053b8:	7ff00000 	.word	0x7ff00000
 80053bc:	20000010 	.word	0x20000010
 80053c0:	20000018 	.word	0x20000018
 80053c4:	00000000 	.word	0x00000000

080053c8 <__ieee754_acos>:
 80053c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053cc:	ec55 4b10 	vmov	r4, r5, d0
 80053d0:	49b7      	ldr	r1, [pc, #732]	; (80056b0 <__ieee754_acos+0x2e8>)
 80053d2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80053d6:	428b      	cmp	r3, r1
 80053d8:	dd1b      	ble.n	8005412 <__ieee754_acos+0x4a>
 80053da:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80053de:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80053e2:	4323      	orrs	r3, r4
 80053e4:	d106      	bne.n	80053f4 <__ieee754_acos+0x2c>
 80053e6:	2d00      	cmp	r5, #0
 80053e8:	f300 8211 	bgt.w	800580e <__ieee754_acos+0x446>
 80053ec:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8005648 <__ieee754_acos+0x280>
 80053f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f4:	ee10 2a10 	vmov	r2, s0
 80053f8:	462b      	mov	r3, r5
 80053fa:	ee10 0a10 	vmov	r0, s0
 80053fe:	4629      	mov	r1, r5
 8005400:	f7fa ff42 	bl	8000288 <__aeabi_dsub>
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	f7fb fa20 	bl	800084c <__aeabi_ddiv>
 800540c:	ec41 0b10 	vmov	d0, r0, r1
 8005410:	e7ee      	b.n	80053f0 <__ieee754_acos+0x28>
 8005412:	49a8      	ldr	r1, [pc, #672]	; (80056b4 <__ieee754_acos+0x2ec>)
 8005414:	428b      	cmp	r3, r1
 8005416:	f300 8087 	bgt.w	8005528 <__ieee754_acos+0x160>
 800541a:	4aa7      	ldr	r2, [pc, #668]	; (80056b8 <__ieee754_acos+0x2f0>)
 800541c:	4293      	cmp	r3, r2
 800541e:	f340 81f9 	ble.w	8005814 <__ieee754_acos+0x44c>
 8005422:	ee10 2a10 	vmov	r2, s0
 8005426:	ee10 0a10 	vmov	r0, s0
 800542a:	462b      	mov	r3, r5
 800542c:	4629      	mov	r1, r5
 800542e:	f7fb f8e3 	bl	80005f8 <__aeabi_dmul>
 8005432:	a387      	add	r3, pc, #540	; (adr r3, 8005650 <__ieee754_acos+0x288>)
 8005434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005438:	4606      	mov	r6, r0
 800543a:	460f      	mov	r7, r1
 800543c:	f7fb f8dc 	bl	80005f8 <__aeabi_dmul>
 8005440:	a385      	add	r3, pc, #532	; (adr r3, 8005658 <__ieee754_acos+0x290>)
 8005442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005446:	f7fa ff21 	bl	800028c <__adddf3>
 800544a:	4632      	mov	r2, r6
 800544c:	463b      	mov	r3, r7
 800544e:	f7fb f8d3 	bl	80005f8 <__aeabi_dmul>
 8005452:	a383      	add	r3, pc, #524	; (adr r3, 8005660 <__ieee754_acos+0x298>)
 8005454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005458:	f7fa ff16 	bl	8000288 <__aeabi_dsub>
 800545c:	4632      	mov	r2, r6
 800545e:	463b      	mov	r3, r7
 8005460:	f7fb f8ca 	bl	80005f8 <__aeabi_dmul>
 8005464:	a380      	add	r3, pc, #512	; (adr r3, 8005668 <__ieee754_acos+0x2a0>)
 8005466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546a:	f7fa ff0f 	bl	800028c <__adddf3>
 800546e:	4632      	mov	r2, r6
 8005470:	463b      	mov	r3, r7
 8005472:	f7fb f8c1 	bl	80005f8 <__aeabi_dmul>
 8005476:	a37e      	add	r3, pc, #504	; (adr r3, 8005670 <__ieee754_acos+0x2a8>)
 8005478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547c:	f7fa ff04 	bl	8000288 <__aeabi_dsub>
 8005480:	4632      	mov	r2, r6
 8005482:	463b      	mov	r3, r7
 8005484:	f7fb f8b8 	bl	80005f8 <__aeabi_dmul>
 8005488:	a37b      	add	r3, pc, #492	; (adr r3, 8005678 <__ieee754_acos+0x2b0>)
 800548a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548e:	f7fa fefd 	bl	800028c <__adddf3>
 8005492:	4632      	mov	r2, r6
 8005494:	463b      	mov	r3, r7
 8005496:	f7fb f8af 	bl	80005f8 <__aeabi_dmul>
 800549a:	a379      	add	r3, pc, #484	; (adr r3, 8005680 <__ieee754_acos+0x2b8>)
 800549c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a0:	4680      	mov	r8, r0
 80054a2:	4689      	mov	r9, r1
 80054a4:	4630      	mov	r0, r6
 80054a6:	4639      	mov	r1, r7
 80054a8:	f7fb f8a6 	bl	80005f8 <__aeabi_dmul>
 80054ac:	a376      	add	r3, pc, #472	; (adr r3, 8005688 <__ieee754_acos+0x2c0>)
 80054ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b2:	f7fa fee9 	bl	8000288 <__aeabi_dsub>
 80054b6:	4632      	mov	r2, r6
 80054b8:	463b      	mov	r3, r7
 80054ba:	f7fb f89d 	bl	80005f8 <__aeabi_dmul>
 80054be:	a374      	add	r3, pc, #464	; (adr r3, 8005690 <__ieee754_acos+0x2c8>)
 80054c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c4:	f7fa fee2 	bl	800028c <__adddf3>
 80054c8:	4632      	mov	r2, r6
 80054ca:	463b      	mov	r3, r7
 80054cc:	f7fb f894 	bl	80005f8 <__aeabi_dmul>
 80054d0:	a371      	add	r3, pc, #452	; (adr r3, 8005698 <__ieee754_acos+0x2d0>)
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	f7fa fed7 	bl	8000288 <__aeabi_dsub>
 80054da:	4632      	mov	r2, r6
 80054dc:	463b      	mov	r3, r7
 80054de:	f7fb f88b 	bl	80005f8 <__aeabi_dmul>
 80054e2:	4b76      	ldr	r3, [pc, #472]	; (80056bc <__ieee754_acos+0x2f4>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	f7fa fed1 	bl	800028c <__adddf3>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4640      	mov	r0, r8
 80054f0:	4649      	mov	r1, r9
 80054f2:	f7fb f9ab 	bl	800084c <__aeabi_ddiv>
 80054f6:	4622      	mov	r2, r4
 80054f8:	462b      	mov	r3, r5
 80054fa:	f7fb f87d 	bl	80005f8 <__aeabi_dmul>
 80054fe:	4602      	mov	r2, r0
 8005500:	460b      	mov	r3, r1
 8005502:	a167      	add	r1, pc, #412	; (adr r1, 80056a0 <__ieee754_acos+0x2d8>)
 8005504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005508:	f7fa febe 	bl	8000288 <__aeabi_dsub>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4620      	mov	r0, r4
 8005512:	4629      	mov	r1, r5
 8005514:	f7fa feb8 	bl	8000288 <__aeabi_dsub>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	a162      	add	r1, pc, #392	; (adr r1, 80056a8 <__ieee754_acos+0x2e0>)
 800551e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005522:	f7fa feb1 	bl	8000288 <__aeabi_dsub>
 8005526:	e771      	b.n	800540c <__ieee754_acos+0x44>
 8005528:	2d00      	cmp	r5, #0
 800552a:	f280 80cb 	bge.w	80056c4 <__ieee754_acos+0x2fc>
 800552e:	ee10 0a10 	vmov	r0, s0
 8005532:	4b62      	ldr	r3, [pc, #392]	; (80056bc <__ieee754_acos+0x2f4>)
 8005534:	2200      	movs	r2, #0
 8005536:	4629      	mov	r1, r5
 8005538:	f7fa fea8 	bl	800028c <__adddf3>
 800553c:	4b60      	ldr	r3, [pc, #384]	; (80056c0 <__ieee754_acos+0x2f8>)
 800553e:	2200      	movs	r2, #0
 8005540:	f7fb f85a 	bl	80005f8 <__aeabi_dmul>
 8005544:	a342      	add	r3, pc, #264	; (adr r3, 8005650 <__ieee754_acos+0x288>)
 8005546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554a:	4604      	mov	r4, r0
 800554c:	460d      	mov	r5, r1
 800554e:	f7fb f853 	bl	80005f8 <__aeabi_dmul>
 8005552:	a341      	add	r3, pc, #260	; (adr r3, 8005658 <__ieee754_acos+0x290>)
 8005554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005558:	f7fa fe98 	bl	800028c <__adddf3>
 800555c:	4622      	mov	r2, r4
 800555e:	462b      	mov	r3, r5
 8005560:	f7fb f84a 	bl	80005f8 <__aeabi_dmul>
 8005564:	a33e      	add	r3, pc, #248	; (adr r3, 8005660 <__ieee754_acos+0x298>)
 8005566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556a:	f7fa fe8d 	bl	8000288 <__aeabi_dsub>
 800556e:	4622      	mov	r2, r4
 8005570:	462b      	mov	r3, r5
 8005572:	f7fb f841 	bl	80005f8 <__aeabi_dmul>
 8005576:	a33c      	add	r3, pc, #240	; (adr r3, 8005668 <__ieee754_acos+0x2a0>)
 8005578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557c:	f7fa fe86 	bl	800028c <__adddf3>
 8005580:	4622      	mov	r2, r4
 8005582:	462b      	mov	r3, r5
 8005584:	f7fb f838 	bl	80005f8 <__aeabi_dmul>
 8005588:	a339      	add	r3, pc, #228	; (adr r3, 8005670 <__ieee754_acos+0x2a8>)
 800558a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558e:	f7fa fe7b 	bl	8000288 <__aeabi_dsub>
 8005592:	4622      	mov	r2, r4
 8005594:	462b      	mov	r3, r5
 8005596:	f7fb f82f 	bl	80005f8 <__aeabi_dmul>
 800559a:	a337      	add	r3, pc, #220	; (adr r3, 8005678 <__ieee754_acos+0x2b0>)
 800559c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a0:	f7fa fe74 	bl	800028c <__adddf3>
 80055a4:	4622      	mov	r2, r4
 80055a6:	462b      	mov	r3, r5
 80055a8:	f7fb f826 	bl	80005f8 <__aeabi_dmul>
 80055ac:	ec45 4b10 	vmov	d0, r4, r5
 80055b0:	4680      	mov	r8, r0
 80055b2:	4689      	mov	r9, r1
 80055b4:	f7ff fe2c 	bl	8005210 <__ieee754_sqrt>
 80055b8:	a331      	add	r3, pc, #196	; (adr r3, 8005680 <__ieee754_acos+0x2b8>)
 80055ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055be:	4620      	mov	r0, r4
 80055c0:	4629      	mov	r1, r5
 80055c2:	ec57 6b10 	vmov	r6, r7, d0
 80055c6:	f7fb f817 	bl	80005f8 <__aeabi_dmul>
 80055ca:	a32f      	add	r3, pc, #188	; (adr r3, 8005688 <__ieee754_acos+0x2c0>)
 80055cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d0:	f7fa fe5a 	bl	8000288 <__aeabi_dsub>
 80055d4:	4622      	mov	r2, r4
 80055d6:	462b      	mov	r3, r5
 80055d8:	f7fb f80e 	bl	80005f8 <__aeabi_dmul>
 80055dc:	a32c      	add	r3, pc, #176	; (adr r3, 8005690 <__ieee754_acos+0x2c8>)
 80055de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e2:	f7fa fe53 	bl	800028c <__adddf3>
 80055e6:	4622      	mov	r2, r4
 80055e8:	462b      	mov	r3, r5
 80055ea:	f7fb f805 	bl	80005f8 <__aeabi_dmul>
 80055ee:	a32a      	add	r3, pc, #168	; (adr r3, 8005698 <__ieee754_acos+0x2d0>)
 80055f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f4:	f7fa fe48 	bl	8000288 <__aeabi_dsub>
 80055f8:	4622      	mov	r2, r4
 80055fa:	462b      	mov	r3, r5
 80055fc:	f7fa fffc 	bl	80005f8 <__aeabi_dmul>
 8005600:	4b2e      	ldr	r3, [pc, #184]	; (80056bc <__ieee754_acos+0x2f4>)
 8005602:	2200      	movs	r2, #0
 8005604:	f7fa fe42 	bl	800028c <__adddf3>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	4640      	mov	r0, r8
 800560e:	4649      	mov	r1, r9
 8005610:	f7fb f91c 	bl	800084c <__aeabi_ddiv>
 8005614:	4632      	mov	r2, r6
 8005616:	463b      	mov	r3, r7
 8005618:	f7fa ffee 	bl	80005f8 <__aeabi_dmul>
 800561c:	a320      	add	r3, pc, #128	; (adr r3, 80056a0 <__ieee754_acos+0x2d8>)
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	f7fa fe31 	bl	8000288 <__aeabi_dsub>
 8005626:	4632      	mov	r2, r6
 8005628:	463b      	mov	r3, r7
 800562a:	f7fa fe2f 	bl	800028c <__adddf3>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	f7fa fe2b 	bl	800028c <__adddf3>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	a103      	add	r1, pc, #12	; (adr r1, 8005648 <__ieee754_acos+0x280>)
 800563c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005640:	e76f      	b.n	8005522 <__ieee754_acos+0x15a>
 8005642:	bf00      	nop
 8005644:	f3af 8000 	nop.w
 8005648:	54442d18 	.word	0x54442d18
 800564c:	400921fb 	.word	0x400921fb
 8005650:	0dfdf709 	.word	0x0dfdf709
 8005654:	3f023de1 	.word	0x3f023de1
 8005658:	7501b288 	.word	0x7501b288
 800565c:	3f49efe0 	.word	0x3f49efe0
 8005660:	b5688f3b 	.word	0xb5688f3b
 8005664:	3fa48228 	.word	0x3fa48228
 8005668:	0e884455 	.word	0x0e884455
 800566c:	3fc9c155 	.word	0x3fc9c155
 8005670:	03eb6f7d 	.word	0x03eb6f7d
 8005674:	3fd4d612 	.word	0x3fd4d612
 8005678:	55555555 	.word	0x55555555
 800567c:	3fc55555 	.word	0x3fc55555
 8005680:	b12e9282 	.word	0xb12e9282
 8005684:	3fb3b8c5 	.word	0x3fb3b8c5
 8005688:	1b8d0159 	.word	0x1b8d0159
 800568c:	3fe6066c 	.word	0x3fe6066c
 8005690:	9c598ac8 	.word	0x9c598ac8
 8005694:	40002ae5 	.word	0x40002ae5
 8005698:	1c8a2d4b 	.word	0x1c8a2d4b
 800569c:	40033a27 	.word	0x40033a27
 80056a0:	33145c07 	.word	0x33145c07
 80056a4:	3c91a626 	.word	0x3c91a626
 80056a8:	54442d18 	.word	0x54442d18
 80056ac:	3ff921fb 	.word	0x3ff921fb
 80056b0:	3fefffff 	.word	0x3fefffff
 80056b4:	3fdfffff 	.word	0x3fdfffff
 80056b8:	3c600000 	.word	0x3c600000
 80056bc:	3ff00000 	.word	0x3ff00000
 80056c0:	3fe00000 	.word	0x3fe00000
 80056c4:	ee10 2a10 	vmov	r2, s0
 80056c8:	462b      	mov	r3, r5
 80056ca:	496d      	ldr	r1, [pc, #436]	; (8005880 <__ieee754_acos+0x4b8>)
 80056cc:	2000      	movs	r0, #0
 80056ce:	f7fa fddb 	bl	8000288 <__aeabi_dsub>
 80056d2:	4b6c      	ldr	r3, [pc, #432]	; (8005884 <__ieee754_acos+0x4bc>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	f7fa ff8f 	bl	80005f8 <__aeabi_dmul>
 80056da:	4604      	mov	r4, r0
 80056dc:	460d      	mov	r5, r1
 80056de:	ec45 4b10 	vmov	d0, r4, r5
 80056e2:	f7ff fd95 	bl	8005210 <__ieee754_sqrt>
 80056e6:	a34e      	add	r3, pc, #312	; (adr r3, 8005820 <__ieee754_acos+0x458>)
 80056e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ec:	4620      	mov	r0, r4
 80056ee:	4629      	mov	r1, r5
 80056f0:	ec59 8b10 	vmov	r8, r9, d0
 80056f4:	f7fa ff80 	bl	80005f8 <__aeabi_dmul>
 80056f8:	a34b      	add	r3, pc, #300	; (adr r3, 8005828 <__ieee754_acos+0x460>)
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f7fa fdc5 	bl	800028c <__adddf3>
 8005702:	4622      	mov	r2, r4
 8005704:	462b      	mov	r3, r5
 8005706:	f7fa ff77 	bl	80005f8 <__aeabi_dmul>
 800570a:	a349      	add	r3, pc, #292	; (adr r3, 8005830 <__ieee754_acos+0x468>)
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	f7fa fdba 	bl	8000288 <__aeabi_dsub>
 8005714:	4622      	mov	r2, r4
 8005716:	462b      	mov	r3, r5
 8005718:	f7fa ff6e 	bl	80005f8 <__aeabi_dmul>
 800571c:	a346      	add	r3, pc, #280	; (adr r3, 8005838 <__ieee754_acos+0x470>)
 800571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005722:	f7fa fdb3 	bl	800028c <__adddf3>
 8005726:	4622      	mov	r2, r4
 8005728:	462b      	mov	r3, r5
 800572a:	f7fa ff65 	bl	80005f8 <__aeabi_dmul>
 800572e:	a344      	add	r3, pc, #272	; (adr r3, 8005840 <__ieee754_acos+0x478>)
 8005730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005734:	f7fa fda8 	bl	8000288 <__aeabi_dsub>
 8005738:	4622      	mov	r2, r4
 800573a:	462b      	mov	r3, r5
 800573c:	f7fa ff5c 	bl	80005f8 <__aeabi_dmul>
 8005740:	a341      	add	r3, pc, #260	; (adr r3, 8005848 <__ieee754_acos+0x480>)
 8005742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005746:	f7fa fda1 	bl	800028c <__adddf3>
 800574a:	4622      	mov	r2, r4
 800574c:	462b      	mov	r3, r5
 800574e:	f7fa ff53 	bl	80005f8 <__aeabi_dmul>
 8005752:	a33f      	add	r3, pc, #252	; (adr r3, 8005850 <__ieee754_acos+0x488>)
 8005754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005758:	4682      	mov	sl, r0
 800575a:	468b      	mov	fp, r1
 800575c:	4620      	mov	r0, r4
 800575e:	4629      	mov	r1, r5
 8005760:	f7fa ff4a 	bl	80005f8 <__aeabi_dmul>
 8005764:	a33c      	add	r3, pc, #240	; (adr r3, 8005858 <__ieee754_acos+0x490>)
 8005766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576a:	f7fa fd8d 	bl	8000288 <__aeabi_dsub>
 800576e:	4622      	mov	r2, r4
 8005770:	462b      	mov	r3, r5
 8005772:	f7fa ff41 	bl	80005f8 <__aeabi_dmul>
 8005776:	a33a      	add	r3, pc, #232	; (adr r3, 8005860 <__ieee754_acos+0x498>)
 8005778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577c:	f7fa fd86 	bl	800028c <__adddf3>
 8005780:	4622      	mov	r2, r4
 8005782:	462b      	mov	r3, r5
 8005784:	f7fa ff38 	bl	80005f8 <__aeabi_dmul>
 8005788:	a337      	add	r3, pc, #220	; (adr r3, 8005868 <__ieee754_acos+0x4a0>)
 800578a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578e:	f7fa fd7b 	bl	8000288 <__aeabi_dsub>
 8005792:	4622      	mov	r2, r4
 8005794:	462b      	mov	r3, r5
 8005796:	f7fa ff2f 	bl	80005f8 <__aeabi_dmul>
 800579a:	4b39      	ldr	r3, [pc, #228]	; (8005880 <__ieee754_acos+0x4b8>)
 800579c:	2200      	movs	r2, #0
 800579e:	f7fa fd75 	bl	800028c <__adddf3>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	4650      	mov	r0, sl
 80057a8:	4659      	mov	r1, fp
 80057aa:	f7fb f84f 	bl	800084c <__aeabi_ddiv>
 80057ae:	4642      	mov	r2, r8
 80057b0:	464b      	mov	r3, r9
 80057b2:	f7fa ff21 	bl	80005f8 <__aeabi_dmul>
 80057b6:	2600      	movs	r6, #0
 80057b8:	4682      	mov	sl, r0
 80057ba:	468b      	mov	fp, r1
 80057bc:	4632      	mov	r2, r6
 80057be:	464b      	mov	r3, r9
 80057c0:	4630      	mov	r0, r6
 80057c2:	4649      	mov	r1, r9
 80057c4:	f7fa ff18 	bl	80005f8 <__aeabi_dmul>
 80057c8:	4602      	mov	r2, r0
 80057ca:	460b      	mov	r3, r1
 80057cc:	4620      	mov	r0, r4
 80057ce:	4629      	mov	r1, r5
 80057d0:	f7fa fd5a 	bl	8000288 <__aeabi_dsub>
 80057d4:	4632      	mov	r2, r6
 80057d6:	4604      	mov	r4, r0
 80057d8:	460d      	mov	r5, r1
 80057da:	464b      	mov	r3, r9
 80057dc:	4640      	mov	r0, r8
 80057de:	4649      	mov	r1, r9
 80057e0:	f7fa fd54 	bl	800028c <__adddf3>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	4620      	mov	r0, r4
 80057ea:	4629      	mov	r1, r5
 80057ec:	f7fb f82e 	bl	800084c <__aeabi_ddiv>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	4650      	mov	r0, sl
 80057f6:	4659      	mov	r1, fp
 80057f8:	f7fa fd48 	bl	800028c <__adddf3>
 80057fc:	4632      	mov	r2, r6
 80057fe:	464b      	mov	r3, r9
 8005800:	f7fa fd44 	bl	800028c <__adddf3>
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	f7fa fd40 	bl	800028c <__adddf3>
 800580c:	e5fe      	b.n	800540c <__ieee754_acos+0x44>
 800580e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8005870 <__ieee754_acos+0x4a8>
 8005812:	e5ed      	b.n	80053f0 <__ieee754_acos+0x28>
 8005814:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8005878 <__ieee754_acos+0x4b0>
 8005818:	e5ea      	b.n	80053f0 <__ieee754_acos+0x28>
 800581a:	bf00      	nop
 800581c:	f3af 8000 	nop.w
 8005820:	0dfdf709 	.word	0x0dfdf709
 8005824:	3f023de1 	.word	0x3f023de1
 8005828:	7501b288 	.word	0x7501b288
 800582c:	3f49efe0 	.word	0x3f49efe0
 8005830:	b5688f3b 	.word	0xb5688f3b
 8005834:	3fa48228 	.word	0x3fa48228
 8005838:	0e884455 	.word	0x0e884455
 800583c:	3fc9c155 	.word	0x3fc9c155
 8005840:	03eb6f7d 	.word	0x03eb6f7d
 8005844:	3fd4d612 	.word	0x3fd4d612
 8005848:	55555555 	.word	0x55555555
 800584c:	3fc55555 	.word	0x3fc55555
 8005850:	b12e9282 	.word	0xb12e9282
 8005854:	3fb3b8c5 	.word	0x3fb3b8c5
 8005858:	1b8d0159 	.word	0x1b8d0159
 800585c:	3fe6066c 	.word	0x3fe6066c
 8005860:	9c598ac8 	.word	0x9c598ac8
 8005864:	40002ae5 	.word	0x40002ae5
 8005868:	1c8a2d4b 	.word	0x1c8a2d4b
 800586c:	40033a27 	.word	0x40033a27
	...
 8005878:	54442d18 	.word	0x54442d18
 800587c:	3ff921fb 	.word	0x3ff921fb
 8005880:	3ff00000 	.word	0x3ff00000
 8005884:	3fe00000 	.word	0x3fe00000

08005888 <__ieee754_pow>:
 8005888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588c:	ed2d 8b06 	vpush	{d8-d10}
 8005890:	b089      	sub	sp, #36	; 0x24
 8005892:	ed8d 1b00 	vstr	d1, [sp]
 8005896:	e9dd 2900 	ldrd	r2, r9, [sp]
 800589a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800589e:	ea58 0102 	orrs.w	r1, r8, r2
 80058a2:	ec57 6b10 	vmov	r6, r7, d0
 80058a6:	d115      	bne.n	80058d4 <__ieee754_pow+0x4c>
 80058a8:	19b3      	adds	r3, r6, r6
 80058aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80058ae:	4152      	adcs	r2, r2
 80058b0:	4299      	cmp	r1, r3
 80058b2:	4b89      	ldr	r3, [pc, #548]	; (8005ad8 <__ieee754_pow+0x250>)
 80058b4:	4193      	sbcs	r3, r2
 80058b6:	f080 84d1 	bcs.w	800625c <__ieee754_pow+0x9d4>
 80058ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058be:	4630      	mov	r0, r6
 80058c0:	4639      	mov	r1, r7
 80058c2:	f7fa fce3 	bl	800028c <__adddf3>
 80058c6:	ec41 0b10 	vmov	d0, r0, r1
 80058ca:	b009      	add	sp, #36	; 0x24
 80058cc:	ecbd 8b06 	vpop	{d8-d10}
 80058d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058d4:	4b81      	ldr	r3, [pc, #516]	; (8005adc <__ieee754_pow+0x254>)
 80058d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80058da:	429c      	cmp	r4, r3
 80058dc:	ee10 aa10 	vmov	sl, s0
 80058e0:	463d      	mov	r5, r7
 80058e2:	dc06      	bgt.n	80058f2 <__ieee754_pow+0x6a>
 80058e4:	d101      	bne.n	80058ea <__ieee754_pow+0x62>
 80058e6:	2e00      	cmp	r6, #0
 80058e8:	d1e7      	bne.n	80058ba <__ieee754_pow+0x32>
 80058ea:	4598      	cmp	r8, r3
 80058ec:	dc01      	bgt.n	80058f2 <__ieee754_pow+0x6a>
 80058ee:	d10f      	bne.n	8005910 <__ieee754_pow+0x88>
 80058f0:	b172      	cbz	r2, 8005910 <__ieee754_pow+0x88>
 80058f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80058f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80058fa:	ea55 050a 	orrs.w	r5, r5, sl
 80058fe:	d1dc      	bne.n	80058ba <__ieee754_pow+0x32>
 8005900:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005904:	18db      	adds	r3, r3, r3
 8005906:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800590a:	4152      	adcs	r2, r2
 800590c:	429d      	cmp	r5, r3
 800590e:	e7d0      	b.n	80058b2 <__ieee754_pow+0x2a>
 8005910:	2d00      	cmp	r5, #0
 8005912:	da3b      	bge.n	800598c <__ieee754_pow+0x104>
 8005914:	4b72      	ldr	r3, [pc, #456]	; (8005ae0 <__ieee754_pow+0x258>)
 8005916:	4598      	cmp	r8, r3
 8005918:	dc51      	bgt.n	80059be <__ieee754_pow+0x136>
 800591a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800591e:	4598      	cmp	r8, r3
 8005920:	f340 84ab 	ble.w	800627a <__ieee754_pow+0x9f2>
 8005924:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005928:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800592c:	2b14      	cmp	r3, #20
 800592e:	dd0f      	ble.n	8005950 <__ieee754_pow+0xc8>
 8005930:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005934:	fa22 f103 	lsr.w	r1, r2, r3
 8005938:	fa01 f303 	lsl.w	r3, r1, r3
 800593c:	4293      	cmp	r3, r2
 800593e:	f040 849c 	bne.w	800627a <__ieee754_pow+0x9f2>
 8005942:	f001 0101 	and.w	r1, r1, #1
 8005946:	f1c1 0302 	rsb	r3, r1, #2
 800594a:	9304      	str	r3, [sp, #16]
 800594c:	b182      	cbz	r2, 8005970 <__ieee754_pow+0xe8>
 800594e:	e05f      	b.n	8005a10 <__ieee754_pow+0x188>
 8005950:	2a00      	cmp	r2, #0
 8005952:	d15b      	bne.n	8005a0c <__ieee754_pow+0x184>
 8005954:	f1c3 0314 	rsb	r3, r3, #20
 8005958:	fa48 f103 	asr.w	r1, r8, r3
 800595c:	fa01 f303 	lsl.w	r3, r1, r3
 8005960:	4543      	cmp	r3, r8
 8005962:	f040 8487 	bne.w	8006274 <__ieee754_pow+0x9ec>
 8005966:	f001 0101 	and.w	r1, r1, #1
 800596a:	f1c1 0302 	rsb	r3, r1, #2
 800596e:	9304      	str	r3, [sp, #16]
 8005970:	4b5c      	ldr	r3, [pc, #368]	; (8005ae4 <__ieee754_pow+0x25c>)
 8005972:	4598      	cmp	r8, r3
 8005974:	d132      	bne.n	80059dc <__ieee754_pow+0x154>
 8005976:	f1b9 0f00 	cmp.w	r9, #0
 800597a:	f280 8477 	bge.w	800626c <__ieee754_pow+0x9e4>
 800597e:	4959      	ldr	r1, [pc, #356]	; (8005ae4 <__ieee754_pow+0x25c>)
 8005980:	4632      	mov	r2, r6
 8005982:	463b      	mov	r3, r7
 8005984:	2000      	movs	r0, #0
 8005986:	f7fa ff61 	bl	800084c <__aeabi_ddiv>
 800598a:	e79c      	b.n	80058c6 <__ieee754_pow+0x3e>
 800598c:	2300      	movs	r3, #0
 800598e:	9304      	str	r3, [sp, #16]
 8005990:	2a00      	cmp	r2, #0
 8005992:	d13d      	bne.n	8005a10 <__ieee754_pow+0x188>
 8005994:	4b51      	ldr	r3, [pc, #324]	; (8005adc <__ieee754_pow+0x254>)
 8005996:	4598      	cmp	r8, r3
 8005998:	d1ea      	bne.n	8005970 <__ieee754_pow+0xe8>
 800599a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800599e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80059a2:	ea53 030a 	orrs.w	r3, r3, sl
 80059a6:	f000 8459 	beq.w	800625c <__ieee754_pow+0x9d4>
 80059aa:	4b4f      	ldr	r3, [pc, #316]	; (8005ae8 <__ieee754_pow+0x260>)
 80059ac:	429c      	cmp	r4, r3
 80059ae:	dd08      	ble.n	80059c2 <__ieee754_pow+0x13a>
 80059b0:	f1b9 0f00 	cmp.w	r9, #0
 80059b4:	f2c0 8456 	blt.w	8006264 <__ieee754_pow+0x9dc>
 80059b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059bc:	e783      	b.n	80058c6 <__ieee754_pow+0x3e>
 80059be:	2302      	movs	r3, #2
 80059c0:	e7e5      	b.n	800598e <__ieee754_pow+0x106>
 80059c2:	f1b9 0f00 	cmp.w	r9, #0
 80059c6:	f04f 0000 	mov.w	r0, #0
 80059ca:	f04f 0100 	mov.w	r1, #0
 80059ce:	f6bf af7a 	bge.w	80058c6 <__ieee754_pow+0x3e>
 80059d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80059d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80059da:	e774      	b.n	80058c6 <__ieee754_pow+0x3e>
 80059dc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80059e0:	d106      	bne.n	80059f0 <__ieee754_pow+0x168>
 80059e2:	4632      	mov	r2, r6
 80059e4:	463b      	mov	r3, r7
 80059e6:	4630      	mov	r0, r6
 80059e8:	4639      	mov	r1, r7
 80059ea:	f7fa fe05 	bl	80005f8 <__aeabi_dmul>
 80059ee:	e76a      	b.n	80058c6 <__ieee754_pow+0x3e>
 80059f0:	4b3e      	ldr	r3, [pc, #248]	; (8005aec <__ieee754_pow+0x264>)
 80059f2:	4599      	cmp	r9, r3
 80059f4:	d10c      	bne.n	8005a10 <__ieee754_pow+0x188>
 80059f6:	2d00      	cmp	r5, #0
 80059f8:	db0a      	blt.n	8005a10 <__ieee754_pow+0x188>
 80059fa:	ec47 6b10 	vmov	d0, r6, r7
 80059fe:	b009      	add	sp, #36	; 0x24
 8005a00:	ecbd 8b06 	vpop	{d8-d10}
 8005a04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a08:	f7ff bc02 	b.w	8005210 <__ieee754_sqrt>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	9304      	str	r3, [sp, #16]
 8005a10:	ec47 6b10 	vmov	d0, r6, r7
 8005a14:	f7ff fbe0 	bl	80051d8 <fabs>
 8005a18:	ec51 0b10 	vmov	r0, r1, d0
 8005a1c:	f1ba 0f00 	cmp.w	sl, #0
 8005a20:	d129      	bne.n	8005a76 <__ieee754_pow+0x1ee>
 8005a22:	b124      	cbz	r4, 8005a2e <__ieee754_pow+0x1a6>
 8005a24:	4b2f      	ldr	r3, [pc, #188]	; (8005ae4 <__ieee754_pow+0x25c>)
 8005a26:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d123      	bne.n	8005a76 <__ieee754_pow+0x1ee>
 8005a2e:	f1b9 0f00 	cmp.w	r9, #0
 8005a32:	da05      	bge.n	8005a40 <__ieee754_pow+0x1b8>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	2000      	movs	r0, #0
 8005a3a:	492a      	ldr	r1, [pc, #168]	; (8005ae4 <__ieee754_pow+0x25c>)
 8005a3c:	f7fa ff06 	bl	800084c <__aeabi_ddiv>
 8005a40:	2d00      	cmp	r5, #0
 8005a42:	f6bf af40 	bge.w	80058c6 <__ieee754_pow+0x3e>
 8005a46:	9b04      	ldr	r3, [sp, #16]
 8005a48:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005a4c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005a50:	431c      	orrs	r4, r3
 8005a52:	d108      	bne.n	8005a66 <__ieee754_pow+0x1de>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4610      	mov	r0, r2
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	f7fa fc14 	bl	8000288 <__aeabi_dsub>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	e78f      	b.n	8005986 <__ieee754_pow+0xfe>
 8005a66:	9b04      	ldr	r3, [sp, #16]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	f47f af2c 	bne.w	80058c6 <__ieee754_pow+0x3e>
 8005a6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a72:	4619      	mov	r1, r3
 8005a74:	e727      	b.n	80058c6 <__ieee754_pow+0x3e>
 8005a76:	0feb      	lsrs	r3, r5, #31
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	9306      	str	r3, [sp, #24]
 8005a7c:	9a06      	ldr	r2, [sp, #24]
 8005a7e:	9b04      	ldr	r3, [sp, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	d102      	bne.n	8005a8a <__ieee754_pow+0x202>
 8005a84:	4632      	mov	r2, r6
 8005a86:	463b      	mov	r3, r7
 8005a88:	e7e6      	b.n	8005a58 <__ieee754_pow+0x1d0>
 8005a8a:	4b19      	ldr	r3, [pc, #100]	; (8005af0 <__ieee754_pow+0x268>)
 8005a8c:	4598      	cmp	r8, r3
 8005a8e:	f340 80fb 	ble.w	8005c88 <__ieee754_pow+0x400>
 8005a92:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005a96:	4598      	cmp	r8, r3
 8005a98:	4b13      	ldr	r3, [pc, #76]	; (8005ae8 <__ieee754_pow+0x260>)
 8005a9a:	dd0c      	ble.n	8005ab6 <__ieee754_pow+0x22e>
 8005a9c:	429c      	cmp	r4, r3
 8005a9e:	dc0f      	bgt.n	8005ac0 <__ieee754_pow+0x238>
 8005aa0:	f1b9 0f00 	cmp.w	r9, #0
 8005aa4:	da0f      	bge.n	8005ac6 <__ieee754_pow+0x23e>
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	b009      	add	sp, #36	; 0x24
 8005aaa:	ecbd 8b06 	vpop	{d8-d10}
 8005aae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab2:	f000 bcba 	b.w	800642a <__math_oflow>
 8005ab6:	429c      	cmp	r4, r3
 8005ab8:	dbf2      	blt.n	8005aa0 <__ieee754_pow+0x218>
 8005aba:	4b0a      	ldr	r3, [pc, #40]	; (8005ae4 <__ieee754_pow+0x25c>)
 8005abc:	429c      	cmp	r4, r3
 8005abe:	dd19      	ble.n	8005af4 <__ieee754_pow+0x26c>
 8005ac0:	f1b9 0f00 	cmp.w	r9, #0
 8005ac4:	dcef      	bgt.n	8005aa6 <__ieee754_pow+0x21e>
 8005ac6:	2000      	movs	r0, #0
 8005ac8:	b009      	add	sp, #36	; 0x24
 8005aca:	ecbd 8b06 	vpop	{d8-d10}
 8005ace:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad2:	f000 bca1 	b.w	8006418 <__math_uflow>
 8005ad6:	bf00      	nop
 8005ad8:	fff00000 	.word	0xfff00000
 8005adc:	7ff00000 	.word	0x7ff00000
 8005ae0:	433fffff 	.word	0x433fffff
 8005ae4:	3ff00000 	.word	0x3ff00000
 8005ae8:	3fefffff 	.word	0x3fefffff
 8005aec:	3fe00000 	.word	0x3fe00000
 8005af0:	41e00000 	.word	0x41e00000
 8005af4:	4b60      	ldr	r3, [pc, #384]	; (8005c78 <__ieee754_pow+0x3f0>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	f7fa fbc6 	bl	8000288 <__aeabi_dsub>
 8005afc:	a354      	add	r3, pc, #336	; (adr r3, 8005c50 <__ieee754_pow+0x3c8>)
 8005afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b02:	4604      	mov	r4, r0
 8005b04:	460d      	mov	r5, r1
 8005b06:	f7fa fd77 	bl	80005f8 <__aeabi_dmul>
 8005b0a:	a353      	add	r3, pc, #332	; (adr r3, 8005c58 <__ieee754_pow+0x3d0>)
 8005b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b10:	4606      	mov	r6, r0
 8005b12:	460f      	mov	r7, r1
 8005b14:	4620      	mov	r0, r4
 8005b16:	4629      	mov	r1, r5
 8005b18:	f7fa fd6e 	bl	80005f8 <__aeabi_dmul>
 8005b1c:	4b57      	ldr	r3, [pc, #348]	; (8005c7c <__ieee754_pow+0x3f4>)
 8005b1e:	4682      	mov	sl, r0
 8005b20:	468b      	mov	fp, r1
 8005b22:	2200      	movs	r2, #0
 8005b24:	4620      	mov	r0, r4
 8005b26:	4629      	mov	r1, r5
 8005b28:	f7fa fd66 	bl	80005f8 <__aeabi_dmul>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	a14b      	add	r1, pc, #300	; (adr r1, 8005c60 <__ieee754_pow+0x3d8>)
 8005b32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b36:	f7fa fba7 	bl	8000288 <__aeabi_dsub>
 8005b3a:	4622      	mov	r2, r4
 8005b3c:	462b      	mov	r3, r5
 8005b3e:	f7fa fd5b 	bl	80005f8 <__aeabi_dmul>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	2000      	movs	r0, #0
 8005b48:	494d      	ldr	r1, [pc, #308]	; (8005c80 <__ieee754_pow+0x3f8>)
 8005b4a:	f7fa fb9d 	bl	8000288 <__aeabi_dsub>
 8005b4e:	4622      	mov	r2, r4
 8005b50:	4680      	mov	r8, r0
 8005b52:	4689      	mov	r9, r1
 8005b54:	462b      	mov	r3, r5
 8005b56:	4620      	mov	r0, r4
 8005b58:	4629      	mov	r1, r5
 8005b5a:	f7fa fd4d 	bl	80005f8 <__aeabi_dmul>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	4640      	mov	r0, r8
 8005b64:	4649      	mov	r1, r9
 8005b66:	f7fa fd47 	bl	80005f8 <__aeabi_dmul>
 8005b6a:	a33f      	add	r3, pc, #252	; (adr r3, 8005c68 <__ieee754_pow+0x3e0>)
 8005b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b70:	f7fa fd42 	bl	80005f8 <__aeabi_dmul>
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	4650      	mov	r0, sl
 8005b7a:	4659      	mov	r1, fp
 8005b7c:	f7fa fb84 	bl	8000288 <__aeabi_dsub>
 8005b80:	4602      	mov	r2, r0
 8005b82:	460b      	mov	r3, r1
 8005b84:	4680      	mov	r8, r0
 8005b86:	4689      	mov	r9, r1
 8005b88:	4630      	mov	r0, r6
 8005b8a:	4639      	mov	r1, r7
 8005b8c:	f7fa fb7e 	bl	800028c <__adddf3>
 8005b90:	2000      	movs	r0, #0
 8005b92:	4632      	mov	r2, r6
 8005b94:	463b      	mov	r3, r7
 8005b96:	4604      	mov	r4, r0
 8005b98:	460d      	mov	r5, r1
 8005b9a:	f7fa fb75 	bl	8000288 <__aeabi_dsub>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4640      	mov	r0, r8
 8005ba4:	4649      	mov	r1, r9
 8005ba6:	f7fa fb6f 	bl	8000288 <__aeabi_dsub>
 8005baa:	9b04      	ldr	r3, [sp, #16]
 8005bac:	9a06      	ldr	r2, [sp, #24]
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	4682      	mov	sl, r0
 8005bb4:	468b      	mov	fp, r1
 8005bb6:	f040 81e7 	bne.w	8005f88 <__ieee754_pow+0x700>
 8005bba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005c70 <__ieee754_pow+0x3e8>
 8005bbe:	eeb0 8a47 	vmov.f32	s16, s14
 8005bc2:	eef0 8a67 	vmov.f32	s17, s15
 8005bc6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005bca:	2600      	movs	r6, #0
 8005bcc:	4632      	mov	r2, r6
 8005bce:	463b      	mov	r3, r7
 8005bd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bd4:	f7fa fb58 	bl	8000288 <__aeabi_dsub>
 8005bd8:	4622      	mov	r2, r4
 8005bda:	462b      	mov	r3, r5
 8005bdc:	f7fa fd0c 	bl	80005f8 <__aeabi_dmul>
 8005be0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005be4:	4680      	mov	r8, r0
 8005be6:	4689      	mov	r9, r1
 8005be8:	4650      	mov	r0, sl
 8005bea:	4659      	mov	r1, fp
 8005bec:	f7fa fd04 	bl	80005f8 <__aeabi_dmul>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	f7fa fb48 	bl	800028c <__adddf3>
 8005bfc:	4632      	mov	r2, r6
 8005bfe:	463b      	mov	r3, r7
 8005c00:	4680      	mov	r8, r0
 8005c02:	4689      	mov	r9, r1
 8005c04:	4620      	mov	r0, r4
 8005c06:	4629      	mov	r1, r5
 8005c08:	f7fa fcf6 	bl	80005f8 <__aeabi_dmul>
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	4604      	mov	r4, r0
 8005c10:	460d      	mov	r5, r1
 8005c12:	4602      	mov	r2, r0
 8005c14:	4649      	mov	r1, r9
 8005c16:	4640      	mov	r0, r8
 8005c18:	f7fa fb38 	bl	800028c <__adddf3>
 8005c1c:	4b19      	ldr	r3, [pc, #100]	; (8005c84 <__ieee754_pow+0x3fc>)
 8005c1e:	4299      	cmp	r1, r3
 8005c20:	ec45 4b19 	vmov	d9, r4, r5
 8005c24:	4606      	mov	r6, r0
 8005c26:	460f      	mov	r7, r1
 8005c28:	468b      	mov	fp, r1
 8005c2a:	f340 82f0 	ble.w	800620e <__ieee754_pow+0x986>
 8005c2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005c32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005c36:	4303      	orrs	r3, r0
 8005c38:	f000 81e4 	beq.w	8006004 <__ieee754_pow+0x77c>
 8005c3c:	ec51 0b18 	vmov	r0, r1, d8
 8005c40:	2200      	movs	r2, #0
 8005c42:	2300      	movs	r3, #0
 8005c44:	f7fa ff4a 	bl	8000adc <__aeabi_dcmplt>
 8005c48:	3800      	subs	r0, #0
 8005c4a:	bf18      	it	ne
 8005c4c:	2001      	movne	r0, #1
 8005c4e:	e72b      	b.n	8005aa8 <__ieee754_pow+0x220>
 8005c50:	60000000 	.word	0x60000000
 8005c54:	3ff71547 	.word	0x3ff71547
 8005c58:	f85ddf44 	.word	0xf85ddf44
 8005c5c:	3e54ae0b 	.word	0x3e54ae0b
 8005c60:	55555555 	.word	0x55555555
 8005c64:	3fd55555 	.word	0x3fd55555
 8005c68:	652b82fe 	.word	0x652b82fe
 8005c6c:	3ff71547 	.word	0x3ff71547
 8005c70:	00000000 	.word	0x00000000
 8005c74:	bff00000 	.word	0xbff00000
 8005c78:	3ff00000 	.word	0x3ff00000
 8005c7c:	3fd00000 	.word	0x3fd00000
 8005c80:	3fe00000 	.word	0x3fe00000
 8005c84:	408fffff 	.word	0x408fffff
 8005c88:	4bd5      	ldr	r3, [pc, #852]	; (8005fe0 <__ieee754_pow+0x758>)
 8005c8a:	402b      	ands	r3, r5
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	b92b      	cbnz	r3, 8005c9c <__ieee754_pow+0x414>
 8005c90:	4bd4      	ldr	r3, [pc, #848]	; (8005fe4 <__ieee754_pow+0x75c>)
 8005c92:	f7fa fcb1 	bl	80005f8 <__aeabi_dmul>
 8005c96:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	1523      	asrs	r3, r4, #20
 8005c9e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005ca2:	4413      	add	r3, r2
 8005ca4:	9305      	str	r3, [sp, #20]
 8005ca6:	4bd0      	ldr	r3, [pc, #832]	; (8005fe8 <__ieee754_pow+0x760>)
 8005ca8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005cac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005cb0:	429c      	cmp	r4, r3
 8005cb2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005cb6:	dd08      	ble.n	8005cca <__ieee754_pow+0x442>
 8005cb8:	4bcc      	ldr	r3, [pc, #816]	; (8005fec <__ieee754_pow+0x764>)
 8005cba:	429c      	cmp	r4, r3
 8005cbc:	f340 8162 	ble.w	8005f84 <__ieee754_pow+0x6fc>
 8005cc0:	9b05      	ldr	r3, [sp, #20]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	9305      	str	r3, [sp, #20]
 8005cc6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005cca:	2400      	movs	r4, #0
 8005ccc:	00e3      	lsls	r3, r4, #3
 8005cce:	9307      	str	r3, [sp, #28]
 8005cd0:	4bc7      	ldr	r3, [pc, #796]	; (8005ff0 <__ieee754_pow+0x768>)
 8005cd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005cd6:	ed93 7b00 	vldr	d7, [r3]
 8005cda:	4629      	mov	r1, r5
 8005cdc:	ec53 2b17 	vmov	r2, r3, d7
 8005ce0:	eeb0 9a47 	vmov.f32	s18, s14
 8005ce4:	eef0 9a67 	vmov.f32	s19, s15
 8005ce8:	4682      	mov	sl, r0
 8005cea:	f7fa facd 	bl	8000288 <__aeabi_dsub>
 8005cee:	4652      	mov	r2, sl
 8005cf0:	4606      	mov	r6, r0
 8005cf2:	460f      	mov	r7, r1
 8005cf4:	462b      	mov	r3, r5
 8005cf6:	ec51 0b19 	vmov	r0, r1, d9
 8005cfa:	f7fa fac7 	bl	800028c <__adddf3>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	2000      	movs	r0, #0
 8005d04:	49bb      	ldr	r1, [pc, #748]	; (8005ff4 <__ieee754_pow+0x76c>)
 8005d06:	f7fa fda1 	bl	800084c <__aeabi_ddiv>
 8005d0a:	ec41 0b1a 	vmov	d10, r0, r1
 8005d0e:	4602      	mov	r2, r0
 8005d10:	460b      	mov	r3, r1
 8005d12:	4630      	mov	r0, r6
 8005d14:	4639      	mov	r1, r7
 8005d16:	f7fa fc6f 	bl	80005f8 <__aeabi_dmul>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d20:	9302      	str	r3, [sp, #8]
 8005d22:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005d26:	46ab      	mov	fp, r5
 8005d28:	106d      	asrs	r5, r5, #1
 8005d2a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005d2e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005d32:	ec41 0b18 	vmov	d8, r0, r1
 8005d36:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	4640      	mov	r0, r8
 8005d3e:	4649      	mov	r1, r9
 8005d40:	4614      	mov	r4, r2
 8005d42:	461d      	mov	r5, r3
 8005d44:	f7fa fc58 	bl	80005f8 <__aeabi_dmul>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	4639      	mov	r1, r7
 8005d50:	f7fa fa9a 	bl	8000288 <__aeabi_dsub>
 8005d54:	ec53 2b19 	vmov	r2, r3, d9
 8005d58:	4606      	mov	r6, r0
 8005d5a:	460f      	mov	r7, r1
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	4629      	mov	r1, r5
 8005d60:	f7fa fa92 	bl	8000288 <__aeabi_dsub>
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	4650      	mov	r0, sl
 8005d6a:	4659      	mov	r1, fp
 8005d6c:	f7fa fa8c 	bl	8000288 <__aeabi_dsub>
 8005d70:	4642      	mov	r2, r8
 8005d72:	464b      	mov	r3, r9
 8005d74:	f7fa fc40 	bl	80005f8 <__aeabi_dmul>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	4639      	mov	r1, r7
 8005d80:	f7fa fa82 	bl	8000288 <__aeabi_dsub>
 8005d84:	ec53 2b1a 	vmov	r2, r3, d10
 8005d88:	f7fa fc36 	bl	80005f8 <__aeabi_dmul>
 8005d8c:	ec53 2b18 	vmov	r2, r3, d8
 8005d90:	ec41 0b19 	vmov	d9, r0, r1
 8005d94:	ec51 0b18 	vmov	r0, r1, d8
 8005d98:	f7fa fc2e 	bl	80005f8 <__aeabi_dmul>
 8005d9c:	a37c      	add	r3, pc, #496	; (adr r3, 8005f90 <__ieee754_pow+0x708>)
 8005d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da2:	4604      	mov	r4, r0
 8005da4:	460d      	mov	r5, r1
 8005da6:	f7fa fc27 	bl	80005f8 <__aeabi_dmul>
 8005daa:	a37b      	add	r3, pc, #492	; (adr r3, 8005f98 <__ieee754_pow+0x710>)
 8005dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db0:	f7fa fa6c 	bl	800028c <__adddf3>
 8005db4:	4622      	mov	r2, r4
 8005db6:	462b      	mov	r3, r5
 8005db8:	f7fa fc1e 	bl	80005f8 <__aeabi_dmul>
 8005dbc:	a378      	add	r3, pc, #480	; (adr r3, 8005fa0 <__ieee754_pow+0x718>)
 8005dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc2:	f7fa fa63 	bl	800028c <__adddf3>
 8005dc6:	4622      	mov	r2, r4
 8005dc8:	462b      	mov	r3, r5
 8005dca:	f7fa fc15 	bl	80005f8 <__aeabi_dmul>
 8005dce:	a376      	add	r3, pc, #472	; (adr r3, 8005fa8 <__ieee754_pow+0x720>)
 8005dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd4:	f7fa fa5a 	bl	800028c <__adddf3>
 8005dd8:	4622      	mov	r2, r4
 8005dda:	462b      	mov	r3, r5
 8005ddc:	f7fa fc0c 	bl	80005f8 <__aeabi_dmul>
 8005de0:	a373      	add	r3, pc, #460	; (adr r3, 8005fb0 <__ieee754_pow+0x728>)
 8005de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de6:	f7fa fa51 	bl	800028c <__adddf3>
 8005dea:	4622      	mov	r2, r4
 8005dec:	462b      	mov	r3, r5
 8005dee:	f7fa fc03 	bl	80005f8 <__aeabi_dmul>
 8005df2:	a371      	add	r3, pc, #452	; (adr r3, 8005fb8 <__ieee754_pow+0x730>)
 8005df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df8:	f7fa fa48 	bl	800028c <__adddf3>
 8005dfc:	4622      	mov	r2, r4
 8005dfe:	4606      	mov	r6, r0
 8005e00:	460f      	mov	r7, r1
 8005e02:	462b      	mov	r3, r5
 8005e04:	4620      	mov	r0, r4
 8005e06:	4629      	mov	r1, r5
 8005e08:	f7fa fbf6 	bl	80005f8 <__aeabi_dmul>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4630      	mov	r0, r6
 8005e12:	4639      	mov	r1, r7
 8005e14:	f7fa fbf0 	bl	80005f8 <__aeabi_dmul>
 8005e18:	4642      	mov	r2, r8
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	460d      	mov	r5, r1
 8005e1e:	464b      	mov	r3, r9
 8005e20:	ec51 0b18 	vmov	r0, r1, d8
 8005e24:	f7fa fa32 	bl	800028c <__adddf3>
 8005e28:	ec53 2b19 	vmov	r2, r3, d9
 8005e2c:	f7fa fbe4 	bl	80005f8 <__aeabi_dmul>
 8005e30:	4622      	mov	r2, r4
 8005e32:	462b      	mov	r3, r5
 8005e34:	f7fa fa2a 	bl	800028c <__adddf3>
 8005e38:	4642      	mov	r2, r8
 8005e3a:	4682      	mov	sl, r0
 8005e3c:	468b      	mov	fp, r1
 8005e3e:	464b      	mov	r3, r9
 8005e40:	4640      	mov	r0, r8
 8005e42:	4649      	mov	r1, r9
 8005e44:	f7fa fbd8 	bl	80005f8 <__aeabi_dmul>
 8005e48:	4b6b      	ldr	r3, [pc, #428]	; (8005ff8 <__ieee754_pow+0x770>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	4606      	mov	r6, r0
 8005e4e:	460f      	mov	r7, r1
 8005e50:	f7fa fa1c 	bl	800028c <__adddf3>
 8005e54:	4652      	mov	r2, sl
 8005e56:	465b      	mov	r3, fp
 8005e58:	f7fa fa18 	bl	800028c <__adddf3>
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	4604      	mov	r4, r0
 8005e60:	460d      	mov	r5, r1
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	4640      	mov	r0, r8
 8005e68:	4649      	mov	r1, r9
 8005e6a:	f7fa fbc5 	bl	80005f8 <__aeabi_dmul>
 8005e6e:	4b62      	ldr	r3, [pc, #392]	; (8005ff8 <__ieee754_pow+0x770>)
 8005e70:	4680      	mov	r8, r0
 8005e72:	4689      	mov	r9, r1
 8005e74:	2200      	movs	r2, #0
 8005e76:	4620      	mov	r0, r4
 8005e78:	4629      	mov	r1, r5
 8005e7a:	f7fa fa05 	bl	8000288 <__aeabi_dsub>
 8005e7e:	4632      	mov	r2, r6
 8005e80:	463b      	mov	r3, r7
 8005e82:	f7fa fa01 	bl	8000288 <__aeabi_dsub>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4650      	mov	r0, sl
 8005e8c:	4659      	mov	r1, fp
 8005e8e:	f7fa f9fb 	bl	8000288 <__aeabi_dsub>
 8005e92:	ec53 2b18 	vmov	r2, r3, d8
 8005e96:	f7fa fbaf 	bl	80005f8 <__aeabi_dmul>
 8005e9a:	4622      	mov	r2, r4
 8005e9c:	4606      	mov	r6, r0
 8005e9e:	460f      	mov	r7, r1
 8005ea0:	462b      	mov	r3, r5
 8005ea2:	ec51 0b19 	vmov	r0, r1, d9
 8005ea6:	f7fa fba7 	bl	80005f8 <__aeabi_dmul>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	4630      	mov	r0, r6
 8005eb0:	4639      	mov	r1, r7
 8005eb2:	f7fa f9eb 	bl	800028c <__adddf3>
 8005eb6:	4606      	mov	r6, r0
 8005eb8:	460f      	mov	r7, r1
 8005eba:	4602      	mov	r2, r0
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	4649      	mov	r1, r9
 8005ec2:	f7fa f9e3 	bl	800028c <__adddf3>
 8005ec6:	a33e      	add	r3, pc, #248	; (adr r3, 8005fc0 <__ieee754_pow+0x738>)
 8005ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ecc:	2000      	movs	r0, #0
 8005ece:	4604      	mov	r4, r0
 8005ed0:	460d      	mov	r5, r1
 8005ed2:	f7fa fb91 	bl	80005f8 <__aeabi_dmul>
 8005ed6:	4642      	mov	r2, r8
 8005ed8:	ec41 0b18 	vmov	d8, r0, r1
 8005edc:	464b      	mov	r3, r9
 8005ede:	4620      	mov	r0, r4
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	f7fa f9d1 	bl	8000288 <__aeabi_dsub>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	460b      	mov	r3, r1
 8005eea:	4630      	mov	r0, r6
 8005eec:	4639      	mov	r1, r7
 8005eee:	f7fa f9cb 	bl	8000288 <__aeabi_dsub>
 8005ef2:	a335      	add	r3, pc, #212	; (adr r3, 8005fc8 <__ieee754_pow+0x740>)
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	f7fa fb7e 	bl	80005f8 <__aeabi_dmul>
 8005efc:	a334      	add	r3, pc, #208	; (adr r3, 8005fd0 <__ieee754_pow+0x748>)
 8005efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f02:	4606      	mov	r6, r0
 8005f04:	460f      	mov	r7, r1
 8005f06:	4620      	mov	r0, r4
 8005f08:	4629      	mov	r1, r5
 8005f0a:	f7fa fb75 	bl	80005f8 <__aeabi_dmul>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	4630      	mov	r0, r6
 8005f14:	4639      	mov	r1, r7
 8005f16:	f7fa f9b9 	bl	800028c <__adddf3>
 8005f1a:	9a07      	ldr	r2, [sp, #28]
 8005f1c:	4b37      	ldr	r3, [pc, #220]	; (8005ffc <__ieee754_pow+0x774>)
 8005f1e:	4413      	add	r3, r2
 8005f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f24:	f7fa f9b2 	bl	800028c <__adddf3>
 8005f28:	4682      	mov	sl, r0
 8005f2a:	9805      	ldr	r0, [sp, #20]
 8005f2c:	468b      	mov	fp, r1
 8005f2e:	f7fa faf9 	bl	8000524 <__aeabi_i2d>
 8005f32:	9a07      	ldr	r2, [sp, #28]
 8005f34:	4b32      	ldr	r3, [pc, #200]	; (8006000 <__ieee754_pow+0x778>)
 8005f36:	4413      	add	r3, r2
 8005f38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f3c:	4606      	mov	r6, r0
 8005f3e:	460f      	mov	r7, r1
 8005f40:	4652      	mov	r2, sl
 8005f42:	465b      	mov	r3, fp
 8005f44:	ec51 0b18 	vmov	r0, r1, d8
 8005f48:	f7fa f9a0 	bl	800028c <__adddf3>
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	464b      	mov	r3, r9
 8005f50:	f7fa f99c 	bl	800028c <__adddf3>
 8005f54:	4632      	mov	r2, r6
 8005f56:	463b      	mov	r3, r7
 8005f58:	f7fa f998 	bl	800028c <__adddf3>
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	4632      	mov	r2, r6
 8005f60:	463b      	mov	r3, r7
 8005f62:	4604      	mov	r4, r0
 8005f64:	460d      	mov	r5, r1
 8005f66:	f7fa f98f 	bl	8000288 <__aeabi_dsub>
 8005f6a:	4642      	mov	r2, r8
 8005f6c:	464b      	mov	r3, r9
 8005f6e:	f7fa f98b 	bl	8000288 <__aeabi_dsub>
 8005f72:	ec53 2b18 	vmov	r2, r3, d8
 8005f76:	f7fa f987 	bl	8000288 <__aeabi_dsub>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4650      	mov	r0, sl
 8005f80:	4659      	mov	r1, fp
 8005f82:	e610      	b.n	8005ba6 <__ieee754_pow+0x31e>
 8005f84:	2401      	movs	r4, #1
 8005f86:	e6a1      	b.n	8005ccc <__ieee754_pow+0x444>
 8005f88:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005fd8 <__ieee754_pow+0x750>
 8005f8c:	e617      	b.n	8005bbe <__ieee754_pow+0x336>
 8005f8e:	bf00      	nop
 8005f90:	4a454eef 	.word	0x4a454eef
 8005f94:	3fca7e28 	.word	0x3fca7e28
 8005f98:	93c9db65 	.word	0x93c9db65
 8005f9c:	3fcd864a 	.word	0x3fcd864a
 8005fa0:	a91d4101 	.word	0xa91d4101
 8005fa4:	3fd17460 	.word	0x3fd17460
 8005fa8:	518f264d 	.word	0x518f264d
 8005fac:	3fd55555 	.word	0x3fd55555
 8005fb0:	db6fabff 	.word	0xdb6fabff
 8005fb4:	3fdb6db6 	.word	0x3fdb6db6
 8005fb8:	33333303 	.word	0x33333303
 8005fbc:	3fe33333 	.word	0x3fe33333
 8005fc0:	e0000000 	.word	0xe0000000
 8005fc4:	3feec709 	.word	0x3feec709
 8005fc8:	dc3a03fd 	.word	0xdc3a03fd
 8005fcc:	3feec709 	.word	0x3feec709
 8005fd0:	145b01f5 	.word	0x145b01f5
 8005fd4:	be3e2fe0 	.word	0xbe3e2fe0
 8005fd8:	00000000 	.word	0x00000000
 8005fdc:	3ff00000 	.word	0x3ff00000
 8005fe0:	7ff00000 	.word	0x7ff00000
 8005fe4:	43400000 	.word	0x43400000
 8005fe8:	0003988e 	.word	0x0003988e
 8005fec:	000bb679 	.word	0x000bb679
 8005ff0:	08007dc0 	.word	0x08007dc0
 8005ff4:	3ff00000 	.word	0x3ff00000
 8005ff8:	40080000 	.word	0x40080000
 8005ffc:	08007de0 	.word	0x08007de0
 8006000:	08007dd0 	.word	0x08007dd0
 8006004:	a3b3      	add	r3, pc, #716	; (adr r3, 80062d4 <__ieee754_pow+0xa4c>)
 8006006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600a:	4640      	mov	r0, r8
 800600c:	4649      	mov	r1, r9
 800600e:	f7fa f93d 	bl	800028c <__adddf3>
 8006012:	4622      	mov	r2, r4
 8006014:	ec41 0b1a 	vmov	d10, r0, r1
 8006018:	462b      	mov	r3, r5
 800601a:	4630      	mov	r0, r6
 800601c:	4639      	mov	r1, r7
 800601e:	f7fa f933 	bl	8000288 <__aeabi_dsub>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	ec51 0b1a 	vmov	r0, r1, d10
 800602a:	f7fa fd75 	bl	8000b18 <__aeabi_dcmpgt>
 800602e:	2800      	cmp	r0, #0
 8006030:	f47f ae04 	bne.w	8005c3c <__ieee754_pow+0x3b4>
 8006034:	4aa2      	ldr	r2, [pc, #648]	; (80062c0 <__ieee754_pow+0xa38>)
 8006036:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800603a:	4293      	cmp	r3, r2
 800603c:	f340 8107 	ble.w	800624e <__ieee754_pow+0x9c6>
 8006040:	151b      	asrs	r3, r3, #20
 8006042:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006046:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800604a:	fa4a fa03 	asr.w	sl, sl, r3
 800604e:	44da      	add	sl, fp
 8006050:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006054:	489b      	ldr	r0, [pc, #620]	; (80062c4 <__ieee754_pow+0xa3c>)
 8006056:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800605a:	4108      	asrs	r0, r1
 800605c:	ea00 030a 	and.w	r3, r0, sl
 8006060:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006064:	f1c1 0114 	rsb	r1, r1, #20
 8006068:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800606c:	fa4a fa01 	asr.w	sl, sl, r1
 8006070:	f1bb 0f00 	cmp.w	fp, #0
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	4620      	mov	r0, r4
 800607a:	4629      	mov	r1, r5
 800607c:	bfb8      	it	lt
 800607e:	f1ca 0a00 	rsblt	sl, sl, #0
 8006082:	f7fa f901 	bl	8000288 <__aeabi_dsub>
 8006086:	ec41 0b19 	vmov	d9, r0, r1
 800608a:	4642      	mov	r2, r8
 800608c:	464b      	mov	r3, r9
 800608e:	ec51 0b19 	vmov	r0, r1, d9
 8006092:	f7fa f8fb 	bl	800028c <__adddf3>
 8006096:	a37a      	add	r3, pc, #488	; (adr r3, 8006280 <__ieee754_pow+0x9f8>)
 8006098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609c:	2000      	movs	r0, #0
 800609e:	4604      	mov	r4, r0
 80060a0:	460d      	mov	r5, r1
 80060a2:	f7fa faa9 	bl	80005f8 <__aeabi_dmul>
 80060a6:	ec53 2b19 	vmov	r2, r3, d9
 80060aa:	4606      	mov	r6, r0
 80060ac:	460f      	mov	r7, r1
 80060ae:	4620      	mov	r0, r4
 80060b0:	4629      	mov	r1, r5
 80060b2:	f7fa f8e9 	bl	8000288 <__aeabi_dsub>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4640      	mov	r0, r8
 80060bc:	4649      	mov	r1, r9
 80060be:	f7fa f8e3 	bl	8000288 <__aeabi_dsub>
 80060c2:	a371      	add	r3, pc, #452	; (adr r3, 8006288 <__ieee754_pow+0xa00>)
 80060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c8:	f7fa fa96 	bl	80005f8 <__aeabi_dmul>
 80060cc:	a370      	add	r3, pc, #448	; (adr r3, 8006290 <__ieee754_pow+0xa08>)
 80060ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d2:	4680      	mov	r8, r0
 80060d4:	4689      	mov	r9, r1
 80060d6:	4620      	mov	r0, r4
 80060d8:	4629      	mov	r1, r5
 80060da:	f7fa fa8d 	bl	80005f8 <__aeabi_dmul>
 80060de:	4602      	mov	r2, r0
 80060e0:	460b      	mov	r3, r1
 80060e2:	4640      	mov	r0, r8
 80060e4:	4649      	mov	r1, r9
 80060e6:	f7fa f8d1 	bl	800028c <__adddf3>
 80060ea:	4604      	mov	r4, r0
 80060ec:	460d      	mov	r5, r1
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	4630      	mov	r0, r6
 80060f4:	4639      	mov	r1, r7
 80060f6:	f7fa f8c9 	bl	800028c <__adddf3>
 80060fa:	4632      	mov	r2, r6
 80060fc:	463b      	mov	r3, r7
 80060fe:	4680      	mov	r8, r0
 8006100:	4689      	mov	r9, r1
 8006102:	f7fa f8c1 	bl	8000288 <__aeabi_dsub>
 8006106:	4602      	mov	r2, r0
 8006108:	460b      	mov	r3, r1
 800610a:	4620      	mov	r0, r4
 800610c:	4629      	mov	r1, r5
 800610e:	f7fa f8bb 	bl	8000288 <__aeabi_dsub>
 8006112:	4642      	mov	r2, r8
 8006114:	4606      	mov	r6, r0
 8006116:	460f      	mov	r7, r1
 8006118:	464b      	mov	r3, r9
 800611a:	4640      	mov	r0, r8
 800611c:	4649      	mov	r1, r9
 800611e:	f7fa fa6b 	bl	80005f8 <__aeabi_dmul>
 8006122:	a35d      	add	r3, pc, #372	; (adr r3, 8006298 <__ieee754_pow+0xa10>)
 8006124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006128:	4604      	mov	r4, r0
 800612a:	460d      	mov	r5, r1
 800612c:	f7fa fa64 	bl	80005f8 <__aeabi_dmul>
 8006130:	a35b      	add	r3, pc, #364	; (adr r3, 80062a0 <__ieee754_pow+0xa18>)
 8006132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006136:	f7fa f8a7 	bl	8000288 <__aeabi_dsub>
 800613a:	4622      	mov	r2, r4
 800613c:	462b      	mov	r3, r5
 800613e:	f7fa fa5b 	bl	80005f8 <__aeabi_dmul>
 8006142:	a359      	add	r3, pc, #356	; (adr r3, 80062a8 <__ieee754_pow+0xa20>)
 8006144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006148:	f7fa f8a0 	bl	800028c <__adddf3>
 800614c:	4622      	mov	r2, r4
 800614e:	462b      	mov	r3, r5
 8006150:	f7fa fa52 	bl	80005f8 <__aeabi_dmul>
 8006154:	a356      	add	r3, pc, #344	; (adr r3, 80062b0 <__ieee754_pow+0xa28>)
 8006156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615a:	f7fa f895 	bl	8000288 <__aeabi_dsub>
 800615e:	4622      	mov	r2, r4
 8006160:	462b      	mov	r3, r5
 8006162:	f7fa fa49 	bl	80005f8 <__aeabi_dmul>
 8006166:	a354      	add	r3, pc, #336	; (adr r3, 80062b8 <__ieee754_pow+0xa30>)
 8006168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616c:	f7fa f88e 	bl	800028c <__adddf3>
 8006170:	4622      	mov	r2, r4
 8006172:	462b      	mov	r3, r5
 8006174:	f7fa fa40 	bl	80005f8 <__aeabi_dmul>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	4640      	mov	r0, r8
 800617e:	4649      	mov	r1, r9
 8006180:	f7fa f882 	bl	8000288 <__aeabi_dsub>
 8006184:	4604      	mov	r4, r0
 8006186:	460d      	mov	r5, r1
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	4640      	mov	r0, r8
 800618e:	4649      	mov	r1, r9
 8006190:	f7fa fa32 	bl	80005f8 <__aeabi_dmul>
 8006194:	2200      	movs	r2, #0
 8006196:	ec41 0b19 	vmov	d9, r0, r1
 800619a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800619e:	4620      	mov	r0, r4
 80061a0:	4629      	mov	r1, r5
 80061a2:	f7fa f871 	bl	8000288 <__aeabi_dsub>
 80061a6:	4602      	mov	r2, r0
 80061a8:	460b      	mov	r3, r1
 80061aa:	ec51 0b19 	vmov	r0, r1, d9
 80061ae:	f7fa fb4d 	bl	800084c <__aeabi_ddiv>
 80061b2:	4632      	mov	r2, r6
 80061b4:	4604      	mov	r4, r0
 80061b6:	460d      	mov	r5, r1
 80061b8:	463b      	mov	r3, r7
 80061ba:	4640      	mov	r0, r8
 80061bc:	4649      	mov	r1, r9
 80061be:	f7fa fa1b 	bl	80005f8 <__aeabi_dmul>
 80061c2:	4632      	mov	r2, r6
 80061c4:	463b      	mov	r3, r7
 80061c6:	f7fa f861 	bl	800028c <__adddf3>
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	4620      	mov	r0, r4
 80061d0:	4629      	mov	r1, r5
 80061d2:	f7fa f859 	bl	8000288 <__aeabi_dsub>
 80061d6:	4642      	mov	r2, r8
 80061d8:	464b      	mov	r3, r9
 80061da:	f7fa f855 	bl	8000288 <__aeabi_dsub>
 80061de:	460b      	mov	r3, r1
 80061e0:	4602      	mov	r2, r0
 80061e2:	4939      	ldr	r1, [pc, #228]	; (80062c8 <__ieee754_pow+0xa40>)
 80061e4:	2000      	movs	r0, #0
 80061e6:	f7fa f84f 	bl	8000288 <__aeabi_dsub>
 80061ea:	ec41 0b10 	vmov	d0, r0, r1
 80061ee:	ee10 3a90 	vmov	r3, s1
 80061f2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80061f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061fa:	da2b      	bge.n	8006254 <__ieee754_pow+0x9cc>
 80061fc:	4650      	mov	r0, sl
 80061fe:	f000 f86f 	bl	80062e0 <scalbn>
 8006202:	ec51 0b10 	vmov	r0, r1, d0
 8006206:	ec53 2b18 	vmov	r2, r3, d8
 800620a:	f7ff bbee 	b.w	80059ea <__ieee754_pow+0x162>
 800620e:	4b2f      	ldr	r3, [pc, #188]	; (80062cc <__ieee754_pow+0xa44>)
 8006210:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006214:	429e      	cmp	r6, r3
 8006216:	f77f af0d 	ble.w	8006034 <__ieee754_pow+0x7ac>
 800621a:	4b2d      	ldr	r3, [pc, #180]	; (80062d0 <__ieee754_pow+0xa48>)
 800621c:	440b      	add	r3, r1
 800621e:	4303      	orrs	r3, r0
 8006220:	d009      	beq.n	8006236 <__ieee754_pow+0x9ae>
 8006222:	ec51 0b18 	vmov	r0, r1, d8
 8006226:	2200      	movs	r2, #0
 8006228:	2300      	movs	r3, #0
 800622a:	f7fa fc57 	bl	8000adc <__aeabi_dcmplt>
 800622e:	3800      	subs	r0, #0
 8006230:	bf18      	it	ne
 8006232:	2001      	movne	r0, #1
 8006234:	e448      	b.n	8005ac8 <__ieee754_pow+0x240>
 8006236:	4622      	mov	r2, r4
 8006238:	462b      	mov	r3, r5
 800623a:	f7fa f825 	bl	8000288 <__aeabi_dsub>
 800623e:	4642      	mov	r2, r8
 8006240:	464b      	mov	r3, r9
 8006242:	f7fa fc5f 	bl	8000b04 <__aeabi_dcmpge>
 8006246:	2800      	cmp	r0, #0
 8006248:	f43f aef4 	beq.w	8006034 <__ieee754_pow+0x7ac>
 800624c:	e7e9      	b.n	8006222 <__ieee754_pow+0x99a>
 800624e:	f04f 0a00 	mov.w	sl, #0
 8006252:	e71a      	b.n	800608a <__ieee754_pow+0x802>
 8006254:	ec51 0b10 	vmov	r0, r1, d0
 8006258:	4619      	mov	r1, r3
 800625a:	e7d4      	b.n	8006206 <__ieee754_pow+0x97e>
 800625c:	491a      	ldr	r1, [pc, #104]	; (80062c8 <__ieee754_pow+0xa40>)
 800625e:	2000      	movs	r0, #0
 8006260:	f7ff bb31 	b.w	80058c6 <__ieee754_pow+0x3e>
 8006264:	2000      	movs	r0, #0
 8006266:	2100      	movs	r1, #0
 8006268:	f7ff bb2d 	b.w	80058c6 <__ieee754_pow+0x3e>
 800626c:	4630      	mov	r0, r6
 800626e:	4639      	mov	r1, r7
 8006270:	f7ff bb29 	b.w	80058c6 <__ieee754_pow+0x3e>
 8006274:	9204      	str	r2, [sp, #16]
 8006276:	f7ff bb7b 	b.w	8005970 <__ieee754_pow+0xe8>
 800627a:	2300      	movs	r3, #0
 800627c:	f7ff bb65 	b.w	800594a <__ieee754_pow+0xc2>
 8006280:	00000000 	.word	0x00000000
 8006284:	3fe62e43 	.word	0x3fe62e43
 8006288:	fefa39ef 	.word	0xfefa39ef
 800628c:	3fe62e42 	.word	0x3fe62e42
 8006290:	0ca86c39 	.word	0x0ca86c39
 8006294:	be205c61 	.word	0xbe205c61
 8006298:	72bea4d0 	.word	0x72bea4d0
 800629c:	3e663769 	.word	0x3e663769
 80062a0:	c5d26bf1 	.word	0xc5d26bf1
 80062a4:	3ebbbd41 	.word	0x3ebbbd41
 80062a8:	af25de2c 	.word	0xaf25de2c
 80062ac:	3f11566a 	.word	0x3f11566a
 80062b0:	16bebd93 	.word	0x16bebd93
 80062b4:	3f66c16c 	.word	0x3f66c16c
 80062b8:	5555553e 	.word	0x5555553e
 80062bc:	3fc55555 	.word	0x3fc55555
 80062c0:	3fe00000 	.word	0x3fe00000
 80062c4:	fff00000 	.word	0xfff00000
 80062c8:	3ff00000 	.word	0x3ff00000
 80062cc:	4090cbff 	.word	0x4090cbff
 80062d0:	3f6f3400 	.word	0x3f6f3400
 80062d4:	652b82fe 	.word	0x652b82fe
 80062d8:	3c971547 	.word	0x3c971547
 80062dc:	00000000 	.word	0x00000000

080062e0 <scalbn>:
 80062e0:	b570      	push	{r4, r5, r6, lr}
 80062e2:	ec55 4b10 	vmov	r4, r5, d0
 80062e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80062ea:	4606      	mov	r6, r0
 80062ec:	462b      	mov	r3, r5
 80062ee:	b999      	cbnz	r1, 8006318 <scalbn+0x38>
 80062f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80062f4:	4323      	orrs	r3, r4
 80062f6:	d03f      	beq.n	8006378 <scalbn+0x98>
 80062f8:	4b35      	ldr	r3, [pc, #212]	; (80063d0 <scalbn+0xf0>)
 80062fa:	4629      	mov	r1, r5
 80062fc:	ee10 0a10 	vmov	r0, s0
 8006300:	2200      	movs	r2, #0
 8006302:	f7fa f979 	bl	80005f8 <__aeabi_dmul>
 8006306:	4b33      	ldr	r3, [pc, #204]	; (80063d4 <scalbn+0xf4>)
 8006308:	429e      	cmp	r6, r3
 800630a:	4604      	mov	r4, r0
 800630c:	460d      	mov	r5, r1
 800630e:	da10      	bge.n	8006332 <scalbn+0x52>
 8006310:	a327      	add	r3, pc, #156	; (adr r3, 80063b0 <scalbn+0xd0>)
 8006312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006316:	e01f      	b.n	8006358 <scalbn+0x78>
 8006318:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800631c:	4291      	cmp	r1, r2
 800631e:	d10c      	bne.n	800633a <scalbn+0x5a>
 8006320:	ee10 2a10 	vmov	r2, s0
 8006324:	4620      	mov	r0, r4
 8006326:	4629      	mov	r1, r5
 8006328:	f7f9 ffb0 	bl	800028c <__adddf3>
 800632c:	4604      	mov	r4, r0
 800632e:	460d      	mov	r5, r1
 8006330:	e022      	b.n	8006378 <scalbn+0x98>
 8006332:	460b      	mov	r3, r1
 8006334:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006338:	3936      	subs	r1, #54	; 0x36
 800633a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800633e:	4296      	cmp	r6, r2
 8006340:	dd0d      	ble.n	800635e <scalbn+0x7e>
 8006342:	2d00      	cmp	r5, #0
 8006344:	a11c      	add	r1, pc, #112	; (adr r1, 80063b8 <scalbn+0xd8>)
 8006346:	e9d1 0100 	ldrd	r0, r1, [r1]
 800634a:	da02      	bge.n	8006352 <scalbn+0x72>
 800634c:	a11c      	add	r1, pc, #112	; (adr r1, 80063c0 <scalbn+0xe0>)
 800634e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006352:	a319      	add	r3, pc, #100	; (adr r3, 80063b8 <scalbn+0xd8>)
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	f7fa f94e 	bl	80005f8 <__aeabi_dmul>
 800635c:	e7e6      	b.n	800632c <scalbn+0x4c>
 800635e:	1872      	adds	r2, r6, r1
 8006360:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006364:	428a      	cmp	r2, r1
 8006366:	dcec      	bgt.n	8006342 <scalbn+0x62>
 8006368:	2a00      	cmp	r2, #0
 800636a:	dd08      	ble.n	800637e <scalbn+0x9e>
 800636c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006370:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006374:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006378:	ec45 4b10 	vmov	d0, r4, r5
 800637c:	bd70      	pop	{r4, r5, r6, pc}
 800637e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006382:	da08      	bge.n	8006396 <scalbn+0xb6>
 8006384:	2d00      	cmp	r5, #0
 8006386:	a10a      	add	r1, pc, #40	; (adr r1, 80063b0 <scalbn+0xd0>)
 8006388:	e9d1 0100 	ldrd	r0, r1, [r1]
 800638c:	dac0      	bge.n	8006310 <scalbn+0x30>
 800638e:	a10e      	add	r1, pc, #56	; (adr r1, 80063c8 <scalbn+0xe8>)
 8006390:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006394:	e7bc      	b.n	8006310 <scalbn+0x30>
 8006396:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800639a:	3236      	adds	r2, #54	; 0x36
 800639c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80063a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80063a4:	4620      	mov	r0, r4
 80063a6:	4b0c      	ldr	r3, [pc, #48]	; (80063d8 <scalbn+0xf8>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	e7d5      	b.n	8006358 <scalbn+0x78>
 80063ac:	f3af 8000 	nop.w
 80063b0:	c2f8f359 	.word	0xc2f8f359
 80063b4:	01a56e1f 	.word	0x01a56e1f
 80063b8:	8800759c 	.word	0x8800759c
 80063bc:	7e37e43c 	.word	0x7e37e43c
 80063c0:	8800759c 	.word	0x8800759c
 80063c4:	fe37e43c 	.word	0xfe37e43c
 80063c8:	c2f8f359 	.word	0xc2f8f359
 80063cc:	81a56e1f 	.word	0x81a56e1f
 80063d0:	43500000 	.word	0x43500000
 80063d4:	ffff3cb0 	.word	0xffff3cb0
 80063d8:	3c900000 	.word	0x3c900000

080063dc <with_errno>:
 80063dc:	b570      	push	{r4, r5, r6, lr}
 80063de:	4604      	mov	r4, r0
 80063e0:	460d      	mov	r5, r1
 80063e2:	4616      	mov	r6, r2
 80063e4:	f000 fc52 	bl	8006c8c <__errno>
 80063e8:	4629      	mov	r1, r5
 80063ea:	6006      	str	r6, [r0, #0]
 80063ec:	4620      	mov	r0, r4
 80063ee:	bd70      	pop	{r4, r5, r6, pc}

080063f0 <xflow>:
 80063f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063f2:	4614      	mov	r4, r2
 80063f4:	461d      	mov	r5, r3
 80063f6:	b108      	cbz	r0, 80063fc <xflow+0xc>
 80063f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80063fc:	e9cd 2300 	strd	r2, r3, [sp]
 8006400:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006404:	4620      	mov	r0, r4
 8006406:	4629      	mov	r1, r5
 8006408:	f7fa f8f6 	bl	80005f8 <__aeabi_dmul>
 800640c:	2222      	movs	r2, #34	; 0x22
 800640e:	b003      	add	sp, #12
 8006410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006414:	f7ff bfe2 	b.w	80063dc <with_errno>

08006418 <__math_uflow>:
 8006418:	b508      	push	{r3, lr}
 800641a:	2200      	movs	r2, #0
 800641c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006420:	f7ff ffe6 	bl	80063f0 <xflow>
 8006424:	ec41 0b10 	vmov	d0, r0, r1
 8006428:	bd08      	pop	{r3, pc}

0800642a <__math_oflow>:
 800642a:	b508      	push	{r3, lr}
 800642c:	2200      	movs	r2, #0
 800642e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006432:	f7ff ffdd 	bl	80063f0 <xflow>
 8006436:	ec41 0b10 	vmov	d0, r0, r1
 800643a:	bd08      	pop	{r3, pc}

0800643c <rand>:
 800643c:	4b16      	ldr	r3, [pc, #88]	; (8006498 <rand+0x5c>)
 800643e:	b510      	push	{r4, lr}
 8006440:	681c      	ldr	r4, [r3, #0]
 8006442:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006444:	b9b3      	cbnz	r3, 8006474 <rand+0x38>
 8006446:	2018      	movs	r0, #24
 8006448:	f000 fcb8 	bl	8006dbc <malloc>
 800644c:	4602      	mov	r2, r0
 800644e:	6320      	str	r0, [r4, #48]	; 0x30
 8006450:	b920      	cbnz	r0, 800645c <rand+0x20>
 8006452:	4b12      	ldr	r3, [pc, #72]	; (800649c <rand+0x60>)
 8006454:	4812      	ldr	r0, [pc, #72]	; (80064a0 <rand+0x64>)
 8006456:	2152      	movs	r1, #82	; 0x52
 8006458:	f000 fc46 	bl	8006ce8 <__assert_func>
 800645c:	4911      	ldr	r1, [pc, #68]	; (80064a4 <rand+0x68>)
 800645e:	4b12      	ldr	r3, [pc, #72]	; (80064a8 <rand+0x6c>)
 8006460:	e9c0 1300 	strd	r1, r3, [r0]
 8006464:	4b11      	ldr	r3, [pc, #68]	; (80064ac <rand+0x70>)
 8006466:	6083      	str	r3, [r0, #8]
 8006468:	230b      	movs	r3, #11
 800646a:	8183      	strh	r3, [r0, #12]
 800646c:	2100      	movs	r1, #0
 800646e:	2001      	movs	r0, #1
 8006470:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006474:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006476:	480e      	ldr	r0, [pc, #56]	; (80064b0 <rand+0x74>)
 8006478:	690b      	ldr	r3, [r1, #16]
 800647a:	694c      	ldr	r4, [r1, #20]
 800647c:	4a0d      	ldr	r2, [pc, #52]	; (80064b4 <rand+0x78>)
 800647e:	4358      	muls	r0, r3
 8006480:	fb02 0004 	mla	r0, r2, r4, r0
 8006484:	fba3 3202 	umull	r3, r2, r3, r2
 8006488:	3301      	adds	r3, #1
 800648a:	eb40 0002 	adc.w	r0, r0, r2
 800648e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006492:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006496:	bd10      	pop	{r4, pc}
 8006498:	20000078 	.word	0x20000078
 800649c:	08007df0 	.word	0x08007df0
 80064a0:	08007e07 	.word	0x08007e07
 80064a4:	abcd330e 	.word	0xabcd330e
 80064a8:	e66d1234 	.word	0xe66d1234
 80064ac:	0005deec 	.word	0x0005deec
 80064b0:	5851f42d 	.word	0x5851f42d
 80064b4:	4c957f2d 	.word	0x4c957f2d

080064b8 <std>:
 80064b8:	2300      	movs	r3, #0
 80064ba:	b510      	push	{r4, lr}
 80064bc:	4604      	mov	r4, r0
 80064be:	e9c0 3300 	strd	r3, r3, [r0]
 80064c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064c6:	6083      	str	r3, [r0, #8]
 80064c8:	8181      	strh	r1, [r0, #12]
 80064ca:	6643      	str	r3, [r0, #100]	; 0x64
 80064cc:	81c2      	strh	r2, [r0, #14]
 80064ce:	6183      	str	r3, [r0, #24]
 80064d0:	4619      	mov	r1, r3
 80064d2:	2208      	movs	r2, #8
 80064d4:	305c      	adds	r0, #92	; 0x5c
 80064d6:	f000 f9a3 	bl	8006820 <memset>
 80064da:	4b0d      	ldr	r3, [pc, #52]	; (8006510 <std+0x58>)
 80064dc:	6263      	str	r3, [r4, #36]	; 0x24
 80064de:	4b0d      	ldr	r3, [pc, #52]	; (8006514 <std+0x5c>)
 80064e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80064e2:	4b0d      	ldr	r3, [pc, #52]	; (8006518 <std+0x60>)
 80064e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064e6:	4b0d      	ldr	r3, [pc, #52]	; (800651c <std+0x64>)
 80064e8:	6323      	str	r3, [r4, #48]	; 0x30
 80064ea:	4b0d      	ldr	r3, [pc, #52]	; (8006520 <std+0x68>)
 80064ec:	6224      	str	r4, [r4, #32]
 80064ee:	429c      	cmp	r4, r3
 80064f0:	d006      	beq.n	8006500 <std+0x48>
 80064f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80064f6:	4294      	cmp	r4, r2
 80064f8:	d002      	beq.n	8006500 <std+0x48>
 80064fa:	33d0      	adds	r3, #208	; 0xd0
 80064fc:	429c      	cmp	r4, r3
 80064fe:	d105      	bne.n	800650c <std+0x54>
 8006500:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006508:	f000 bbea 	b.w	8006ce0 <__retarget_lock_init_recursive>
 800650c:	bd10      	pop	{r4, pc}
 800650e:	bf00      	nop
 8006510:	08006759 	.word	0x08006759
 8006514:	0800677b 	.word	0x0800677b
 8006518:	080067b3 	.word	0x080067b3
 800651c:	080067d7 	.word	0x080067d7
 8006520:	20000174 	.word	0x20000174

08006524 <stdio_exit_handler>:
 8006524:	4a02      	ldr	r2, [pc, #8]	; (8006530 <stdio_exit_handler+0xc>)
 8006526:	4903      	ldr	r1, [pc, #12]	; (8006534 <stdio_exit_handler+0x10>)
 8006528:	4803      	ldr	r0, [pc, #12]	; (8006538 <stdio_exit_handler+0x14>)
 800652a:	f000 b869 	b.w	8006600 <_fwalk_sglue>
 800652e:	bf00      	nop
 8006530:	20000020 	.word	0x20000020
 8006534:	08007601 	.word	0x08007601
 8006538:	2000002c 	.word	0x2000002c

0800653c <cleanup_stdio>:
 800653c:	6841      	ldr	r1, [r0, #4]
 800653e:	4b0c      	ldr	r3, [pc, #48]	; (8006570 <cleanup_stdio+0x34>)
 8006540:	4299      	cmp	r1, r3
 8006542:	b510      	push	{r4, lr}
 8006544:	4604      	mov	r4, r0
 8006546:	d001      	beq.n	800654c <cleanup_stdio+0x10>
 8006548:	f001 f85a 	bl	8007600 <_fflush_r>
 800654c:	68a1      	ldr	r1, [r4, #8]
 800654e:	4b09      	ldr	r3, [pc, #36]	; (8006574 <cleanup_stdio+0x38>)
 8006550:	4299      	cmp	r1, r3
 8006552:	d002      	beq.n	800655a <cleanup_stdio+0x1e>
 8006554:	4620      	mov	r0, r4
 8006556:	f001 f853 	bl	8007600 <_fflush_r>
 800655a:	68e1      	ldr	r1, [r4, #12]
 800655c:	4b06      	ldr	r3, [pc, #24]	; (8006578 <cleanup_stdio+0x3c>)
 800655e:	4299      	cmp	r1, r3
 8006560:	d004      	beq.n	800656c <cleanup_stdio+0x30>
 8006562:	4620      	mov	r0, r4
 8006564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006568:	f001 b84a 	b.w	8007600 <_fflush_r>
 800656c:	bd10      	pop	{r4, pc}
 800656e:	bf00      	nop
 8006570:	20000174 	.word	0x20000174
 8006574:	200001dc 	.word	0x200001dc
 8006578:	20000244 	.word	0x20000244

0800657c <global_stdio_init.part.0>:
 800657c:	b510      	push	{r4, lr}
 800657e:	4b0b      	ldr	r3, [pc, #44]	; (80065ac <global_stdio_init.part.0+0x30>)
 8006580:	4c0b      	ldr	r4, [pc, #44]	; (80065b0 <global_stdio_init.part.0+0x34>)
 8006582:	4a0c      	ldr	r2, [pc, #48]	; (80065b4 <global_stdio_init.part.0+0x38>)
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	4620      	mov	r0, r4
 8006588:	2200      	movs	r2, #0
 800658a:	2104      	movs	r1, #4
 800658c:	f7ff ff94 	bl	80064b8 <std>
 8006590:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006594:	2201      	movs	r2, #1
 8006596:	2109      	movs	r1, #9
 8006598:	f7ff ff8e 	bl	80064b8 <std>
 800659c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80065a0:	2202      	movs	r2, #2
 80065a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065a6:	2112      	movs	r1, #18
 80065a8:	f7ff bf86 	b.w	80064b8 <std>
 80065ac:	200002ac 	.word	0x200002ac
 80065b0:	20000174 	.word	0x20000174
 80065b4:	08006525 	.word	0x08006525

080065b8 <__sfp_lock_acquire>:
 80065b8:	4801      	ldr	r0, [pc, #4]	; (80065c0 <__sfp_lock_acquire+0x8>)
 80065ba:	f000 bb92 	b.w	8006ce2 <__retarget_lock_acquire_recursive>
 80065be:	bf00      	nop
 80065c0:	200002b5 	.word	0x200002b5

080065c4 <__sfp_lock_release>:
 80065c4:	4801      	ldr	r0, [pc, #4]	; (80065cc <__sfp_lock_release+0x8>)
 80065c6:	f000 bb8d 	b.w	8006ce4 <__retarget_lock_release_recursive>
 80065ca:	bf00      	nop
 80065cc:	200002b5 	.word	0x200002b5

080065d0 <__sinit>:
 80065d0:	b510      	push	{r4, lr}
 80065d2:	4604      	mov	r4, r0
 80065d4:	f7ff fff0 	bl	80065b8 <__sfp_lock_acquire>
 80065d8:	6a23      	ldr	r3, [r4, #32]
 80065da:	b11b      	cbz	r3, 80065e4 <__sinit+0x14>
 80065dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065e0:	f7ff bff0 	b.w	80065c4 <__sfp_lock_release>
 80065e4:	4b04      	ldr	r3, [pc, #16]	; (80065f8 <__sinit+0x28>)
 80065e6:	6223      	str	r3, [r4, #32]
 80065e8:	4b04      	ldr	r3, [pc, #16]	; (80065fc <__sinit+0x2c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1f5      	bne.n	80065dc <__sinit+0xc>
 80065f0:	f7ff ffc4 	bl	800657c <global_stdio_init.part.0>
 80065f4:	e7f2      	b.n	80065dc <__sinit+0xc>
 80065f6:	bf00      	nop
 80065f8:	0800653d 	.word	0x0800653d
 80065fc:	200002ac 	.word	0x200002ac

08006600 <_fwalk_sglue>:
 8006600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006604:	4607      	mov	r7, r0
 8006606:	4688      	mov	r8, r1
 8006608:	4614      	mov	r4, r2
 800660a:	2600      	movs	r6, #0
 800660c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006610:	f1b9 0901 	subs.w	r9, r9, #1
 8006614:	d505      	bpl.n	8006622 <_fwalk_sglue+0x22>
 8006616:	6824      	ldr	r4, [r4, #0]
 8006618:	2c00      	cmp	r4, #0
 800661a:	d1f7      	bne.n	800660c <_fwalk_sglue+0xc>
 800661c:	4630      	mov	r0, r6
 800661e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006622:	89ab      	ldrh	r3, [r5, #12]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d907      	bls.n	8006638 <_fwalk_sglue+0x38>
 8006628:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800662c:	3301      	adds	r3, #1
 800662e:	d003      	beq.n	8006638 <_fwalk_sglue+0x38>
 8006630:	4629      	mov	r1, r5
 8006632:	4638      	mov	r0, r7
 8006634:	47c0      	blx	r8
 8006636:	4306      	orrs	r6, r0
 8006638:	3568      	adds	r5, #104	; 0x68
 800663a:	e7e9      	b.n	8006610 <_fwalk_sglue+0x10>

0800663c <_perror_r>:
 800663c:	6a03      	ldr	r3, [r0, #32]
 800663e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006640:	68c4      	ldr	r4, [r0, #12]
 8006642:	4605      	mov	r5, r0
 8006644:	460e      	mov	r6, r1
 8006646:	b90b      	cbnz	r3, 800664c <_perror_r+0x10>
 8006648:	f7ff ffc2 	bl	80065d0 <__sinit>
 800664c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800664e:	07d8      	lsls	r0, r3, #31
 8006650:	d405      	bmi.n	800665e <_perror_r+0x22>
 8006652:	89a3      	ldrh	r3, [r4, #12]
 8006654:	0599      	lsls	r1, r3, #22
 8006656:	d402      	bmi.n	800665e <_perror_r+0x22>
 8006658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800665a:	f000 fb42 	bl	8006ce2 <__retarget_lock_acquire_recursive>
 800665e:	4621      	mov	r1, r4
 8006660:	4628      	mov	r0, r5
 8006662:	f000 ffcd 	bl	8007600 <_fflush_r>
 8006666:	bb1e      	cbnz	r6, 80066b0 <_perror_r+0x74>
 8006668:	6829      	ldr	r1, [r5, #0]
 800666a:	ab01      	add	r3, sp, #4
 800666c:	2201      	movs	r2, #1
 800666e:	4628      	mov	r0, r5
 8006670:	f000 f8de 	bl	8006830 <_strerror_r>
 8006674:	4607      	mov	r7, r0
 8006676:	2800      	cmp	r0, #0
 8006678:	d145      	bne.n	8006706 <_perror_r+0xca>
 800667a:	4831      	ldr	r0, [pc, #196]	; (8006740 <_perror_r+0x104>)
 800667c:	4f30      	ldr	r7, [pc, #192]	; (8006740 <_perror_r+0x104>)
 800667e:	f7f9 fda7 	bl	80001d0 <strlen>
 8006682:	4606      	mov	r6, r0
 8006684:	b156      	cbz	r6, 800669c <_perror_r+0x60>
 8006686:	4620      	mov	r0, r4
 8006688:	f000 ffe2 	bl	8007650 <fileno>
 800668c:	4633      	mov	r3, r6
 800668e:	4601      	mov	r1, r0
 8006690:	463a      	mov	r2, r7
 8006692:	4628      	mov	r0, r5
 8006694:	f000 fae8 	bl	8006c68 <_write_r>
 8006698:	2800      	cmp	r0, #0
 800669a:	da47      	bge.n	800672c <_perror_r+0xf0>
 800669c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066a0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80066a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066a6:	07d2      	lsls	r2, r2, #31
 80066a8:	81a3      	strh	r3, [r4, #12]
 80066aa:	d542      	bpl.n	8006732 <_perror_r+0xf6>
 80066ac:	b003      	add	sp, #12
 80066ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066b0:	7833      	ldrb	r3, [r6, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0d8      	beq.n	8006668 <_perror_r+0x2c>
 80066b6:	4630      	mov	r0, r6
 80066b8:	f7f9 fd8a 	bl	80001d0 <strlen>
 80066bc:	4607      	mov	r7, r0
 80066be:	b157      	cbz	r7, 80066d6 <_perror_r+0x9a>
 80066c0:	4620      	mov	r0, r4
 80066c2:	f000 ffc5 	bl	8007650 <fileno>
 80066c6:	463b      	mov	r3, r7
 80066c8:	4601      	mov	r1, r0
 80066ca:	4632      	mov	r2, r6
 80066cc:	4628      	mov	r0, r5
 80066ce:	f000 facb 	bl	8006c68 <_write_r>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	da14      	bge.n	8006700 <_perror_r+0xc4>
 80066d6:	481b      	ldr	r0, [pc, #108]	; (8006744 <_perror_r+0x108>)
 80066d8:	4f1a      	ldr	r7, [pc, #104]	; (8006744 <_perror_r+0x108>)
 80066da:	f7f9 fd79 	bl	80001d0 <strlen>
 80066de:	4606      	mov	r6, r0
 80066e0:	2e00      	cmp	r6, #0
 80066e2:	d0c1      	beq.n	8006668 <_perror_r+0x2c>
 80066e4:	4620      	mov	r0, r4
 80066e6:	f000 ffb3 	bl	8007650 <fileno>
 80066ea:	4633      	mov	r3, r6
 80066ec:	4601      	mov	r1, r0
 80066ee:	463a      	mov	r2, r7
 80066f0:	4628      	mov	r0, r5
 80066f2:	f000 fab9 	bl	8006c68 <_write_r>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	dbb6      	blt.n	8006668 <_perror_r+0x2c>
 80066fa:	1a36      	subs	r6, r6, r0
 80066fc:	4407      	add	r7, r0
 80066fe:	e7ef      	b.n	80066e0 <_perror_r+0xa4>
 8006700:	1a3f      	subs	r7, r7, r0
 8006702:	4406      	add	r6, r0
 8006704:	e7db      	b.n	80066be <_perror_r+0x82>
 8006706:	f7f9 fd63 	bl	80001d0 <strlen>
 800670a:	4606      	mov	r6, r0
 800670c:	2e00      	cmp	r6, #0
 800670e:	d0b4      	beq.n	800667a <_perror_r+0x3e>
 8006710:	4620      	mov	r0, r4
 8006712:	f000 ff9d 	bl	8007650 <fileno>
 8006716:	4633      	mov	r3, r6
 8006718:	4601      	mov	r1, r0
 800671a:	463a      	mov	r2, r7
 800671c:	4628      	mov	r0, r5
 800671e:	f000 faa3 	bl	8006c68 <_write_r>
 8006722:	2800      	cmp	r0, #0
 8006724:	dba9      	blt.n	800667a <_perror_r+0x3e>
 8006726:	1a36      	subs	r6, r6, r0
 8006728:	4407      	add	r7, r0
 800672a:	e7ef      	b.n	800670c <_perror_r+0xd0>
 800672c:	1a36      	subs	r6, r6, r0
 800672e:	4407      	add	r7, r0
 8006730:	e7a8      	b.n	8006684 <_perror_r+0x48>
 8006732:	059b      	lsls	r3, r3, #22
 8006734:	d4ba      	bmi.n	80066ac <_perror_r+0x70>
 8006736:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006738:	f000 fad4 	bl	8006ce4 <__retarget_lock_release_recursive>
 800673c:	e7b6      	b.n	80066ac <_perror_r+0x70>
 800673e:	bf00      	nop
 8006740:	0800852f 	.word	0x0800852f
 8006744:	080084ff 	.word	0x080084ff

08006748 <perror>:
 8006748:	4b02      	ldr	r3, [pc, #8]	; (8006754 <perror+0xc>)
 800674a:	4601      	mov	r1, r0
 800674c:	6818      	ldr	r0, [r3, #0]
 800674e:	f7ff bf75 	b.w	800663c <_perror_r>
 8006752:	bf00      	nop
 8006754:	20000078 	.word	0x20000078

08006758 <__sread>:
 8006758:	b510      	push	{r4, lr}
 800675a:	460c      	mov	r4, r1
 800675c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006760:	f000 fa70 	bl	8006c44 <_read_r>
 8006764:	2800      	cmp	r0, #0
 8006766:	bfab      	itete	ge
 8006768:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800676a:	89a3      	ldrhlt	r3, [r4, #12]
 800676c:	181b      	addge	r3, r3, r0
 800676e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006772:	bfac      	ite	ge
 8006774:	6563      	strge	r3, [r4, #84]	; 0x54
 8006776:	81a3      	strhlt	r3, [r4, #12]
 8006778:	bd10      	pop	{r4, pc}

0800677a <__swrite>:
 800677a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800677e:	461f      	mov	r7, r3
 8006780:	898b      	ldrh	r3, [r1, #12]
 8006782:	05db      	lsls	r3, r3, #23
 8006784:	4605      	mov	r5, r0
 8006786:	460c      	mov	r4, r1
 8006788:	4616      	mov	r6, r2
 800678a:	d505      	bpl.n	8006798 <__swrite+0x1e>
 800678c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006790:	2302      	movs	r3, #2
 8006792:	2200      	movs	r2, #0
 8006794:	f000 fa44 	bl	8006c20 <_lseek_r>
 8006798:	89a3      	ldrh	r3, [r4, #12]
 800679a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800679e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067a2:	81a3      	strh	r3, [r4, #12]
 80067a4:	4632      	mov	r2, r6
 80067a6:	463b      	mov	r3, r7
 80067a8:	4628      	mov	r0, r5
 80067aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067ae:	f000 ba5b 	b.w	8006c68 <_write_r>

080067b2 <__sseek>:
 80067b2:	b510      	push	{r4, lr}
 80067b4:	460c      	mov	r4, r1
 80067b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ba:	f000 fa31 	bl	8006c20 <_lseek_r>
 80067be:	1c43      	adds	r3, r0, #1
 80067c0:	89a3      	ldrh	r3, [r4, #12]
 80067c2:	bf15      	itete	ne
 80067c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80067c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80067ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80067ce:	81a3      	strheq	r3, [r4, #12]
 80067d0:	bf18      	it	ne
 80067d2:	81a3      	strhne	r3, [r4, #12]
 80067d4:	bd10      	pop	{r4, pc}

080067d6 <__sclose>:
 80067d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067da:	f000 ba11 	b.w	8006c00 <_close_r>
	...

080067e0 <_vsiprintf_r>:
 80067e0:	b500      	push	{lr}
 80067e2:	b09b      	sub	sp, #108	; 0x6c
 80067e4:	9100      	str	r1, [sp, #0]
 80067e6:	9104      	str	r1, [sp, #16]
 80067e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067ec:	9105      	str	r1, [sp, #20]
 80067ee:	9102      	str	r1, [sp, #8]
 80067f0:	4905      	ldr	r1, [pc, #20]	; (8006808 <_vsiprintf_r+0x28>)
 80067f2:	9103      	str	r1, [sp, #12]
 80067f4:	4669      	mov	r1, sp
 80067f6:	f000 fbef 	bl	8006fd8 <_svfiprintf_r>
 80067fa:	9b00      	ldr	r3, [sp, #0]
 80067fc:	2200      	movs	r2, #0
 80067fe:	701a      	strb	r2, [r3, #0]
 8006800:	b01b      	add	sp, #108	; 0x6c
 8006802:	f85d fb04 	ldr.w	pc, [sp], #4
 8006806:	bf00      	nop
 8006808:	ffff0208 	.word	0xffff0208

0800680c <vsiprintf>:
 800680c:	4613      	mov	r3, r2
 800680e:	460a      	mov	r2, r1
 8006810:	4601      	mov	r1, r0
 8006812:	4802      	ldr	r0, [pc, #8]	; (800681c <vsiprintf+0x10>)
 8006814:	6800      	ldr	r0, [r0, #0]
 8006816:	f7ff bfe3 	b.w	80067e0 <_vsiprintf_r>
 800681a:	bf00      	nop
 800681c:	20000078 	.word	0x20000078

08006820 <memset>:
 8006820:	4402      	add	r2, r0
 8006822:	4603      	mov	r3, r0
 8006824:	4293      	cmp	r3, r2
 8006826:	d100      	bne.n	800682a <memset+0xa>
 8006828:	4770      	bx	lr
 800682a:	f803 1b01 	strb.w	r1, [r3], #1
 800682e:	e7f9      	b.n	8006824 <memset+0x4>

08006830 <_strerror_r>:
 8006830:	b510      	push	{r4, lr}
 8006832:	4604      	mov	r4, r0
 8006834:	4608      	mov	r0, r1
 8006836:	4611      	mov	r1, r2
 8006838:	288e      	cmp	r0, #142	; 0x8e
 800683a:	f200 8130 	bhi.w	8006a9e <_strerror_r+0x26e>
 800683e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8006842:	0139      	.short	0x0139
 8006844:	0092008f 	.word	0x0092008f
 8006848:	00960094 	.word	0x00960094
 800684c:	009a0098 	.word	0x009a0098
 8006850:	009e009c 	.word	0x009e009c
 8006854:	00a400a2 	.word	0x00a400a2
 8006858:	00aa00a8 	.word	0x00aa00a8
 800685c:	00ae00ac 	.word	0x00ae00ac
 8006860:	00b0012e 	.word	0x00b0012e
 8006864:	00b400b2 	.word	0x00b400b2
 8006868:	00b800b6 	.word	0x00b800b6
 800686c:	00c000be 	.word	0x00c000be
 8006870:	00c800c6 	.word	0x00c800c6
 8006874:	00cc00ca 	.word	0x00cc00ca
 8006878:	00d200ce 	.word	0x00d200ce
 800687c:	00d800d6 	.word	0x00d800d6
 8006880:	00dc00da 	.word	0x00dc00da
 8006884:	00e000de 	.word	0x00e000de
 8006888:	00e400e2 	.word	0x00e400e2
 800688c:	012e012e 	.word	0x012e012e
 8006890:	012e012e 	.word	0x012e012e
 8006894:	012e012e 	.word	0x012e012e
 8006898:	012e012e 	.word	0x012e012e
 800689c:	00ec00e8 	.word	0x00ec00e8
 80068a0:	012e012e 	.word	0x012e012e
 80068a4:	012e012e 	.word	0x012e012e
 80068a8:	012e012e 	.word	0x012e012e
 80068ac:	012e012e 	.word	0x012e012e
 80068b0:	012e012e 	.word	0x012e012e
 80068b4:	012e012e 	.word	0x012e012e
 80068b8:	00ee012e 	.word	0x00ee012e
 80068bc:	00f00108 	.word	0x00f00108
 80068c0:	012e00f2 	.word	0x012e00f2
 80068c4:	012e012e 	.word	0x012e012e
 80068c8:	012e00f4 	.word	0x012e00f4
 80068cc:	012e012e 	.word	0x012e012e
 80068d0:	012e00f6 	.word	0x012e00f6
 80068d4:	00fa012e 	.word	0x00fa012e
 80068d8:	012e012e 	.word	0x012e012e
 80068dc:	012e00fc 	.word	0x012e00fc
 80068e0:	012e012e 	.word	0x012e012e
 80068e4:	012e012e 	.word	0x012e012e
 80068e8:	012e012e 	.word	0x012e012e
 80068ec:	012e012e 	.word	0x012e012e
 80068f0:	00fe012e 	.word	0x00fe012e
 80068f4:	0100012e 	.word	0x0100012e
 80068f8:	01040102 	.word	0x01040102
 80068fc:	012e012e 	.word	0x012e012e
 8006900:	012e0126 	.word	0x012e0126
 8006904:	012e012e 	.word	0x012e012e
 8006908:	012e012e 	.word	0x012e012e
 800690c:	012e012e 	.word	0x012e012e
 8006910:	0114012e 	.word	0x0114012e
 8006914:	010a0106 	.word	0x010a0106
 8006918:	010e010c 	.word	0x010e010c
 800691c:	012e0110 	.word	0x012e0110
 8006920:	01160112 	.word	0x01160112
 8006924:	00ea011a 	.word	0x00ea011a
 8006928:	012c00c2 	.word	0x012c00c2
 800692c:	00d000ba 	.word	0x00d000ba
 8006930:	00a000bc 	.word	0x00a000bc
 8006934:	012a00a6 	.word	0x012a00a6
 8006938:	012e00f8 	.word	0x012e00f8
 800693c:	00c40118 	.word	0x00c40118
 8006940:	011c011e 	.word	0x011c011e
 8006944:	012e012e 	.word	0x012e012e
 8006948:	012e012e 	.word	0x012e012e
 800694c:	00d4012e 	.word	0x00d4012e
 8006950:	012e012e 	.word	0x012e012e
 8006954:	00e6012e 	.word	0x00e6012e
 8006958:	01200128 	.word	0x01200128
 800695c:	01240122 	.word	0x01240122
 8006960:	4b55      	ldr	r3, [pc, #340]	; (8006ab8 <_strerror_r+0x288>)
 8006962:	4618      	mov	r0, r3
 8006964:	bd10      	pop	{r4, pc}
 8006966:	4b55      	ldr	r3, [pc, #340]	; (8006abc <_strerror_r+0x28c>)
 8006968:	e7fb      	b.n	8006962 <_strerror_r+0x132>
 800696a:	4b55      	ldr	r3, [pc, #340]	; (8006ac0 <_strerror_r+0x290>)
 800696c:	e7f9      	b.n	8006962 <_strerror_r+0x132>
 800696e:	4b55      	ldr	r3, [pc, #340]	; (8006ac4 <_strerror_r+0x294>)
 8006970:	e7f7      	b.n	8006962 <_strerror_r+0x132>
 8006972:	4b55      	ldr	r3, [pc, #340]	; (8006ac8 <_strerror_r+0x298>)
 8006974:	e7f5      	b.n	8006962 <_strerror_r+0x132>
 8006976:	4b55      	ldr	r3, [pc, #340]	; (8006acc <_strerror_r+0x29c>)
 8006978:	e7f3      	b.n	8006962 <_strerror_r+0x132>
 800697a:	4b55      	ldr	r3, [pc, #340]	; (8006ad0 <_strerror_r+0x2a0>)
 800697c:	e7f1      	b.n	8006962 <_strerror_r+0x132>
 800697e:	4b55      	ldr	r3, [pc, #340]	; (8006ad4 <_strerror_r+0x2a4>)
 8006980:	e7ef      	b.n	8006962 <_strerror_r+0x132>
 8006982:	4b55      	ldr	r3, [pc, #340]	; (8006ad8 <_strerror_r+0x2a8>)
 8006984:	e7ed      	b.n	8006962 <_strerror_r+0x132>
 8006986:	4b55      	ldr	r3, [pc, #340]	; (8006adc <_strerror_r+0x2ac>)
 8006988:	e7eb      	b.n	8006962 <_strerror_r+0x132>
 800698a:	4b55      	ldr	r3, [pc, #340]	; (8006ae0 <_strerror_r+0x2b0>)
 800698c:	e7e9      	b.n	8006962 <_strerror_r+0x132>
 800698e:	4b55      	ldr	r3, [pc, #340]	; (8006ae4 <_strerror_r+0x2b4>)
 8006990:	e7e7      	b.n	8006962 <_strerror_r+0x132>
 8006992:	4b55      	ldr	r3, [pc, #340]	; (8006ae8 <_strerror_r+0x2b8>)
 8006994:	e7e5      	b.n	8006962 <_strerror_r+0x132>
 8006996:	4b55      	ldr	r3, [pc, #340]	; (8006aec <_strerror_r+0x2bc>)
 8006998:	e7e3      	b.n	8006962 <_strerror_r+0x132>
 800699a:	4b55      	ldr	r3, [pc, #340]	; (8006af0 <_strerror_r+0x2c0>)
 800699c:	e7e1      	b.n	8006962 <_strerror_r+0x132>
 800699e:	4b55      	ldr	r3, [pc, #340]	; (8006af4 <_strerror_r+0x2c4>)
 80069a0:	e7df      	b.n	8006962 <_strerror_r+0x132>
 80069a2:	4b55      	ldr	r3, [pc, #340]	; (8006af8 <_strerror_r+0x2c8>)
 80069a4:	e7dd      	b.n	8006962 <_strerror_r+0x132>
 80069a6:	4b55      	ldr	r3, [pc, #340]	; (8006afc <_strerror_r+0x2cc>)
 80069a8:	e7db      	b.n	8006962 <_strerror_r+0x132>
 80069aa:	4b55      	ldr	r3, [pc, #340]	; (8006b00 <_strerror_r+0x2d0>)
 80069ac:	e7d9      	b.n	8006962 <_strerror_r+0x132>
 80069ae:	4b55      	ldr	r3, [pc, #340]	; (8006b04 <_strerror_r+0x2d4>)
 80069b0:	e7d7      	b.n	8006962 <_strerror_r+0x132>
 80069b2:	4b55      	ldr	r3, [pc, #340]	; (8006b08 <_strerror_r+0x2d8>)
 80069b4:	e7d5      	b.n	8006962 <_strerror_r+0x132>
 80069b6:	4b55      	ldr	r3, [pc, #340]	; (8006b0c <_strerror_r+0x2dc>)
 80069b8:	e7d3      	b.n	8006962 <_strerror_r+0x132>
 80069ba:	4b55      	ldr	r3, [pc, #340]	; (8006b10 <_strerror_r+0x2e0>)
 80069bc:	e7d1      	b.n	8006962 <_strerror_r+0x132>
 80069be:	4b55      	ldr	r3, [pc, #340]	; (8006b14 <_strerror_r+0x2e4>)
 80069c0:	e7cf      	b.n	8006962 <_strerror_r+0x132>
 80069c2:	4b55      	ldr	r3, [pc, #340]	; (8006b18 <_strerror_r+0x2e8>)
 80069c4:	e7cd      	b.n	8006962 <_strerror_r+0x132>
 80069c6:	4b55      	ldr	r3, [pc, #340]	; (8006b1c <_strerror_r+0x2ec>)
 80069c8:	e7cb      	b.n	8006962 <_strerror_r+0x132>
 80069ca:	4b55      	ldr	r3, [pc, #340]	; (8006b20 <_strerror_r+0x2f0>)
 80069cc:	e7c9      	b.n	8006962 <_strerror_r+0x132>
 80069ce:	4b55      	ldr	r3, [pc, #340]	; (8006b24 <_strerror_r+0x2f4>)
 80069d0:	e7c7      	b.n	8006962 <_strerror_r+0x132>
 80069d2:	4b55      	ldr	r3, [pc, #340]	; (8006b28 <_strerror_r+0x2f8>)
 80069d4:	e7c5      	b.n	8006962 <_strerror_r+0x132>
 80069d6:	4b55      	ldr	r3, [pc, #340]	; (8006b2c <_strerror_r+0x2fc>)
 80069d8:	e7c3      	b.n	8006962 <_strerror_r+0x132>
 80069da:	4b55      	ldr	r3, [pc, #340]	; (8006b30 <_strerror_r+0x300>)
 80069dc:	e7c1      	b.n	8006962 <_strerror_r+0x132>
 80069de:	4b55      	ldr	r3, [pc, #340]	; (8006b34 <_strerror_r+0x304>)
 80069e0:	e7bf      	b.n	8006962 <_strerror_r+0x132>
 80069e2:	4b55      	ldr	r3, [pc, #340]	; (8006b38 <_strerror_r+0x308>)
 80069e4:	e7bd      	b.n	8006962 <_strerror_r+0x132>
 80069e6:	4b55      	ldr	r3, [pc, #340]	; (8006b3c <_strerror_r+0x30c>)
 80069e8:	e7bb      	b.n	8006962 <_strerror_r+0x132>
 80069ea:	4b55      	ldr	r3, [pc, #340]	; (8006b40 <_strerror_r+0x310>)
 80069ec:	e7b9      	b.n	8006962 <_strerror_r+0x132>
 80069ee:	4b55      	ldr	r3, [pc, #340]	; (8006b44 <_strerror_r+0x314>)
 80069f0:	e7b7      	b.n	8006962 <_strerror_r+0x132>
 80069f2:	4b55      	ldr	r3, [pc, #340]	; (8006b48 <_strerror_r+0x318>)
 80069f4:	e7b5      	b.n	8006962 <_strerror_r+0x132>
 80069f6:	4b55      	ldr	r3, [pc, #340]	; (8006b4c <_strerror_r+0x31c>)
 80069f8:	e7b3      	b.n	8006962 <_strerror_r+0x132>
 80069fa:	4b55      	ldr	r3, [pc, #340]	; (8006b50 <_strerror_r+0x320>)
 80069fc:	e7b1      	b.n	8006962 <_strerror_r+0x132>
 80069fe:	4b55      	ldr	r3, [pc, #340]	; (8006b54 <_strerror_r+0x324>)
 8006a00:	e7af      	b.n	8006962 <_strerror_r+0x132>
 8006a02:	4b55      	ldr	r3, [pc, #340]	; (8006b58 <_strerror_r+0x328>)
 8006a04:	e7ad      	b.n	8006962 <_strerror_r+0x132>
 8006a06:	4b55      	ldr	r3, [pc, #340]	; (8006b5c <_strerror_r+0x32c>)
 8006a08:	e7ab      	b.n	8006962 <_strerror_r+0x132>
 8006a0a:	4b55      	ldr	r3, [pc, #340]	; (8006b60 <_strerror_r+0x330>)
 8006a0c:	e7a9      	b.n	8006962 <_strerror_r+0x132>
 8006a0e:	4b55      	ldr	r3, [pc, #340]	; (8006b64 <_strerror_r+0x334>)
 8006a10:	e7a7      	b.n	8006962 <_strerror_r+0x132>
 8006a12:	4b55      	ldr	r3, [pc, #340]	; (8006b68 <_strerror_r+0x338>)
 8006a14:	e7a5      	b.n	8006962 <_strerror_r+0x132>
 8006a16:	4b55      	ldr	r3, [pc, #340]	; (8006b6c <_strerror_r+0x33c>)
 8006a18:	e7a3      	b.n	8006962 <_strerror_r+0x132>
 8006a1a:	4b55      	ldr	r3, [pc, #340]	; (8006b70 <_strerror_r+0x340>)
 8006a1c:	e7a1      	b.n	8006962 <_strerror_r+0x132>
 8006a1e:	4b55      	ldr	r3, [pc, #340]	; (8006b74 <_strerror_r+0x344>)
 8006a20:	e79f      	b.n	8006962 <_strerror_r+0x132>
 8006a22:	4b55      	ldr	r3, [pc, #340]	; (8006b78 <_strerror_r+0x348>)
 8006a24:	e79d      	b.n	8006962 <_strerror_r+0x132>
 8006a26:	4b55      	ldr	r3, [pc, #340]	; (8006b7c <_strerror_r+0x34c>)
 8006a28:	e79b      	b.n	8006962 <_strerror_r+0x132>
 8006a2a:	4b55      	ldr	r3, [pc, #340]	; (8006b80 <_strerror_r+0x350>)
 8006a2c:	e799      	b.n	8006962 <_strerror_r+0x132>
 8006a2e:	4b55      	ldr	r3, [pc, #340]	; (8006b84 <_strerror_r+0x354>)
 8006a30:	e797      	b.n	8006962 <_strerror_r+0x132>
 8006a32:	4b55      	ldr	r3, [pc, #340]	; (8006b88 <_strerror_r+0x358>)
 8006a34:	e795      	b.n	8006962 <_strerror_r+0x132>
 8006a36:	4b55      	ldr	r3, [pc, #340]	; (8006b8c <_strerror_r+0x35c>)
 8006a38:	e793      	b.n	8006962 <_strerror_r+0x132>
 8006a3a:	4b55      	ldr	r3, [pc, #340]	; (8006b90 <_strerror_r+0x360>)
 8006a3c:	e791      	b.n	8006962 <_strerror_r+0x132>
 8006a3e:	4b55      	ldr	r3, [pc, #340]	; (8006b94 <_strerror_r+0x364>)
 8006a40:	e78f      	b.n	8006962 <_strerror_r+0x132>
 8006a42:	4b55      	ldr	r3, [pc, #340]	; (8006b98 <_strerror_r+0x368>)
 8006a44:	e78d      	b.n	8006962 <_strerror_r+0x132>
 8006a46:	4b55      	ldr	r3, [pc, #340]	; (8006b9c <_strerror_r+0x36c>)
 8006a48:	e78b      	b.n	8006962 <_strerror_r+0x132>
 8006a4a:	4b55      	ldr	r3, [pc, #340]	; (8006ba0 <_strerror_r+0x370>)
 8006a4c:	e789      	b.n	8006962 <_strerror_r+0x132>
 8006a4e:	4b55      	ldr	r3, [pc, #340]	; (8006ba4 <_strerror_r+0x374>)
 8006a50:	e787      	b.n	8006962 <_strerror_r+0x132>
 8006a52:	4b55      	ldr	r3, [pc, #340]	; (8006ba8 <_strerror_r+0x378>)
 8006a54:	e785      	b.n	8006962 <_strerror_r+0x132>
 8006a56:	4b55      	ldr	r3, [pc, #340]	; (8006bac <_strerror_r+0x37c>)
 8006a58:	e783      	b.n	8006962 <_strerror_r+0x132>
 8006a5a:	4b55      	ldr	r3, [pc, #340]	; (8006bb0 <_strerror_r+0x380>)
 8006a5c:	e781      	b.n	8006962 <_strerror_r+0x132>
 8006a5e:	4b55      	ldr	r3, [pc, #340]	; (8006bb4 <_strerror_r+0x384>)
 8006a60:	e77f      	b.n	8006962 <_strerror_r+0x132>
 8006a62:	4b55      	ldr	r3, [pc, #340]	; (8006bb8 <_strerror_r+0x388>)
 8006a64:	e77d      	b.n	8006962 <_strerror_r+0x132>
 8006a66:	4b55      	ldr	r3, [pc, #340]	; (8006bbc <_strerror_r+0x38c>)
 8006a68:	e77b      	b.n	8006962 <_strerror_r+0x132>
 8006a6a:	4b55      	ldr	r3, [pc, #340]	; (8006bc0 <_strerror_r+0x390>)
 8006a6c:	e779      	b.n	8006962 <_strerror_r+0x132>
 8006a6e:	4b55      	ldr	r3, [pc, #340]	; (8006bc4 <_strerror_r+0x394>)
 8006a70:	e777      	b.n	8006962 <_strerror_r+0x132>
 8006a72:	4b55      	ldr	r3, [pc, #340]	; (8006bc8 <_strerror_r+0x398>)
 8006a74:	e775      	b.n	8006962 <_strerror_r+0x132>
 8006a76:	4b55      	ldr	r3, [pc, #340]	; (8006bcc <_strerror_r+0x39c>)
 8006a78:	e773      	b.n	8006962 <_strerror_r+0x132>
 8006a7a:	4b55      	ldr	r3, [pc, #340]	; (8006bd0 <_strerror_r+0x3a0>)
 8006a7c:	e771      	b.n	8006962 <_strerror_r+0x132>
 8006a7e:	4b55      	ldr	r3, [pc, #340]	; (8006bd4 <_strerror_r+0x3a4>)
 8006a80:	e76f      	b.n	8006962 <_strerror_r+0x132>
 8006a82:	4b55      	ldr	r3, [pc, #340]	; (8006bd8 <_strerror_r+0x3a8>)
 8006a84:	e76d      	b.n	8006962 <_strerror_r+0x132>
 8006a86:	4b55      	ldr	r3, [pc, #340]	; (8006bdc <_strerror_r+0x3ac>)
 8006a88:	e76b      	b.n	8006962 <_strerror_r+0x132>
 8006a8a:	4b55      	ldr	r3, [pc, #340]	; (8006be0 <_strerror_r+0x3b0>)
 8006a8c:	e769      	b.n	8006962 <_strerror_r+0x132>
 8006a8e:	4b55      	ldr	r3, [pc, #340]	; (8006be4 <_strerror_r+0x3b4>)
 8006a90:	e767      	b.n	8006962 <_strerror_r+0x132>
 8006a92:	4b55      	ldr	r3, [pc, #340]	; (8006be8 <_strerror_r+0x3b8>)
 8006a94:	e765      	b.n	8006962 <_strerror_r+0x132>
 8006a96:	4b55      	ldr	r3, [pc, #340]	; (8006bec <_strerror_r+0x3bc>)
 8006a98:	e763      	b.n	8006962 <_strerror_r+0x132>
 8006a9a:	4b55      	ldr	r3, [pc, #340]	; (8006bf0 <_strerror_r+0x3c0>)
 8006a9c:	e761      	b.n	8006962 <_strerror_r+0x132>
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	bf14      	ite	ne
 8006aa2:	461a      	movne	r2, r3
 8006aa4:	4622      	moveq	r2, r4
 8006aa6:	f000 f8a9 	bl	8006bfc <_user_strerror>
 8006aaa:	4b52      	ldr	r3, [pc, #328]	; (8006bf4 <_strerror_r+0x3c4>)
 8006aac:	2800      	cmp	r0, #0
 8006aae:	bf18      	it	ne
 8006ab0:	4603      	movne	r3, r0
 8006ab2:	e756      	b.n	8006962 <_strerror_r+0x132>
 8006ab4:	4b50      	ldr	r3, [pc, #320]	; (8006bf8 <_strerror_r+0x3c8>)
 8006ab6:	e754      	b.n	8006962 <_strerror_r+0x132>
 8006ab8:	08007e67 	.word	0x08007e67
 8006abc:	08007e71 	.word	0x08007e71
 8006ac0:	08007e8b 	.word	0x08007e8b
 8006ac4:	08007e9b 	.word	0x08007e9b
 8006ac8:	08007eb3 	.word	0x08007eb3
 8006acc:	08007ebd 	.word	0x08007ebd
 8006ad0:	08007ed7 	.word	0x08007ed7
 8006ad4:	08007ee9 	.word	0x08007ee9
 8006ad8:	08007efb 	.word	0x08007efb
 8006adc:	08007f14 	.word	0x08007f14
 8006ae0:	08007f24 	.word	0x08007f24
 8006ae4:	08007f30 	.word	0x08007f30
 8006ae8:	08007f4d 	.word	0x08007f4d
 8006aec:	08007f5f 	.word	0x08007f5f
 8006af0:	08007f70 	.word	0x08007f70
 8006af4:	08007f82 	.word	0x08007f82
 8006af8:	08007f8e 	.word	0x08007f8e
 8006afc:	08007fa6 	.word	0x08007fa6
 8006b00:	08007fb2 	.word	0x08007fb2
 8006b04:	08007fc4 	.word	0x08007fc4
 8006b08:	08007fd3 	.word	0x08007fd3
 8006b0c:	08007fe3 	.word	0x08007fe3
 8006b10:	08007ff0 	.word	0x08007ff0
 8006b14:	0800800f 	.word	0x0800800f
 8006b18:	0800801e 	.word	0x0800801e
 8006b1c:	0800802f 	.word	0x0800802f
 8006b20:	08008053 	.word	0x08008053
 8006b24:	08008071 	.word	0x08008071
 8006b28:	0800808f 	.word	0x0800808f
 8006b2c:	080080af 	.word	0x080080af
 8006b30:	080080c6 	.word	0x080080c6
 8006b34:	080080d5 	.word	0x080080d5
 8006b38:	080080e4 	.word	0x080080e4
 8006b3c:	080080f8 	.word	0x080080f8
 8006b40:	08008110 	.word	0x08008110
 8006b44:	0800811e 	.word	0x0800811e
 8006b48:	0800812b 	.word	0x0800812b
 8006b4c:	08008141 	.word	0x08008141
 8006b50:	08008150 	.word	0x08008150
 8006b54:	0800815c 	.word	0x0800815c
 8006b58:	0800818b 	.word	0x0800818b
 8006b5c:	0800819c 	.word	0x0800819c
 8006b60:	080081b7 	.word	0x080081b7
 8006b64:	080081ca 	.word	0x080081ca
 8006b68:	080081e0 	.word	0x080081e0
 8006b6c:	080081e9 	.word	0x080081e9
 8006b70:	08008200 	.word	0x08008200
 8006b74:	08008208 	.word	0x08008208
 8006b78:	08008215 	.word	0x08008215
 8006b7c:	0800822a 	.word	0x0800822a
 8006b80:	0800823e 	.word	0x0800823e
 8006b84:	08008256 	.word	0x08008256
 8006b88:	08008265 	.word	0x08008265
 8006b8c:	08008276 	.word	0x08008276
 8006b90:	08008289 	.word	0x08008289
 8006b94:	08008295 	.word	0x08008295
 8006b98:	080082ae 	.word	0x080082ae
 8006b9c:	080082c2 	.word	0x080082c2
 8006ba0:	080082dd 	.word	0x080082dd
 8006ba4:	080082f5 	.word	0x080082f5
 8006ba8:	0800830f 	.word	0x0800830f
 8006bac:	08008317 	.word	0x08008317
 8006bb0:	08008347 	.word	0x08008347
 8006bb4:	08008366 	.word	0x08008366
 8006bb8:	08008385 	.word	0x08008385
 8006bbc:	0800839c 	.word	0x0800839c
 8006bc0:	080083af 	.word	0x080083af
 8006bc4:	080083c8 	.word	0x080083c8
 8006bc8:	080083df 	.word	0x080083df
 8006bcc:	080083f5 	.word	0x080083f5
 8006bd0:	08008416 	.word	0x08008416
 8006bd4:	0800842e 	.word	0x0800842e
 8006bd8:	0800844a 	.word	0x0800844a
 8006bdc:	0800845d 	.word	0x0800845d
 8006be0:	08008473 	.word	0x08008473
 8006be4:	08008487 	.word	0x08008487
 8006be8:	080084a9 	.word	0x080084a9
 8006bec:	080084cf 	.word	0x080084cf
 8006bf0:	080084e0 	.word	0x080084e0
 8006bf4:	08008530 	.word	0x08008530
 8006bf8:	08007e5f 	.word	0x08007e5f

08006bfc <_user_strerror>:
 8006bfc:	2000      	movs	r0, #0
 8006bfe:	4770      	bx	lr

08006c00 <_close_r>:
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	4d06      	ldr	r5, [pc, #24]	; (8006c1c <_close_r+0x1c>)
 8006c04:	2300      	movs	r3, #0
 8006c06:	4604      	mov	r4, r0
 8006c08:	4608      	mov	r0, r1
 8006c0a:	602b      	str	r3, [r5, #0]
 8006c0c:	f7fa ffb9 	bl	8001b82 <_close>
 8006c10:	1c43      	adds	r3, r0, #1
 8006c12:	d102      	bne.n	8006c1a <_close_r+0x1a>
 8006c14:	682b      	ldr	r3, [r5, #0]
 8006c16:	b103      	cbz	r3, 8006c1a <_close_r+0x1a>
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	bd38      	pop	{r3, r4, r5, pc}
 8006c1c:	200002b0 	.word	0x200002b0

08006c20 <_lseek_r>:
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	4d07      	ldr	r5, [pc, #28]	; (8006c40 <_lseek_r+0x20>)
 8006c24:	4604      	mov	r4, r0
 8006c26:	4608      	mov	r0, r1
 8006c28:	4611      	mov	r1, r2
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	602a      	str	r2, [r5, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f7fa ffce 	bl	8001bd0 <_lseek>
 8006c34:	1c43      	adds	r3, r0, #1
 8006c36:	d102      	bne.n	8006c3e <_lseek_r+0x1e>
 8006c38:	682b      	ldr	r3, [r5, #0]
 8006c3a:	b103      	cbz	r3, 8006c3e <_lseek_r+0x1e>
 8006c3c:	6023      	str	r3, [r4, #0]
 8006c3e:	bd38      	pop	{r3, r4, r5, pc}
 8006c40:	200002b0 	.word	0x200002b0

08006c44 <_read_r>:
 8006c44:	b538      	push	{r3, r4, r5, lr}
 8006c46:	4d07      	ldr	r5, [pc, #28]	; (8006c64 <_read_r+0x20>)
 8006c48:	4604      	mov	r4, r0
 8006c4a:	4608      	mov	r0, r1
 8006c4c:	4611      	mov	r1, r2
 8006c4e:	2200      	movs	r2, #0
 8006c50:	602a      	str	r2, [r5, #0]
 8006c52:	461a      	mov	r2, r3
 8006c54:	f7fa ff5c 	bl	8001b10 <_read>
 8006c58:	1c43      	adds	r3, r0, #1
 8006c5a:	d102      	bne.n	8006c62 <_read_r+0x1e>
 8006c5c:	682b      	ldr	r3, [r5, #0]
 8006c5e:	b103      	cbz	r3, 8006c62 <_read_r+0x1e>
 8006c60:	6023      	str	r3, [r4, #0]
 8006c62:	bd38      	pop	{r3, r4, r5, pc}
 8006c64:	200002b0 	.word	0x200002b0

08006c68 <_write_r>:
 8006c68:	b538      	push	{r3, r4, r5, lr}
 8006c6a:	4d07      	ldr	r5, [pc, #28]	; (8006c88 <_write_r+0x20>)
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	4608      	mov	r0, r1
 8006c70:	4611      	mov	r1, r2
 8006c72:	2200      	movs	r2, #0
 8006c74:	602a      	str	r2, [r5, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	f7fa ff67 	bl	8001b4a <_write>
 8006c7c:	1c43      	adds	r3, r0, #1
 8006c7e:	d102      	bne.n	8006c86 <_write_r+0x1e>
 8006c80:	682b      	ldr	r3, [r5, #0]
 8006c82:	b103      	cbz	r3, 8006c86 <_write_r+0x1e>
 8006c84:	6023      	str	r3, [r4, #0]
 8006c86:	bd38      	pop	{r3, r4, r5, pc}
 8006c88:	200002b0 	.word	0x200002b0

08006c8c <__errno>:
 8006c8c:	4b01      	ldr	r3, [pc, #4]	; (8006c94 <__errno+0x8>)
 8006c8e:	6818      	ldr	r0, [r3, #0]
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	20000078 	.word	0x20000078

08006c98 <__libc_init_array>:
 8006c98:	b570      	push	{r4, r5, r6, lr}
 8006c9a:	4d0d      	ldr	r5, [pc, #52]	; (8006cd0 <__libc_init_array+0x38>)
 8006c9c:	4c0d      	ldr	r4, [pc, #52]	; (8006cd4 <__libc_init_array+0x3c>)
 8006c9e:	1b64      	subs	r4, r4, r5
 8006ca0:	10a4      	asrs	r4, r4, #2
 8006ca2:	2600      	movs	r6, #0
 8006ca4:	42a6      	cmp	r6, r4
 8006ca6:	d109      	bne.n	8006cbc <__libc_init_array+0x24>
 8006ca8:	4d0b      	ldr	r5, [pc, #44]	; (8006cd8 <__libc_init_array+0x40>)
 8006caa:	4c0c      	ldr	r4, [pc, #48]	; (8006cdc <__libc_init_array+0x44>)
 8006cac:	f001 f824 	bl	8007cf8 <_init>
 8006cb0:	1b64      	subs	r4, r4, r5
 8006cb2:	10a4      	asrs	r4, r4, #2
 8006cb4:	2600      	movs	r6, #0
 8006cb6:	42a6      	cmp	r6, r4
 8006cb8:	d105      	bne.n	8006cc6 <__libc_init_array+0x2e>
 8006cba:	bd70      	pop	{r4, r5, r6, pc}
 8006cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cc0:	4798      	blx	r3
 8006cc2:	3601      	adds	r6, #1
 8006cc4:	e7ee      	b.n	8006ca4 <__libc_init_array+0xc>
 8006cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cca:	4798      	blx	r3
 8006ccc:	3601      	adds	r6, #1
 8006cce:	e7f2      	b.n	8006cb6 <__libc_init_array+0x1e>
 8006cd0:	0800856c 	.word	0x0800856c
 8006cd4:	0800856c 	.word	0x0800856c
 8006cd8:	0800856c 	.word	0x0800856c
 8006cdc:	08008570 	.word	0x08008570

08006ce0 <__retarget_lock_init_recursive>:
 8006ce0:	4770      	bx	lr

08006ce2 <__retarget_lock_acquire_recursive>:
 8006ce2:	4770      	bx	lr

08006ce4 <__retarget_lock_release_recursive>:
 8006ce4:	4770      	bx	lr
	...

08006ce8 <__assert_func>:
 8006ce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cea:	4614      	mov	r4, r2
 8006cec:	461a      	mov	r2, r3
 8006cee:	4b09      	ldr	r3, [pc, #36]	; (8006d14 <__assert_func+0x2c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4605      	mov	r5, r0
 8006cf4:	68d8      	ldr	r0, [r3, #12]
 8006cf6:	b14c      	cbz	r4, 8006d0c <__assert_func+0x24>
 8006cf8:	4b07      	ldr	r3, [pc, #28]	; (8006d18 <__assert_func+0x30>)
 8006cfa:	9100      	str	r1, [sp, #0]
 8006cfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d00:	4906      	ldr	r1, [pc, #24]	; (8006d1c <__assert_func+0x34>)
 8006d02:	462b      	mov	r3, r5
 8006d04:	f000 fcce 	bl	80076a4 <fiprintf>
 8006d08:	f000 fd16 	bl	8007738 <abort>
 8006d0c:	4b04      	ldr	r3, [pc, #16]	; (8006d20 <__assert_func+0x38>)
 8006d0e:	461c      	mov	r4, r3
 8006d10:	e7f3      	b.n	8006cfa <__assert_func+0x12>
 8006d12:	bf00      	nop
 8006d14:	20000078 	.word	0x20000078
 8006d18:	080084f5 	.word	0x080084f5
 8006d1c:	08008502 	.word	0x08008502
 8006d20:	08008530 	.word	0x08008530

08006d24 <_free_r>:
 8006d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d26:	2900      	cmp	r1, #0
 8006d28:	d044      	beq.n	8006db4 <_free_r+0x90>
 8006d2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d2e:	9001      	str	r0, [sp, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f1a1 0404 	sub.w	r4, r1, #4
 8006d36:	bfb8      	it	lt
 8006d38:	18e4      	addlt	r4, r4, r3
 8006d3a:	f000 f8e7 	bl	8006f0c <__malloc_lock>
 8006d3e:	4a1e      	ldr	r2, [pc, #120]	; (8006db8 <_free_r+0x94>)
 8006d40:	9801      	ldr	r0, [sp, #4]
 8006d42:	6813      	ldr	r3, [r2, #0]
 8006d44:	b933      	cbnz	r3, 8006d54 <_free_r+0x30>
 8006d46:	6063      	str	r3, [r4, #4]
 8006d48:	6014      	str	r4, [r2, #0]
 8006d4a:	b003      	add	sp, #12
 8006d4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d50:	f000 b8e2 	b.w	8006f18 <__malloc_unlock>
 8006d54:	42a3      	cmp	r3, r4
 8006d56:	d908      	bls.n	8006d6a <_free_r+0x46>
 8006d58:	6825      	ldr	r5, [r4, #0]
 8006d5a:	1961      	adds	r1, r4, r5
 8006d5c:	428b      	cmp	r3, r1
 8006d5e:	bf01      	itttt	eq
 8006d60:	6819      	ldreq	r1, [r3, #0]
 8006d62:	685b      	ldreq	r3, [r3, #4]
 8006d64:	1949      	addeq	r1, r1, r5
 8006d66:	6021      	streq	r1, [r4, #0]
 8006d68:	e7ed      	b.n	8006d46 <_free_r+0x22>
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	b10b      	cbz	r3, 8006d74 <_free_r+0x50>
 8006d70:	42a3      	cmp	r3, r4
 8006d72:	d9fa      	bls.n	8006d6a <_free_r+0x46>
 8006d74:	6811      	ldr	r1, [r2, #0]
 8006d76:	1855      	adds	r5, r2, r1
 8006d78:	42a5      	cmp	r5, r4
 8006d7a:	d10b      	bne.n	8006d94 <_free_r+0x70>
 8006d7c:	6824      	ldr	r4, [r4, #0]
 8006d7e:	4421      	add	r1, r4
 8006d80:	1854      	adds	r4, r2, r1
 8006d82:	42a3      	cmp	r3, r4
 8006d84:	6011      	str	r1, [r2, #0]
 8006d86:	d1e0      	bne.n	8006d4a <_free_r+0x26>
 8006d88:	681c      	ldr	r4, [r3, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	6053      	str	r3, [r2, #4]
 8006d8e:	440c      	add	r4, r1
 8006d90:	6014      	str	r4, [r2, #0]
 8006d92:	e7da      	b.n	8006d4a <_free_r+0x26>
 8006d94:	d902      	bls.n	8006d9c <_free_r+0x78>
 8006d96:	230c      	movs	r3, #12
 8006d98:	6003      	str	r3, [r0, #0]
 8006d9a:	e7d6      	b.n	8006d4a <_free_r+0x26>
 8006d9c:	6825      	ldr	r5, [r4, #0]
 8006d9e:	1961      	adds	r1, r4, r5
 8006da0:	428b      	cmp	r3, r1
 8006da2:	bf04      	itt	eq
 8006da4:	6819      	ldreq	r1, [r3, #0]
 8006da6:	685b      	ldreq	r3, [r3, #4]
 8006da8:	6063      	str	r3, [r4, #4]
 8006daa:	bf04      	itt	eq
 8006dac:	1949      	addeq	r1, r1, r5
 8006dae:	6021      	streq	r1, [r4, #0]
 8006db0:	6054      	str	r4, [r2, #4]
 8006db2:	e7ca      	b.n	8006d4a <_free_r+0x26>
 8006db4:	b003      	add	sp, #12
 8006db6:	bd30      	pop	{r4, r5, pc}
 8006db8:	200002b8 	.word	0x200002b8

08006dbc <malloc>:
 8006dbc:	4b02      	ldr	r3, [pc, #8]	; (8006dc8 <malloc+0xc>)
 8006dbe:	4601      	mov	r1, r0
 8006dc0:	6818      	ldr	r0, [r3, #0]
 8006dc2:	f000 b823 	b.w	8006e0c <_malloc_r>
 8006dc6:	bf00      	nop
 8006dc8:	20000078 	.word	0x20000078

08006dcc <sbrk_aligned>:
 8006dcc:	b570      	push	{r4, r5, r6, lr}
 8006dce:	4e0e      	ldr	r6, [pc, #56]	; (8006e08 <sbrk_aligned+0x3c>)
 8006dd0:	460c      	mov	r4, r1
 8006dd2:	6831      	ldr	r1, [r6, #0]
 8006dd4:	4605      	mov	r5, r0
 8006dd6:	b911      	cbnz	r1, 8006dde <sbrk_aligned+0x12>
 8006dd8:	f000 fc90 	bl	80076fc <_sbrk_r>
 8006ddc:	6030      	str	r0, [r6, #0]
 8006dde:	4621      	mov	r1, r4
 8006de0:	4628      	mov	r0, r5
 8006de2:	f000 fc8b 	bl	80076fc <_sbrk_r>
 8006de6:	1c43      	adds	r3, r0, #1
 8006de8:	d00a      	beq.n	8006e00 <sbrk_aligned+0x34>
 8006dea:	1cc4      	adds	r4, r0, #3
 8006dec:	f024 0403 	bic.w	r4, r4, #3
 8006df0:	42a0      	cmp	r0, r4
 8006df2:	d007      	beq.n	8006e04 <sbrk_aligned+0x38>
 8006df4:	1a21      	subs	r1, r4, r0
 8006df6:	4628      	mov	r0, r5
 8006df8:	f000 fc80 	bl	80076fc <_sbrk_r>
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	d101      	bne.n	8006e04 <sbrk_aligned+0x38>
 8006e00:	f04f 34ff 	mov.w	r4, #4294967295
 8006e04:	4620      	mov	r0, r4
 8006e06:	bd70      	pop	{r4, r5, r6, pc}
 8006e08:	200002bc 	.word	0x200002bc

08006e0c <_malloc_r>:
 8006e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e10:	1ccd      	adds	r5, r1, #3
 8006e12:	f025 0503 	bic.w	r5, r5, #3
 8006e16:	3508      	adds	r5, #8
 8006e18:	2d0c      	cmp	r5, #12
 8006e1a:	bf38      	it	cc
 8006e1c:	250c      	movcc	r5, #12
 8006e1e:	2d00      	cmp	r5, #0
 8006e20:	4607      	mov	r7, r0
 8006e22:	db01      	blt.n	8006e28 <_malloc_r+0x1c>
 8006e24:	42a9      	cmp	r1, r5
 8006e26:	d905      	bls.n	8006e34 <_malloc_r+0x28>
 8006e28:	230c      	movs	r3, #12
 8006e2a:	603b      	str	r3, [r7, #0]
 8006e2c:	2600      	movs	r6, #0
 8006e2e:	4630      	mov	r0, r6
 8006e30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006f08 <_malloc_r+0xfc>
 8006e38:	f000 f868 	bl	8006f0c <__malloc_lock>
 8006e3c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e40:	461c      	mov	r4, r3
 8006e42:	bb5c      	cbnz	r4, 8006e9c <_malloc_r+0x90>
 8006e44:	4629      	mov	r1, r5
 8006e46:	4638      	mov	r0, r7
 8006e48:	f7ff ffc0 	bl	8006dcc <sbrk_aligned>
 8006e4c:	1c43      	adds	r3, r0, #1
 8006e4e:	4604      	mov	r4, r0
 8006e50:	d155      	bne.n	8006efe <_malloc_r+0xf2>
 8006e52:	f8d8 4000 	ldr.w	r4, [r8]
 8006e56:	4626      	mov	r6, r4
 8006e58:	2e00      	cmp	r6, #0
 8006e5a:	d145      	bne.n	8006ee8 <_malloc_r+0xdc>
 8006e5c:	2c00      	cmp	r4, #0
 8006e5e:	d048      	beq.n	8006ef2 <_malloc_r+0xe6>
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	4631      	mov	r1, r6
 8006e64:	4638      	mov	r0, r7
 8006e66:	eb04 0903 	add.w	r9, r4, r3
 8006e6a:	f000 fc47 	bl	80076fc <_sbrk_r>
 8006e6e:	4581      	cmp	r9, r0
 8006e70:	d13f      	bne.n	8006ef2 <_malloc_r+0xe6>
 8006e72:	6821      	ldr	r1, [r4, #0]
 8006e74:	1a6d      	subs	r5, r5, r1
 8006e76:	4629      	mov	r1, r5
 8006e78:	4638      	mov	r0, r7
 8006e7a:	f7ff ffa7 	bl	8006dcc <sbrk_aligned>
 8006e7e:	3001      	adds	r0, #1
 8006e80:	d037      	beq.n	8006ef2 <_malloc_r+0xe6>
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	442b      	add	r3, r5
 8006e86:	6023      	str	r3, [r4, #0]
 8006e88:	f8d8 3000 	ldr.w	r3, [r8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d038      	beq.n	8006f02 <_malloc_r+0xf6>
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	42a2      	cmp	r2, r4
 8006e94:	d12b      	bne.n	8006eee <_malloc_r+0xe2>
 8006e96:	2200      	movs	r2, #0
 8006e98:	605a      	str	r2, [r3, #4]
 8006e9a:	e00f      	b.n	8006ebc <_malloc_r+0xb0>
 8006e9c:	6822      	ldr	r2, [r4, #0]
 8006e9e:	1b52      	subs	r2, r2, r5
 8006ea0:	d41f      	bmi.n	8006ee2 <_malloc_r+0xd6>
 8006ea2:	2a0b      	cmp	r2, #11
 8006ea4:	d917      	bls.n	8006ed6 <_malloc_r+0xca>
 8006ea6:	1961      	adds	r1, r4, r5
 8006ea8:	42a3      	cmp	r3, r4
 8006eaa:	6025      	str	r5, [r4, #0]
 8006eac:	bf18      	it	ne
 8006eae:	6059      	strne	r1, [r3, #4]
 8006eb0:	6863      	ldr	r3, [r4, #4]
 8006eb2:	bf08      	it	eq
 8006eb4:	f8c8 1000 	streq.w	r1, [r8]
 8006eb8:	5162      	str	r2, [r4, r5]
 8006eba:	604b      	str	r3, [r1, #4]
 8006ebc:	4638      	mov	r0, r7
 8006ebe:	f104 060b 	add.w	r6, r4, #11
 8006ec2:	f000 f829 	bl	8006f18 <__malloc_unlock>
 8006ec6:	f026 0607 	bic.w	r6, r6, #7
 8006eca:	1d23      	adds	r3, r4, #4
 8006ecc:	1af2      	subs	r2, r6, r3
 8006ece:	d0ae      	beq.n	8006e2e <_malloc_r+0x22>
 8006ed0:	1b9b      	subs	r3, r3, r6
 8006ed2:	50a3      	str	r3, [r4, r2]
 8006ed4:	e7ab      	b.n	8006e2e <_malloc_r+0x22>
 8006ed6:	42a3      	cmp	r3, r4
 8006ed8:	6862      	ldr	r2, [r4, #4]
 8006eda:	d1dd      	bne.n	8006e98 <_malloc_r+0x8c>
 8006edc:	f8c8 2000 	str.w	r2, [r8]
 8006ee0:	e7ec      	b.n	8006ebc <_malloc_r+0xb0>
 8006ee2:	4623      	mov	r3, r4
 8006ee4:	6864      	ldr	r4, [r4, #4]
 8006ee6:	e7ac      	b.n	8006e42 <_malloc_r+0x36>
 8006ee8:	4634      	mov	r4, r6
 8006eea:	6876      	ldr	r6, [r6, #4]
 8006eec:	e7b4      	b.n	8006e58 <_malloc_r+0x4c>
 8006eee:	4613      	mov	r3, r2
 8006ef0:	e7cc      	b.n	8006e8c <_malloc_r+0x80>
 8006ef2:	230c      	movs	r3, #12
 8006ef4:	603b      	str	r3, [r7, #0]
 8006ef6:	4638      	mov	r0, r7
 8006ef8:	f000 f80e 	bl	8006f18 <__malloc_unlock>
 8006efc:	e797      	b.n	8006e2e <_malloc_r+0x22>
 8006efe:	6025      	str	r5, [r4, #0]
 8006f00:	e7dc      	b.n	8006ebc <_malloc_r+0xb0>
 8006f02:	605b      	str	r3, [r3, #4]
 8006f04:	deff      	udf	#255	; 0xff
 8006f06:	bf00      	nop
 8006f08:	200002b8 	.word	0x200002b8

08006f0c <__malloc_lock>:
 8006f0c:	4801      	ldr	r0, [pc, #4]	; (8006f14 <__malloc_lock+0x8>)
 8006f0e:	f7ff bee8 	b.w	8006ce2 <__retarget_lock_acquire_recursive>
 8006f12:	bf00      	nop
 8006f14:	200002b4 	.word	0x200002b4

08006f18 <__malloc_unlock>:
 8006f18:	4801      	ldr	r0, [pc, #4]	; (8006f20 <__malloc_unlock+0x8>)
 8006f1a:	f7ff bee3 	b.w	8006ce4 <__retarget_lock_release_recursive>
 8006f1e:	bf00      	nop
 8006f20:	200002b4 	.word	0x200002b4

08006f24 <__ssputs_r>:
 8006f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f28:	688e      	ldr	r6, [r1, #8]
 8006f2a:	461f      	mov	r7, r3
 8006f2c:	42be      	cmp	r6, r7
 8006f2e:	680b      	ldr	r3, [r1, #0]
 8006f30:	4682      	mov	sl, r0
 8006f32:	460c      	mov	r4, r1
 8006f34:	4690      	mov	r8, r2
 8006f36:	d82c      	bhi.n	8006f92 <__ssputs_r+0x6e>
 8006f38:	898a      	ldrh	r2, [r1, #12]
 8006f3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f3e:	d026      	beq.n	8006f8e <__ssputs_r+0x6a>
 8006f40:	6965      	ldr	r5, [r4, #20]
 8006f42:	6909      	ldr	r1, [r1, #16]
 8006f44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f48:	eba3 0901 	sub.w	r9, r3, r1
 8006f4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f50:	1c7b      	adds	r3, r7, #1
 8006f52:	444b      	add	r3, r9
 8006f54:	106d      	asrs	r5, r5, #1
 8006f56:	429d      	cmp	r5, r3
 8006f58:	bf38      	it	cc
 8006f5a:	461d      	movcc	r5, r3
 8006f5c:	0553      	lsls	r3, r2, #21
 8006f5e:	d527      	bpl.n	8006fb0 <__ssputs_r+0x8c>
 8006f60:	4629      	mov	r1, r5
 8006f62:	f7ff ff53 	bl	8006e0c <_malloc_r>
 8006f66:	4606      	mov	r6, r0
 8006f68:	b360      	cbz	r0, 8006fc4 <__ssputs_r+0xa0>
 8006f6a:	6921      	ldr	r1, [r4, #16]
 8006f6c:	464a      	mov	r2, r9
 8006f6e:	f000 fbd5 	bl	800771c <memcpy>
 8006f72:	89a3      	ldrh	r3, [r4, #12]
 8006f74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f7c:	81a3      	strh	r3, [r4, #12]
 8006f7e:	6126      	str	r6, [r4, #16]
 8006f80:	6165      	str	r5, [r4, #20]
 8006f82:	444e      	add	r6, r9
 8006f84:	eba5 0509 	sub.w	r5, r5, r9
 8006f88:	6026      	str	r6, [r4, #0]
 8006f8a:	60a5      	str	r5, [r4, #8]
 8006f8c:	463e      	mov	r6, r7
 8006f8e:	42be      	cmp	r6, r7
 8006f90:	d900      	bls.n	8006f94 <__ssputs_r+0x70>
 8006f92:	463e      	mov	r6, r7
 8006f94:	6820      	ldr	r0, [r4, #0]
 8006f96:	4632      	mov	r2, r6
 8006f98:	4641      	mov	r1, r8
 8006f9a:	f000 fb95 	bl	80076c8 <memmove>
 8006f9e:	68a3      	ldr	r3, [r4, #8]
 8006fa0:	1b9b      	subs	r3, r3, r6
 8006fa2:	60a3      	str	r3, [r4, #8]
 8006fa4:	6823      	ldr	r3, [r4, #0]
 8006fa6:	4433      	add	r3, r6
 8006fa8:	6023      	str	r3, [r4, #0]
 8006faa:	2000      	movs	r0, #0
 8006fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fb0:	462a      	mov	r2, r5
 8006fb2:	f000 fbc8 	bl	8007746 <_realloc_r>
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	d1e0      	bne.n	8006f7e <__ssputs_r+0x5a>
 8006fbc:	6921      	ldr	r1, [r4, #16]
 8006fbe:	4650      	mov	r0, sl
 8006fc0:	f7ff feb0 	bl	8006d24 <_free_r>
 8006fc4:	230c      	movs	r3, #12
 8006fc6:	f8ca 3000 	str.w	r3, [sl]
 8006fca:	89a3      	ldrh	r3, [r4, #12]
 8006fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fd0:	81a3      	strh	r3, [r4, #12]
 8006fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd6:	e7e9      	b.n	8006fac <__ssputs_r+0x88>

08006fd8 <_svfiprintf_r>:
 8006fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fdc:	4698      	mov	r8, r3
 8006fde:	898b      	ldrh	r3, [r1, #12]
 8006fe0:	061b      	lsls	r3, r3, #24
 8006fe2:	b09d      	sub	sp, #116	; 0x74
 8006fe4:	4607      	mov	r7, r0
 8006fe6:	460d      	mov	r5, r1
 8006fe8:	4614      	mov	r4, r2
 8006fea:	d50e      	bpl.n	800700a <_svfiprintf_r+0x32>
 8006fec:	690b      	ldr	r3, [r1, #16]
 8006fee:	b963      	cbnz	r3, 800700a <_svfiprintf_r+0x32>
 8006ff0:	2140      	movs	r1, #64	; 0x40
 8006ff2:	f7ff ff0b 	bl	8006e0c <_malloc_r>
 8006ff6:	6028      	str	r0, [r5, #0]
 8006ff8:	6128      	str	r0, [r5, #16]
 8006ffa:	b920      	cbnz	r0, 8007006 <_svfiprintf_r+0x2e>
 8006ffc:	230c      	movs	r3, #12
 8006ffe:	603b      	str	r3, [r7, #0]
 8007000:	f04f 30ff 	mov.w	r0, #4294967295
 8007004:	e0d0      	b.n	80071a8 <_svfiprintf_r+0x1d0>
 8007006:	2340      	movs	r3, #64	; 0x40
 8007008:	616b      	str	r3, [r5, #20]
 800700a:	2300      	movs	r3, #0
 800700c:	9309      	str	r3, [sp, #36]	; 0x24
 800700e:	2320      	movs	r3, #32
 8007010:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007014:	f8cd 800c 	str.w	r8, [sp, #12]
 8007018:	2330      	movs	r3, #48	; 0x30
 800701a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80071c0 <_svfiprintf_r+0x1e8>
 800701e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007022:	f04f 0901 	mov.w	r9, #1
 8007026:	4623      	mov	r3, r4
 8007028:	469a      	mov	sl, r3
 800702a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800702e:	b10a      	cbz	r2, 8007034 <_svfiprintf_r+0x5c>
 8007030:	2a25      	cmp	r2, #37	; 0x25
 8007032:	d1f9      	bne.n	8007028 <_svfiprintf_r+0x50>
 8007034:	ebba 0b04 	subs.w	fp, sl, r4
 8007038:	d00b      	beq.n	8007052 <_svfiprintf_r+0x7a>
 800703a:	465b      	mov	r3, fp
 800703c:	4622      	mov	r2, r4
 800703e:	4629      	mov	r1, r5
 8007040:	4638      	mov	r0, r7
 8007042:	f7ff ff6f 	bl	8006f24 <__ssputs_r>
 8007046:	3001      	adds	r0, #1
 8007048:	f000 80a9 	beq.w	800719e <_svfiprintf_r+0x1c6>
 800704c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800704e:	445a      	add	r2, fp
 8007050:	9209      	str	r2, [sp, #36]	; 0x24
 8007052:	f89a 3000 	ldrb.w	r3, [sl]
 8007056:	2b00      	cmp	r3, #0
 8007058:	f000 80a1 	beq.w	800719e <_svfiprintf_r+0x1c6>
 800705c:	2300      	movs	r3, #0
 800705e:	f04f 32ff 	mov.w	r2, #4294967295
 8007062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007066:	f10a 0a01 	add.w	sl, sl, #1
 800706a:	9304      	str	r3, [sp, #16]
 800706c:	9307      	str	r3, [sp, #28]
 800706e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007072:	931a      	str	r3, [sp, #104]	; 0x68
 8007074:	4654      	mov	r4, sl
 8007076:	2205      	movs	r2, #5
 8007078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800707c:	4850      	ldr	r0, [pc, #320]	; (80071c0 <_svfiprintf_r+0x1e8>)
 800707e:	f7f9 f8af 	bl	80001e0 <memchr>
 8007082:	9a04      	ldr	r2, [sp, #16]
 8007084:	b9d8      	cbnz	r0, 80070be <_svfiprintf_r+0xe6>
 8007086:	06d0      	lsls	r0, r2, #27
 8007088:	bf44      	itt	mi
 800708a:	2320      	movmi	r3, #32
 800708c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007090:	0711      	lsls	r1, r2, #28
 8007092:	bf44      	itt	mi
 8007094:	232b      	movmi	r3, #43	; 0x2b
 8007096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800709a:	f89a 3000 	ldrb.w	r3, [sl]
 800709e:	2b2a      	cmp	r3, #42	; 0x2a
 80070a0:	d015      	beq.n	80070ce <_svfiprintf_r+0xf6>
 80070a2:	9a07      	ldr	r2, [sp, #28]
 80070a4:	4654      	mov	r4, sl
 80070a6:	2000      	movs	r0, #0
 80070a8:	f04f 0c0a 	mov.w	ip, #10
 80070ac:	4621      	mov	r1, r4
 80070ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070b2:	3b30      	subs	r3, #48	; 0x30
 80070b4:	2b09      	cmp	r3, #9
 80070b6:	d94d      	bls.n	8007154 <_svfiprintf_r+0x17c>
 80070b8:	b1b0      	cbz	r0, 80070e8 <_svfiprintf_r+0x110>
 80070ba:	9207      	str	r2, [sp, #28]
 80070bc:	e014      	b.n	80070e8 <_svfiprintf_r+0x110>
 80070be:	eba0 0308 	sub.w	r3, r0, r8
 80070c2:	fa09 f303 	lsl.w	r3, r9, r3
 80070c6:	4313      	orrs	r3, r2
 80070c8:	9304      	str	r3, [sp, #16]
 80070ca:	46a2      	mov	sl, r4
 80070cc:	e7d2      	b.n	8007074 <_svfiprintf_r+0x9c>
 80070ce:	9b03      	ldr	r3, [sp, #12]
 80070d0:	1d19      	adds	r1, r3, #4
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	9103      	str	r1, [sp, #12]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	bfbb      	ittet	lt
 80070da:	425b      	neglt	r3, r3
 80070dc:	f042 0202 	orrlt.w	r2, r2, #2
 80070e0:	9307      	strge	r3, [sp, #28]
 80070e2:	9307      	strlt	r3, [sp, #28]
 80070e4:	bfb8      	it	lt
 80070e6:	9204      	strlt	r2, [sp, #16]
 80070e8:	7823      	ldrb	r3, [r4, #0]
 80070ea:	2b2e      	cmp	r3, #46	; 0x2e
 80070ec:	d10c      	bne.n	8007108 <_svfiprintf_r+0x130>
 80070ee:	7863      	ldrb	r3, [r4, #1]
 80070f0:	2b2a      	cmp	r3, #42	; 0x2a
 80070f2:	d134      	bne.n	800715e <_svfiprintf_r+0x186>
 80070f4:	9b03      	ldr	r3, [sp, #12]
 80070f6:	1d1a      	adds	r2, r3, #4
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	9203      	str	r2, [sp, #12]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	bfb8      	it	lt
 8007100:	f04f 33ff 	movlt.w	r3, #4294967295
 8007104:	3402      	adds	r4, #2
 8007106:	9305      	str	r3, [sp, #20]
 8007108:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80071d0 <_svfiprintf_r+0x1f8>
 800710c:	7821      	ldrb	r1, [r4, #0]
 800710e:	2203      	movs	r2, #3
 8007110:	4650      	mov	r0, sl
 8007112:	f7f9 f865 	bl	80001e0 <memchr>
 8007116:	b138      	cbz	r0, 8007128 <_svfiprintf_r+0x150>
 8007118:	9b04      	ldr	r3, [sp, #16]
 800711a:	eba0 000a 	sub.w	r0, r0, sl
 800711e:	2240      	movs	r2, #64	; 0x40
 8007120:	4082      	lsls	r2, r0
 8007122:	4313      	orrs	r3, r2
 8007124:	3401      	adds	r4, #1
 8007126:	9304      	str	r3, [sp, #16]
 8007128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800712c:	4825      	ldr	r0, [pc, #148]	; (80071c4 <_svfiprintf_r+0x1ec>)
 800712e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007132:	2206      	movs	r2, #6
 8007134:	f7f9 f854 	bl	80001e0 <memchr>
 8007138:	2800      	cmp	r0, #0
 800713a:	d038      	beq.n	80071ae <_svfiprintf_r+0x1d6>
 800713c:	4b22      	ldr	r3, [pc, #136]	; (80071c8 <_svfiprintf_r+0x1f0>)
 800713e:	bb1b      	cbnz	r3, 8007188 <_svfiprintf_r+0x1b0>
 8007140:	9b03      	ldr	r3, [sp, #12]
 8007142:	3307      	adds	r3, #7
 8007144:	f023 0307 	bic.w	r3, r3, #7
 8007148:	3308      	adds	r3, #8
 800714a:	9303      	str	r3, [sp, #12]
 800714c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800714e:	4433      	add	r3, r6
 8007150:	9309      	str	r3, [sp, #36]	; 0x24
 8007152:	e768      	b.n	8007026 <_svfiprintf_r+0x4e>
 8007154:	fb0c 3202 	mla	r2, ip, r2, r3
 8007158:	460c      	mov	r4, r1
 800715a:	2001      	movs	r0, #1
 800715c:	e7a6      	b.n	80070ac <_svfiprintf_r+0xd4>
 800715e:	2300      	movs	r3, #0
 8007160:	3401      	adds	r4, #1
 8007162:	9305      	str	r3, [sp, #20]
 8007164:	4619      	mov	r1, r3
 8007166:	f04f 0c0a 	mov.w	ip, #10
 800716a:	4620      	mov	r0, r4
 800716c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007170:	3a30      	subs	r2, #48	; 0x30
 8007172:	2a09      	cmp	r2, #9
 8007174:	d903      	bls.n	800717e <_svfiprintf_r+0x1a6>
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0c6      	beq.n	8007108 <_svfiprintf_r+0x130>
 800717a:	9105      	str	r1, [sp, #20]
 800717c:	e7c4      	b.n	8007108 <_svfiprintf_r+0x130>
 800717e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007182:	4604      	mov	r4, r0
 8007184:	2301      	movs	r3, #1
 8007186:	e7f0      	b.n	800716a <_svfiprintf_r+0x192>
 8007188:	ab03      	add	r3, sp, #12
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	462a      	mov	r2, r5
 800718e:	4b0f      	ldr	r3, [pc, #60]	; (80071cc <_svfiprintf_r+0x1f4>)
 8007190:	a904      	add	r1, sp, #16
 8007192:	4638      	mov	r0, r7
 8007194:	f3af 8000 	nop.w
 8007198:	1c42      	adds	r2, r0, #1
 800719a:	4606      	mov	r6, r0
 800719c:	d1d6      	bne.n	800714c <_svfiprintf_r+0x174>
 800719e:	89ab      	ldrh	r3, [r5, #12]
 80071a0:	065b      	lsls	r3, r3, #25
 80071a2:	f53f af2d 	bmi.w	8007000 <_svfiprintf_r+0x28>
 80071a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071a8:	b01d      	add	sp, #116	; 0x74
 80071aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ae:	ab03      	add	r3, sp, #12
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	462a      	mov	r2, r5
 80071b4:	4b05      	ldr	r3, [pc, #20]	; (80071cc <_svfiprintf_r+0x1f4>)
 80071b6:	a904      	add	r1, sp, #16
 80071b8:	4638      	mov	r0, r7
 80071ba:	f000 f879 	bl	80072b0 <_printf_i>
 80071be:	e7eb      	b.n	8007198 <_svfiprintf_r+0x1c0>
 80071c0:	08008531 	.word	0x08008531
 80071c4:	0800853b 	.word	0x0800853b
 80071c8:	00000000 	.word	0x00000000
 80071cc:	08006f25 	.word	0x08006f25
 80071d0:	08008537 	.word	0x08008537

080071d4 <_printf_common>:
 80071d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071d8:	4616      	mov	r6, r2
 80071da:	4699      	mov	r9, r3
 80071dc:	688a      	ldr	r2, [r1, #8]
 80071de:	690b      	ldr	r3, [r1, #16]
 80071e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071e4:	4293      	cmp	r3, r2
 80071e6:	bfb8      	it	lt
 80071e8:	4613      	movlt	r3, r2
 80071ea:	6033      	str	r3, [r6, #0]
 80071ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071f0:	4607      	mov	r7, r0
 80071f2:	460c      	mov	r4, r1
 80071f4:	b10a      	cbz	r2, 80071fa <_printf_common+0x26>
 80071f6:	3301      	adds	r3, #1
 80071f8:	6033      	str	r3, [r6, #0]
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	0699      	lsls	r1, r3, #26
 80071fe:	bf42      	ittt	mi
 8007200:	6833      	ldrmi	r3, [r6, #0]
 8007202:	3302      	addmi	r3, #2
 8007204:	6033      	strmi	r3, [r6, #0]
 8007206:	6825      	ldr	r5, [r4, #0]
 8007208:	f015 0506 	ands.w	r5, r5, #6
 800720c:	d106      	bne.n	800721c <_printf_common+0x48>
 800720e:	f104 0a19 	add.w	sl, r4, #25
 8007212:	68e3      	ldr	r3, [r4, #12]
 8007214:	6832      	ldr	r2, [r6, #0]
 8007216:	1a9b      	subs	r3, r3, r2
 8007218:	42ab      	cmp	r3, r5
 800721a:	dc26      	bgt.n	800726a <_printf_common+0x96>
 800721c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007220:	1e13      	subs	r3, r2, #0
 8007222:	6822      	ldr	r2, [r4, #0]
 8007224:	bf18      	it	ne
 8007226:	2301      	movne	r3, #1
 8007228:	0692      	lsls	r2, r2, #26
 800722a:	d42b      	bmi.n	8007284 <_printf_common+0xb0>
 800722c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007230:	4649      	mov	r1, r9
 8007232:	4638      	mov	r0, r7
 8007234:	47c0      	blx	r8
 8007236:	3001      	adds	r0, #1
 8007238:	d01e      	beq.n	8007278 <_printf_common+0xa4>
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	6922      	ldr	r2, [r4, #16]
 800723e:	f003 0306 	and.w	r3, r3, #6
 8007242:	2b04      	cmp	r3, #4
 8007244:	bf02      	ittt	eq
 8007246:	68e5      	ldreq	r5, [r4, #12]
 8007248:	6833      	ldreq	r3, [r6, #0]
 800724a:	1aed      	subeq	r5, r5, r3
 800724c:	68a3      	ldr	r3, [r4, #8]
 800724e:	bf0c      	ite	eq
 8007250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007254:	2500      	movne	r5, #0
 8007256:	4293      	cmp	r3, r2
 8007258:	bfc4      	itt	gt
 800725a:	1a9b      	subgt	r3, r3, r2
 800725c:	18ed      	addgt	r5, r5, r3
 800725e:	2600      	movs	r6, #0
 8007260:	341a      	adds	r4, #26
 8007262:	42b5      	cmp	r5, r6
 8007264:	d11a      	bne.n	800729c <_printf_common+0xc8>
 8007266:	2000      	movs	r0, #0
 8007268:	e008      	b.n	800727c <_printf_common+0xa8>
 800726a:	2301      	movs	r3, #1
 800726c:	4652      	mov	r2, sl
 800726e:	4649      	mov	r1, r9
 8007270:	4638      	mov	r0, r7
 8007272:	47c0      	blx	r8
 8007274:	3001      	adds	r0, #1
 8007276:	d103      	bne.n	8007280 <_printf_common+0xac>
 8007278:	f04f 30ff 	mov.w	r0, #4294967295
 800727c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007280:	3501      	adds	r5, #1
 8007282:	e7c6      	b.n	8007212 <_printf_common+0x3e>
 8007284:	18e1      	adds	r1, r4, r3
 8007286:	1c5a      	adds	r2, r3, #1
 8007288:	2030      	movs	r0, #48	; 0x30
 800728a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800728e:	4422      	add	r2, r4
 8007290:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007294:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007298:	3302      	adds	r3, #2
 800729a:	e7c7      	b.n	800722c <_printf_common+0x58>
 800729c:	2301      	movs	r3, #1
 800729e:	4622      	mov	r2, r4
 80072a0:	4649      	mov	r1, r9
 80072a2:	4638      	mov	r0, r7
 80072a4:	47c0      	blx	r8
 80072a6:	3001      	adds	r0, #1
 80072a8:	d0e6      	beq.n	8007278 <_printf_common+0xa4>
 80072aa:	3601      	adds	r6, #1
 80072ac:	e7d9      	b.n	8007262 <_printf_common+0x8e>
	...

080072b0 <_printf_i>:
 80072b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072b4:	7e0f      	ldrb	r7, [r1, #24]
 80072b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072b8:	2f78      	cmp	r7, #120	; 0x78
 80072ba:	4691      	mov	r9, r2
 80072bc:	4680      	mov	r8, r0
 80072be:	460c      	mov	r4, r1
 80072c0:	469a      	mov	sl, r3
 80072c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072c6:	d807      	bhi.n	80072d8 <_printf_i+0x28>
 80072c8:	2f62      	cmp	r7, #98	; 0x62
 80072ca:	d80a      	bhi.n	80072e2 <_printf_i+0x32>
 80072cc:	2f00      	cmp	r7, #0
 80072ce:	f000 80d4 	beq.w	800747a <_printf_i+0x1ca>
 80072d2:	2f58      	cmp	r7, #88	; 0x58
 80072d4:	f000 80c0 	beq.w	8007458 <_printf_i+0x1a8>
 80072d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072e0:	e03a      	b.n	8007358 <_printf_i+0xa8>
 80072e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072e6:	2b15      	cmp	r3, #21
 80072e8:	d8f6      	bhi.n	80072d8 <_printf_i+0x28>
 80072ea:	a101      	add	r1, pc, #4	; (adr r1, 80072f0 <_printf_i+0x40>)
 80072ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072f0:	08007349 	.word	0x08007349
 80072f4:	0800735d 	.word	0x0800735d
 80072f8:	080072d9 	.word	0x080072d9
 80072fc:	080072d9 	.word	0x080072d9
 8007300:	080072d9 	.word	0x080072d9
 8007304:	080072d9 	.word	0x080072d9
 8007308:	0800735d 	.word	0x0800735d
 800730c:	080072d9 	.word	0x080072d9
 8007310:	080072d9 	.word	0x080072d9
 8007314:	080072d9 	.word	0x080072d9
 8007318:	080072d9 	.word	0x080072d9
 800731c:	08007461 	.word	0x08007461
 8007320:	08007389 	.word	0x08007389
 8007324:	0800741b 	.word	0x0800741b
 8007328:	080072d9 	.word	0x080072d9
 800732c:	080072d9 	.word	0x080072d9
 8007330:	08007483 	.word	0x08007483
 8007334:	080072d9 	.word	0x080072d9
 8007338:	08007389 	.word	0x08007389
 800733c:	080072d9 	.word	0x080072d9
 8007340:	080072d9 	.word	0x080072d9
 8007344:	08007423 	.word	0x08007423
 8007348:	682b      	ldr	r3, [r5, #0]
 800734a:	1d1a      	adds	r2, r3, #4
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	602a      	str	r2, [r5, #0]
 8007350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007354:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007358:	2301      	movs	r3, #1
 800735a:	e09f      	b.n	800749c <_printf_i+0x1ec>
 800735c:	6820      	ldr	r0, [r4, #0]
 800735e:	682b      	ldr	r3, [r5, #0]
 8007360:	0607      	lsls	r7, r0, #24
 8007362:	f103 0104 	add.w	r1, r3, #4
 8007366:	6029      	str	r1, [r5, #0]
 8007368:	d501      	bpl.n	800736e <_printf_i+0xbe>
 800736a:	681e      	ldr	r6, [r3, #0]
 800736c:	e003      	b.n	8007376 <_printf_i+0xc6>
 800736e:	0646      	lsls	r6, r0, #25
 8007370:	d5fb      	bpl.n	800736a <_printf_i+0xba>
 8007372:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007376:	2e00      	cmp	r6, #0
 8007378:	da03      	bge.n	8007382 <_printf_i+0xd2>
 800737a:	232d      	movs	r3, #45	; 0x2d
 800737c:	4276      	negs	r6, r6
 800737e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007382:	485a      	ldr	r0, [pc, #360]	; (80074ec <_printf_i+0x23c>)
 8007384:	230a      	movs	r3, #10
 8007386:	e012      	b.n	80073ae <_printf_i+0xfe>
 8007388:	682b      	ldr	r3, [r5, #0]
 800738a:	6820      	ldr	r0, [r4, #0]
 800738c:	1d19      	adds	r1, r3, #4
 800738e:	6029      	str	r1, [r5, #0]
 8007390:	0605      	lsls	r5, r0, #24
 8007392:	d501      	bpl.n	8007398 <_printf_i+0xe8>
 8007394:	681e      	ldr	r6, [r3, #0]
 8007396:	e002      	b.n	800739e <_printf_i+0xee>
 8007398:	0641      	lsls	r1, r0, #25
 800739a:	d5fb      	bpl.n	8007394 <_printf_i+0xe4>
 800739c:	881e      	ldrh	r6, [r3, #0]
 800739e:	4853      	ldr	r0, [pc, #332]	; (80074ec <_printf_i+0x23c>)
 80073a0:	2f6f      	cmp	r7, #111	; 0x6f
 80073a2:	bf0c      	ite	eq
 80073a4:	2308      	moveq	r3, #8
 80073a6:	230a      	movne	r3, #10
 80073a8:	2100      	movs	r1, #0
 80073aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073ae:	6865      	ldr	r5, [r4, #4]
 80073b0:	60a5      	str	r5, [r4, #8]
 80073b2:	2d00      	cmp	r5, #0
 80073b4:	bfa2      	ittt	ge
 80073b6:	6821      	ldrge	r1, [r4, #0]
 80073b8:	f021 0104 	bicge.w	r1, r1, #4
 80073bc:	6021      	strge	r1, [r4, #0]
 80073be:	b90e      	cbnz	r6, 80073c4 <_printf_i+0x114>
 80073c0:	2d00      	cmp	r5, #0
 80073c2:	d04b      	beq.n	800745c <_printf_i+0x1ac>
 80073c4:	4615      	mov	r5, r2
 80073c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80073ca:	fb03 6711 	mls	r7, r3, r1, r6
 80073ce:	5dc7      	ldrb	r7, [r0, r7]
 80073d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073d4:	4637      	mov	r7, r6
 80073d6:	42bb      	cmp	r3, r7
 80073d8:	460e      	mov	r6, r1
 80073da:	d9f4      	bls.n	80073c6 <_printf_i+0x116>
 80073dc:	2b08      	cmp	r3, #8
 80073de:	d10b      	bne.n	80073f8 <_printf_i+0x148>
 80073e0:	6823      	ldr	r3, [r4, #0]
 80073e2:	07de      	lsls	r6, r3, #31
 80073e4:	d508      	bpl.n	80073f8 <_printf_i+0x148>
 80073e6:	6923      	ldr	r3, [r4, #16]
 80073e8:	6861      	ldr	r1, [r4, #4]
 80073ea:	4299      	cmp	r1, r3
 80073ec:	bfde      	ittt	le
 80073ee:	2330      	movle	r3, #48	; 0x30
 80073f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80073f8:	1b52      	subs	r2, r2, r5
 80073fa:	6122      	str	r2, [r4, #16]
 80073fc:	f8cd a000 	str.w	sl, [sp]
 8007400:	464b      	mov	r3, r9
 8007402:	aa03      	add	r2, sp, #12
 8007404:	4621      	mov	r1, r4
 8007406:	4640      	mov	r0, r8
 8007408:	f7ff fee4 	bl	80071d4 <_printf_common>
 800740c:	3001      	adds	r0, #1
 800740e:	d14a      	bne.n	80074a6 <_printf_i+0x1f6>
 8007410:	f04f 30ff 	mov.w	r0, #4294967295
 8007414:	b004      	add	sp, #16
 8007416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	f043 0320 	orr.w	r3, r3, #32
 8007420:	6023      	str	r3, [r4, #0]
 8007422:	4833      	ldr	r0, [pc, #204]	; (80074f0 <_printf_i+0x240>)
 8007424:	2778      	movs	r7, #120	; 0x78
 8007426:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	6829      	ldr	r1, [r5, #0]
 800742e:	061f      	lsls	r7, r3, #24
 8007430:	f851 6b04 	ldr.w	r6, [r1], #4
 8007434:	d402      	bmi.n	800743c <_printf_i+0x18c>
 8007436:	065f      	lsls	r7, r3, #25
 8007438:	bf48      	it	mi
 800743a:	b2b6      	uxthmi	r6, r6
 800743c:	07df      	lsls	r7, r3, #31
 800743e:	bf48      	it	mi
 8007440:	f043 0320 	orrmi.w	r3, r3, #32
 8007444:	6029      	str	r1, [r5, #0]
 8007446:	bf48      	it	mi
 8007448:	6023      	strmi	r3, [r4, #0]
 800744a:	b91e      	cbnz	r6, 8007454 <_printf_i+0x1a4>
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	f023 0320 	bic.w	r3, r3, #32
 8007452:	6023      	str	r3, [r4, #0]
 8007454:	2310      	movs	r3, #16
 8007456:	e7a7      	b.n	80073a8 <_printf_i+0xf8>
 8007458:	4824      	ldr	r0, [pc, #144]	; (80074ec <_printf_i+0x23c>)
 800745a:	e7e4      	b.n	8007426 <_printf_i+0x176>
 800745c:	4615      	mov	r5, r2
 800745e:	e7bd      	b.n	80073dc <_printf_i+0x12c>
 8007460:	682b      	ldr	r3, [r5, #0]
 8007462:	6826      	ldr	r6, [r4, #0]
 8007464:	6961      	ldr	r1, [r4, #20]
 8007466:	1d18      	adds	r0, r3, #4
 8007468:	6028      	str	r0, [r5, #0]
 800746a:	0635      	lsls	r5, r6, #24
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	d501      	bpl.n	8007474 <_printf_i+0x1c4>
 8007470:	6019      	str	r1, [r3, #0]
 8007472:	e002      	b.n	800747a <_printf_i+0x1ca>
 8007474:	0670      	lsls	r0, r6, #25
 8007476:	d5fb      	bpl.n	8007470 <_printf_i+0x1c0>
 8007478:	8019      	strh	r1, [r3, #0]
 800747a:	2300      	movs	r3, #0
 800747c:	6123      	str	r3, [r4, #16]
 800747e:	4615      	mov	r5, r2
 8007480:	e7bc      	b.n	80073fc <_printf_i+0x14c>
 8007482:	682b      	ldr	r3, [r5, #0]
 8007484:	1d1a      	adds	r2, r3, #4
 8007486:	602a      	str	r2, [r5, #0]
 8007488:	681d      	ldr	r5, [r3, #0]
 800748a:	6862      	ldr	r2, [r4, #4]
 800748c:	2100      	movs	r1, #0
 800748e:	4628      	mov	r0, r5
 8007490:	f7f8 fea6 	bl	80001e0 <memchr>
 8007494:	b108      	cbz	r0, 800749a <_printf_i+0x1ea>
 8007496:	1b40      	subs	r0, r0, r5
 8007498:	6060      	str	r0, [r4, #4]
 800749a:	6863      	ldr	r3, [r4, #4]
 800749c:	6123      	str	r3, [r4, #16]
 800749e:	2300      	movs	r3, #0
 80074a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074a4:	e7aa      	b.n	80073fc <_printf_i+0x14c>
 80074a6:	6923      	ldr	r3, [r4, #16]
 80074a8:	462a      	mov	r2, r5
 80074aa:	4649      	mov	r1, r9
 80074ac:	4640      	mov	r0, r8
 80074ae:	47d0      	blx	sl
 80074b0:	3001      	adds	r0, #1
 80074b2:	d0ad      	beq.n	8007410 <_printf_i+0x160>
 80074b4:	6823      	ldr	r3, [r4, #0]
 80074b6:	079b      	lsls	r3, r3, #30
 80074b8:	d413      	bmi.n	80074e2 <_printf_i+0x232>
 80074ba:	68e0      	ldr	r0, [r4, #12]
 80074bc:	9b03      	ldr	r3, [sp, #12]
 80074be:	4298      	cmp	r0, r3
 80074c0:	bfb8      	it	lt
 80074c2:	4618      	movlt	r0, r3
 80074c4:	e7a6      	b.n	8007414 <_printf_i+0x164>
 80074c6:	2301      	movs	r3, #1
 80074c8:	4632      	mov	r2, r6
 80074ca:	4649      	mov	r1, r9
 80074cc:	4640      	mov	r0, r8
 80074ce:	47d0      	blx	sl
 80074d0:	3001      	adds	r0, #1
 80074d2:	d09d      	beq.n	8007410 <_printf_i+0x160>
 80074d4:	3501      	adds	r5, #1
 80074d6:	68e3      	ldr	r3, [r4, #12]
 80074d8:	9903      	ldr	r1, [sp, #12]
 80074da:	1a5b      	subs	r3, r3, r1
 80074dc:	42ab      	cmp	r3, r5
 80074de:	dcf2      	bgt.n	80074c6 <_printf_i+0x216>
 80074e0:	e7eb      	b.n	80074ba <_printf_i+0x20a>
 80074e2:	2500      	movs	r5, #0
 80074e4:	f104 0619 	add.w	r6, r4, #25
 80074e8:	e7f5      	b.n	80074d6 <_printf_i+0x226>
 80074ea:	bf00      	nop
 80074ec:	08008542 	.word	0x08008542
 80074f0:	08008553 	.word	0x08008553

080074f4 <__sflush_r>:
 80074f4:	898a      	ldrh	r2, [r1, #12]
 80074f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074fa:	4605      	mov	r5, r0
 80074fc:	0710      	lsls	r0, r2, #28
 80074fe:	460c      	mov	r4, r1
 8007500:	d458      	bmi.n	80075b4 <__sflush_r+0xc0>
 8007502:	684b      	ldr	r3, [r1, #4]
 8007504:	2b00      	cmp	r3, #0
 8007506:	dc05      	bgt.n	8007514 <__sflush_r+0x20>
 8007508:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800750a:	2b00      	cmp	r3, #0
 800750c:	dc02      	bgt.n	8007514 <__sflush_r+0x20>
 800750e:	2000      	movs	r0, #0
 8007510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007514:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007516:	2e00      	cmp	r6, #0
 8007518:	d0f9      	beq.n	800750e <__sflush_r+0x1a>
 800751a:	2300      	movs	r3, #0
 800751c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007520:	682f      	ldr	r7, [r5, #0]
 8007522:	6a21      	ldr	r1, [r4, #32]
 8007524:	602b      	str	r3, [r5, #0]
 8007526:	d032      	beq.n	800758e <__sflush_r+0x9a>
 8007528:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	075a      	lsls	r2, r3, #29
 800752e:	d505      	bpl.n	800753c <__sflush_r+0x48>
 8007530:	6863      	ldr	r3, [r4, #4]
 8007532:	1ac0      	subs	r0, r0, r3
 8007534:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007536:	b10b      	cbz	r3, 800753c <__sflush_r+0x48>
 8007538:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800753a:	1ac0      	subs	r0, r0, r3
 800753c:	2300      	movs	r3, #0
 800753e:	4602      	mov	r2, r0
 8007540:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007542:	6a21      	ldr	r1, [r4, #32]
 8007544:	4628      	mov	r0, r5
 8007546:	47b0      	blx	r6
 8007548:	1c43      	adds	r3, r0, #1
 800754a:	89a3      	ldrh	r3, [r4, #12]
 800754c:	d106      	bne.n	800755c <__sflush_r+0x68>
 800754e:	6829      	ldr	r1, [r5, #0]
 8007550:	291d      	cmp	r1, #29
 8007552:	d82b      	bhi.n	80075ac <__sflush_r+0xb8>
 8007554:	4a29      	ldr	r2, [pc, #164]	; (80075fc <__sflush_r+0x108>)
 8007556:	410a      	asrs	r2, r1
 8007558:	07d6      	lsls	r6, r2, #31
 800755a:	d427      	bmi.n	80075ac <__sflush_r+0xb8>
 800755c:	2200      	movs	r2, #0
 800755e:	6062      	str	r2, [r4, #4]
 8007560:	04d9      	lsls	r1, r3, #19
 8007562:	6922      	ldr	r2, [r4, #16]
 8007564:	6022      	str	r2, [r4, #0]
 8007566:	d504      	bpl.n	8007572 <__sflush_r+0x7e>
 8007568:	1c42      	adds	r2, r0, #1
 800756a:	d101      	bne.n	8007570 <__sflush_r+0x7c>
 800756c:	682b      	ldr	r3, [r5, #0]
 800756e:	b903      	cbnz	r3, 8007572 <__sflush_r+0x7e>
 8007570:	6560      	str	r0, [r4, #84]	; 0x54
 8007572:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007574:	602f      	str	r7, [r5, #0]
 8007576:	2900      	cmp	r1, #0
 8007578:	d0c9      	beq.n	800750e <__sflush_r+0x1a>
 800757a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800757e:	4299      	cmp	r1, r3
 8007580:	d002      	beq.n	8007588 <__sflush_r+0x94>
 8007582:	4628      	mov	r0, r5
 8007584:	f7ff fbce 	bl	8006d24 <_free_r>
 8007588:	2000      	movs	r0, #0
 800758a:	6360      	str	r0, [r4, #52]	; 0x34
 800758c:	e7c0      	b.n	8007510 <__sflush_r+0x1c>
 800758e:	2301      	movs	r3, #1
 8007590:	4628      	mov	r0, r5
 8007592:	47b0      	blx	r6
 8007594:	1c41      	adds	r1, r0, #1
 8007596:	d1c8      	bne.n	800752a <__sflush_r+0x36>
 8007598:	682b      	ldr	r3, [r5, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d0c5      	beq.n	800752a <__sflush_r+0x36>
 800759e:	2b1d      	cmp	r3, #29
 80075a0:	d001      	beq.n	80075a6 <__sflush_r+0xb2>
 80075a2:	2b16      	cmp	r3, #22
 80075a4:	d101      	bne.n	80075aa <__sflush_r+0xb6>
 80075a6:	602f      	str	r7, [r5, #0]
 80075a8:	e7b1      	b.n	800750e <__sflush_r+0x1a>
 80075aa:	89a3      	ldrh	r3, [r4, #12]
 80075ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075b0:	81a3      	strh	r3, [r4, #12]
 80075b2:	e7ad      	b.n	8007510 <__sflush_r+0x1c>
 80075b4:	690f      	ldr	r7, [r1, #16]
 80075b6:	2f00      	cmp	r7, #0
 80075b8:	d0a9      	beq.n	800750e <__sflush_r+0x1a>
 80075ba:	0793      	lsls	r3, r2, #30
 80075bc:	680e      	ldr	r6, [r1, #0]
 80075be:	bf08      	it	eq
 80075c0:	694b      	ldreq	r3, [r1, #20]
 80075c2:	600f      	str	r7, [r1, #0]
 80075c4:	bf18      	it	ne
 80075c6:	2300      	movne	r3, #0
 80075c8:	eba6 0807 	sub.w	r8, r6, r7
 80075cc:	608b      	str	r3, [r1, #8]
 80075ce:	f1b8 0f00 	cmp.w	r8, #0
 80075d2:	dd9c      	ble.n	800750e <__sflush_r+0x1a>
 80075d4:	6a21      	ldr	r1, [r4, #32]
 80075d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80075d8:	4643      	mov	r3, r8
 80075da:	463a      	mov	r2, r7
 80075dc:	4628      	mov	r0, r5
 80075de:	47b0      	blx	r6
 80075e0:	2800      	cmp	r0, #0
 80075e2:	dc06      	bgt.n	80075f2 <__sflush_r+0xfe>
 80075e4:	89a3      	ldrh	r3, [r4, #12]
 80075e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075ea:	81a3      	strh	r3, [r4, #12]
 80075ec:	f04f 30ff 	mov.w	r0, #4294967295
 80075f0:	e78e      	b.n	8007510 <__sflush_r+0x1c>
 80075f2:	4407      	add	r7, r0
 80075f4:	eba8 0800 	sub.w	r8, r8, r0
 80075f8:	e7e9      	b.n	80075ce <__sflush_r+0xda>
 80075fa:	bf00      	nop
 80075fc:	dfbffffe 	.word	0xdfbffffe

08007600 <_fflush_r>:
 8007600:	b538      	push	{r3, r4, r5, lr}
 8007602:	690b      	ldr	r3, [r1, #16]
 8007604:	4605      	mov	r5, r0
 8007606:	460c      	mov	r4, r1
 8007608:	b913      	cbnz	r3, 8007610 <_fflush_r+0x10>
 800760a:	2500      	movs	r5, #0
 800760c:	4628      	mov	r0, r5
 800760e:	bd38      	pop	{r3, r4, r5, pc}
 8007610:	b118      	cbz	r0, 800761a <_fflush_r+0x1a>
 8007612:	6a03      	ldr	r3, [r0, #32]
 8007614:	b90b      	cbnz	r3, 800761a <_fflush_r+0x1a>
 8007616:	f7fe ffdb 	bl	80065d0 <__sinit>
 800761a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d0f3      	beq.n	800760a <_fflush_r+0xa>
 8007622:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007624:	07d0      	lsls	r0, r2, #31
 8007626:	d404      	bmi.n	8007632 <_fflush_r+0x32>
 8007628:	0599      	lsls	r1, r3, #22
 800762a:	d402      	bmi.n	8007632 <_fflush_r+0x32>
 800762c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800762e:	f7ff fb58 	bl	8006ce2 <__retarget_lock_acquire_recursive>
 8007632:	4628      	mov	r0, r5
 8007634:	4621      	mov	r1, r4
 8007636:	f7ff ff5d 	bl	80074f4 <__sflush_r>
 800763a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800763c:	07da      	lsls	r2, r3, #31
 800763e:	4605      	mov	r5, r0
 8007640:	d4e4      	bmi.n	800760c <_fflush_r+0xc>
 8007642:	89a3      	ldrh	r3, [r4, #12]
 8007644:	059b      	lsls	r3, r3, #22
 8007646:	d4e1      	bmi.n	800760c <_fflush_r+0xc>
 8007648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800764a:	f7ff fb4b 	bl	8006ce4 <__retarget_lock_release_recursive>
 800764e:	e7dd      	b.n	800760c <_fflush_r+0xc>

08007650 <fileno>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4d13      	ldr	r5, [pc, #76]	; (80076a0 <fileno+0x50>)
 8007654:	4604      	mov	r4, r0
 8007656:	6828      	ldr	r0, [r5, #0]
 8007658:	b118      	cbz	r0, 8007662 <fileno+0x12>
 800765a:	6a03      	ldr	r3, [r0, #32]
 800765c:	b90b      	cbnz	r3, 8007662 <fileno+0x12>
 800765e:	f7fe ffb7 	bl	80065d0 <__sinit>
 8007662:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007664:	07d8      	lsls	r0, r3, #31
 8007666:	d405      	bmi.n	8007674 <fileno+0x24>
 8007668:	89a3      	ldrh	r3, [r4, #12]
 800766a:	0599      	lsls	r1, r3, #22
 800766c:	d402      	bmi.n	8007674 <fileno+0x24>
 800766e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007670:	f7ff fb37 	bl	8006ce2 <__retarget_lock_acquire_recursive>
 8007674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007678:	b15b      	cbz	r3, 8007692 <fileno+0x42>
 800767a:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 800767e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007680:	07d2      	lsls	r2, r2, #31
 8007682:	d404      	bmi.n	800768e <fileno+0x3e>
 8007684:	059b      	lsls	r3, r3, #22
 8007686:	d402      	bmi.n	800768e <fileno+0x3e>
 8007688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800768a:	f7ff fb2b 	bl	8006ce4 <__retarget_lock_release_recursive>
 800768e:	4628      	mov	r0, r5
 8007690:	bd38      	pop	{r3, r4, r5, pc}
 8007692:	682a      	ldr	r2, [r5, #0]
 8007694:	2109      	movs	r1, #9
 8007696:	6011      	str	r1, [r2, #0]
 8007698:	f04f 35ff 	mov.w	r5, #4294967295
 800769c:	e7ef      	b.n	800767e <fileno+0x2e>
 800769e:	bf00      	nop
 80076a0:	20000078 	.word	0x20000078

080076a4 <fiprintf>:
 80076a4:	b40e      	push	{r1, r2, r3}
 80076a6:	b503      	push	{r0, r1, lr}
 80076a8:	4601      	mov	r1, r0
 80076aa:	ab03      	add	r3, sp, #12
 80076ac:	4805      	ldr	r0, [pc, #20]	; (80076c4 <fiprintf+0x20>)
 80076ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80076b2:	6800      	ldr	r0, [r0, #0]
 80076b4:	9301      	str	r3, [sp, #4]
 80076b6:	f000 f89f 	bl	80077f8 <_vfiprintf_r>
 80076ba:	b002      	add	sp, #8
 80076bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80076c0:	b003      	add	sp, #12
 80076c2:	4770      	bx	lr
 80076c4:	20000078 	.word	0x20000078

080076c8 <memmove>:
 80076c8:	4288      	cmp	r0, r1
 80076ca:	b510      	push	{r4, lr}
 80076cc:	eb01 0402 	add.w	r4, r1, r2
 80076d0:	d902      	bls.n	80076d8 <memmove+0x10>
 80076d2:	4284      	cmp	r4, r0
 80076d4:	4623      	mov	r3, r4
 80076d6:	d807      	bhi.n	80076e8 <memmove+0x20>
 80076d8:	1e43      	subs	r3, r0, #1
 80076da:	42a1      	cmp	r1, r4
 80076dc:	d008      	beq.n	80076f0 <memmove+0x28>
 80076de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076e6:	e7f8      	b.n	80076da <memmove+0x12>
 80076e8:	4402      	add	r2, r0
 80076ea:	4601      	mov	r1, r0
 80076ec:	428a      	cmp	r2, r1
 80076ee:	d100      	bne.n	80076f2 <memmove+0x2a>
 80076f0:	bd10      	pop	{r4, pc}
 80076f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076fa:	e7f7      	b.n	80076ec <memmove+0x24>

080076fc <_sbrk_r>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	4d06      	ldr	r5, [pc, #24]	; (8007718 <_sbrk_r+0x1c>)
 8007700:	2300      	movs	r3, #0
 8007702:	4604      	mov	r4, r0
 8007704:	4608      	mov	r0, r1
 8007706:	602b      	str	r3, [r5, #0]
 8007708:	f7fa fa70 	bl	8001bec <_sbrk>
 800770c:	1c43      	adds	r3, r0, #1
 800770e:	d102      	bne.n	8007716 <_sbrk_r+0x1a>
 8007710:	682b      	ldr	r3, [r5, #0]
 8007712:	b103      	cbz	r3, 8007716 <_sbrk_r+0x1a>
 8007714:	6023      	str	r3, [r4, #0]
 8007716:	bd38      	pop	{r3, r4, r5, pc}
 8007718:	200002b0 	.word	0x200002b0

0800771c <memcpy>:
 800771c:	440a      	add	r2, r1
 800771e:	4291      	cmp	r1, r2
 8007720:	f100 33ff 	add.w	r3, r0, #4294967295
 8007724:	d100      	bne.n	8007728 <memcpy+0xc>
 8007726:	4770      	bx	lr
 8007728:	b510      	push	{r4, lr}
 800772a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800772e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007732:	4291      	cmp	r1, r2
 8007734:	d1f9      	bne.n	800772a <memcpy+0xe>
 8007736:	bd10      	pop	{r4, pc}

08007738 <abort>:
 8007738:	b508      	push	{r3, lr}
 800773a:	2006      	movs	r0, #6
 800773c:	f000 fa34 	bl	8007ba8 <raise>
 8007740:	2001      	movs	r0, #1
 8007742:	f7fa f9db 	bl	8001afc <_exit>

08007746 <_realloc_r>:
 8007746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800774a:	4680      	mov	r8, r0
 800774c:	4614      	mov	r4, r2
 800774e:	460e      	mov	r6, r1
 8007750:	b921      	cbnz	r1, 800775c <_realloc_r+0x16>
 8007752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007756:	4611      	mov	r1, r2
 8007758:	f7ff bb58 	b.w	8006e0c <_malloc_r>
 800775c:	b92a      	cbnz	r2, 800776a <_realloc_r+0x24>
 800775e:	f7ff fae1 	bl	8006d24 <_free_r>
 8007762:	4625      	mov	r5, r4
 8007764:	4628      	mov	r0, r5
 8007766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800776a:	f000 fa39 	bl	8007be0 <_malloc_usable_size_r>
 800776e:	4284      	cmp	r4, r0
 8007770:	4607      	mov	r7, r0
 8007772:	d802      	bhi.n	800777a <_realloc_r+0x34>
 8007774:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007778:	d812      	bhi.n	80077a0 <_realloc_r+0x5a>
 800777a:	4621      	mov	r1, r4
 800777c:	4640      	mov	r0, r8
 800777e:	f7ff fb45 	bl	8006e0c <_malloc_r>
 8007782:	4605      	mov	r5, r0
 8007784:	2800      	cmp	r0, #0
 8007786:	d0ed      	beq.n	8007764 <_realloc_r+0x1e>
 8007788:	42bc      	cmp	r4, r7
 800778a:	4622      	mov	r2, r4
 800778c:	4631      	mov	r1, r6
 800778e:	bf28      	it	cs
 8007790:	463a      	movcs	r2, r7
 8007792:	f7ff ffc3 	bl	800771c <memcpy>
 8007796:	4631      	mov	r1, r6
 8007798:	4640      	mov	r0, r8
 800779a:	f7ff fac3 	bl	8006d24 <_free_r>
 800779e:	e7e1      	b.n	8007764 <_realloc_r+0x1e>
 80077a0:	4635      	mov	r5, r6
 80077a2:	e7df      	b.n	8007764 <_realloc_r+0x1e>

080077a4 <__sfputc_r>:
 80077a4:	6893      	ldr	r3, [r2, #8]
 80077a6:	3b01      	subs	r3, #1
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	b410      	push	{r4}
 80077ac:	6093      	str	r3, [r2, #8]
 80077ae:	da08      	bge.n	80077c2 <__sfputc_r+0x1e>
 80077b0:	6994      	ldr	r4, [r2, #24]
 80077b2:	42a3      	cmp	r3, r4
 80077b4:	db01      	blt.n	80077ba <__sfputc_r+0x16>
 80077b6:	290a      	cmp	r1, #10
 80077b8:	d103      	bne.n	80077c2 <__sfputc_r+0x1e>
 80077ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077be:	f000 b935 	b.w	8007a2c <__swbuf_r>
 80077c2:	6813      	ldr	r3, [r2, #0]
 80077c4:	1c58      	adds	r0, r3, #1
 80077c6:	6010      	str	r0, [r2, #0]
 80077c8:	7019      	strb	r1, [r3, #0]
 80077ca:	4608      	mov	r0, r1
 80077cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <__sfputs_r>:
 80077d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d4:	4606      	mov	r6, r0
 80077d6:	460f      	mov	r7, r1
 80077d8:	4614      	mov	r4, r2
 80077da:	18d5      	adds	r5, r2, r3
 80077dc:	42ac      	cmp	r4, r5
 80077de:	d101      	bne.n	80077e4 <__sfputs_r+0x12>
 80077e0:	2000      	movs	r0, #0
 80077e2:	e007      	b.n	80077f4 <__sfputs_r+0x22>
 80077e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077e8:	463a      	mov	r2, r7
 80077ea:	4630      	mov	r0, r6
 80077ec:	f7ff ffda 	bl	80077a4 <__sfputc_r>
 80077f0:	1c43      	adds	r3, r0, #1
 80077f2:	d1f3      	bne.n	80077dc <__sfputs_r+0xa>
 80077f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080077f8 <_vfiprintf_r>:
 80077f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fc:	460d      	mov	r5, r1
 80077fe:	b09d      	sub	sp, #116	; 0x74
 8007800:	4614      	mov	r4, r2
 8007802:	4698      	mov	r8, r3
 8007804:	4606      	mov	r6, r0
 8007806:	b118      	cbz	r0, 8007810 <_vfiprintf_r+0x18>
 8007808:	6a03      	ldr	r3, [r0, #32]
 800780a:	b90b      	cbnz	r3, 8007810 <_vfiprintf_r+0x18>
 800780c:	f7fe fee0 	bl	80065d0 <__sinit>
 8007810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007812:	07d9      	lsls	r1, r3, #31
 8007814:	d405      	bmi.n	8007822 <_vfiprintf_r+0x2a>
 8007816:	89ab      	ldrh	r3, [r5, #12]
 8007818:	059a      	lsls	r2, r3, #22
 800781a:	d402      	bmi.n	8007822 <_vfiprintf_r+0x2a>
 800781c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800781e:	f7ff fa60 	bl	8006ce2 <__retarget_lock_acquire_recursive>
 8007822:	89ab      	ldrh	r3, [r5, #12]
 8007824:	071b      	lsls	r3, r3, #28
 8007826:	d501      	bpl.n	800782c <_vfiprintf_r+0x34>
 8007828:	692b      	ldr	r3, [r5, #16]
 800782a:	b99b      	cbnz	r3, 8007854 <_vfiprintf_r+0x5c>
 800782c:	4629      	mov	r1, r5
 800782e:	4630      	mov	r0, r6
 8007830:	f000 f93a 	bl	8007aa8 <__swsetup_r>
 8007834:	b170      	cbz	r0, 8007854 <_vfiprintf_r+0x5c>
 8007836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007838:	07dc      	lsls	r4, r3, #31
 800783a:	d504      	bpl.n	8007846 <_vfiprintf_r+0x4e>
 800783c:	f04f 30ff 	mov.w	r0, #4294967295
 8007840:	b01d      	add	sp, #116	; 0x74
 8007842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007846:	89ab      	ldrh	r3, [r5, #12]
 8007848:	0598      	lsls	r0, r3, #22
 800784a:	d4f7      	bmi.n	800783c <_vfiprintf_r+0x44>
 800784c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800784e:	f7ff fa49 	bl	8006ce4 <__retarget_lock_release_recursive>
 8007852:	e7f3      	b.n	800783c <_vfiprintf_r+0x44>
 8007854:	2300      	movs	r3, #0
 8007856:	9309      	str	r3, [sp, #36]	; 0x24
 8007858:	2320      	movs	r3, #32
 800785a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800785e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007862:	2330      	movs	r3, #48	; 0x30
 8007864:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007a18 <_vfiprintf_r+0x220>
 8007868:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800786c:	f04f 0901 	mov.w	r9, #1
 8007870:	4623      	mov	r3, r4
 8007872:	469a      	mov	sl, r3
 8007874:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007878:	b10a      	cbz	r2, 800787e <_vfiprintf_r+0x86>
 800787a:	2a25      	cmp	r2, #37	; 0x25
 800787c:	d1f9      	bne.n	8007872 <_vfiprintf_r+0x7a>
 800787e:	ebba 0b04 	subs.w	fp, sl, r4
 8007882:	d00b      	beq.n	800789c <_vfiprintf_r+0xa4>
 8007884:	465b      	mov	r3, fp
 8007886:	4622      	mov	r2, r4
 8007888:	4629      	mov	r1, r5
 800788a:	4630      	mov	r0, r6
 800788c:	f7ff ffa1 	bl	80077d2 <__sfputs_r>
 8007890:	3001      	adds	r0, #1
 8007892:	f000 80a9 	beq.w	80079e8 <_vfiprintf_r+0x1f0>
 8007896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007898:	445a      	add	r2, fp
 800789a:	9209      	str	r2, [sp, #36]	; 0x24
 800789c:	f89a 3000 	ldrb.w	r3, [sl]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 80a1 	beq.w	80079e8 <_vfiprintf_r+0x1f0>
 80078a6:	2300      	movs	r3, #0
 80078a8:	f04f 32ff 	mov.w	r2, #4294967295
 80078ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078b0:	f10a 0a01 	add.w	sl, sl, #1
 80078b4:	9304      	str	r3, [sp, #16]
 80078b6:	9307      	str	r3, [sp, #28]
 80078b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078bc:	931a      	str	r3, [sp, #104]	; 0x68
 80078be:	4654      	mov	r4, sl
 80078c0:	2205      	movs	r2, #5
 80078c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078c6:	4854      	ldr	r0, [pc, #336]	; (8007a18 <_vfiprintf_r+0x220>)
 80078c8:	f7f8 fc8a 	bl	80001e0 <memchr>
 80078cc:	9a04      	ldr	r2, [sp, #16]
 80078ce:	b9d8      	cbnz	r0, 8007908 <_vfiprintf_r+0x110>
 80078d0:	06d1      	lsls	r1, r2, #27
 80078d2:	bf44      	itt	mi
 80078d4:	2320      	movmi	r3, #32
 80078d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078da:	0713      	lsls	r3, r2, #28
 80078dc:	bf44      	itt	mi
 80078de:	232b      	movmi	r3, #43	; 0x2b
 80078e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078e4:	f89a 3000 	ldrb.w	r3, [sl]
 80078e8:	2b2a      	cmp	r3, #42	; 0x2a
 80078ea:	d015      	beq.n	8007918 <_vfiprintf_r+0x120>
 80078ec:	9a07      	ldr	r2, [sp, #28]
 80078ee:	4654      	mov	r4, sl
 80078f0:	2000      	movs	r0, #0
 80078f2:	f04f 0c0a 	mov.w	ip, #10
 80078f6:	4621      	mov	r1, r4
 80078f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078fc:	3b30      	subs	r3, #48	; 0x30
 80078fe:	2b09      	cmp	r3, #9
 8007900:	d94d      	bls.n	800799e <_vfiprintf_r+0x1a6>
 8007902:	b1b0      	cbz	r0, 8007932 <_vfiprintf_r+0x13a>
 8007904:	9207      	str	r2, [sp, #28]
 8007906:	e014      	b.n	8007932 <_vfiprintf_r+0x13a>
 8007908:	eba0 0308 	sub.w	r3, r0, r8
 800790c:	fa09 f303 	lsl.w	r3, r9, r3
 8007910:	4313      	orrs	r3, r2
 8007912:	9304      	str	r3, [sp, #16]
 8007914:	46a2      	mov	sl, r4
 8007916:	e7d2      	b.n	80078be <_vfiprintf_r+0xc6>
 8007918:	9b03      	ldr	r3, [sp, #12]
 800791a:	1d19      	adds	r1, r3, #4
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	9103      	str	r1, [sp, #12]
 8007920:	2b00      	cmp	r3, #0
 8007922:	bfbb      	ittet	lt
 8007924:	425b      	neglt	r3, r3
 8007926:	f042 0202 	orrlt.w	r2, r2, #2
 800792a:	9307      	strge	r3, [sp, #28]
 800792c:	9307      	strlt	r3, [sp, #28]
 800792e:	bfb8      	it	lt
 8007930:	9204      	strlt	r2, [sp, #16]
 8007932:	7823      	ldrb	r3, [r4, #0]
 8007934:	2b2e      	cmp	r3, #46	; 0x2e
 8007936:	d10c      	bne.n	8007952 <_vfiprintf_r+0x15a>
 8007938:	7863      	ldrb	r3, [r4, #1]
 800793a:	2b2a      	cmp	r3, #42	; 0x2a
 800793c:	d134      	bne.n	80079a8 <_vfiprintf_r+0x1b0>
 800793e:	9b03      	ldr	r3, [sp, #12]
 8007940:	1d1a      	adds	r2, r3, #4
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	9203      	str	r2, [sp, #12]
 8007946:	2b00      	cmp	r3, #0
 8007948:	bfb8      	it	lt
 800794a:	f04f 33ff 	movlt.w	r3, #4294967295
 800794e:	3402      	adds	r4, #2
 8007950:	9305      	str	r3, [sp, #20]
 8007952:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007a28 <_vfiprintf_r+0x230>
 8007956:	7821      	ldrb	r1, [r4, #0]
 8007958:	2203      	movs	r2, #3
 800795a:	4650      	mov	r0, sl
 800795c:	f7f8 fc40 	bl	80001e0 <memchr>
 8007960:	b138      	cbz	r0, 8007972 <_vfiprintf_r+0x17a>
 8007962:	9b04      	ldr	r3, [sp, #16]
 8007964:	eba0 000a 	sub.w	r0, r0, sl
 8007968:	2240      	movs	r2, #64	; 0x40
 800796a:	4082      	lsls	r2, r0
 800796c:	4313      	orrs	r3, r2
 800796e:	3401      	adds	r4, #1
 8007970:	9304      	str	r3, [sp, #16]
 8007972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007976:	4829      	ldr	r0, [pc, #164]	; (8007a1c <_vfiprintf_r+0x224>)
 8007978:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800797c:	2206      	movs	r2, #6
 800797e:	f7f8 fc2f 	bl	80001e0 <memchr>
 8007982:	2800      	cmp	r0, #0
 8007984:	d03f      	beq.n	8007a06 <_vfiprintf_r+0x20e>
 8007986:	4b26      	ldr	r3, [pc, #152]	; (8007a20 <_vfiprintf_r+0x228>)
 8007988:	bb1b      	cbnz	r3, 80079d2 <_vfiprintf_r+0x1da>
 800798a:	9b03      	ldr	r3, [sp, #12]
 800798c:	3307      	adds	r3, #7
 800798e:	f023 0307 	bic.w	r3, r3, #7
 8007992:	3308      	adds	r3, #8
 8007994:	9303      	str	r3, [sp, #12]
 8007996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007998:	443b      	add	r3, r7
 800799a:	9309      	str	r3, [sp, #36]	; 0x24
 800799c:	e768      	b.n	8007870 <_vfiprintf_r+0x78>
 800799e:	fb0c 3202 	mla	r2, ip, r2, r3
 80079a2:	460c      	mov	r4, r1
 80079a4:	2001      	movs	r0, #1
 80079a6:	e7a6      	b.n	80078f6 <_vfiprintf_r+0xfe>
 80079a8:	2300      	movs	r3, #0
 80079aa:	3401      	adds	r4, #1
 80079ac:	9305      	str	r3, [sp, #20]
 80079ae:	4619      	mov	r1, r3
 80079b0:	f04f 0c0a 	mov.w	ip, #10
 80079b4:	4620      	mov	r0, r4
 80079b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079ba:	3a30      	subs	r2, #48	; 0x30
 80079bc:	2a09      	cmp	r2, #9
 80079be:	d903      	bls.n	80079c8 <_vfiprintf_r+0x1d0>
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d0c6      	beq.n	8007952 <_vfiprintf_r+0x15a>
 80079c4:	9105      	str	r1, [sp, #20]
 80079c6:	e7c4      	b.n	8007952 <_vfiprintf_r+0x15a>
 80079c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80079cc:	4604      	mov	r4, r0
 80079ce:	2301      	movs	r3, #1
 80079d0:	e7f0      	b.n	80079b4 <_vfiprintf_r+0x1bc>
 80079d2:	ab03      	add	r3, sp, #12
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	462a      	mov	r2, r5
 80079d8:	4b12      	ldr	r3, [pc, #72]	; (8007a24 <_vfiprintf_r+0x22c>)
 80079da:	a904      	add	r1, sp, #16
 80079dc:	4630      	mov	r0, r6
 80079de:	f3af 8000 	nop.w
 80079e2:	4607      	mov	r7, r0
 80079e4:	1c78      	adds	r0, r7, #1
 80079e6:	d1d6      	bne.n	8007996 <_vfiprintf_r+0x19e>
 80079e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079ea:	07d9      	lsls	r1, r3, #31
 80079ec:	d405      	bmi.n	80079fa <_vfiprintf_r+0x202>
 80079ee:	89ab      	ldrh	r3, [r5, #12]
 80079f0:	059a      	lsls	r2, r3, #22
 80079f2:	d402      	bmi.n	80079fa <_vfiprintf_r+0x202>
 80079f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079f6:	f7ff f975 	bl	8006ce4 <__retarget_lock_release_recursive>
 80079fa:	89ab      	ldrh	r3, [r5, #12]
 80079fc:	065b      	lsls	r3, r3, #25
 80079fe:	f53f af1d 	bmi.w	800783c <_vfiprintf_r+0x44>
 8007a02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a04:	e71c      	b.n	8007840 <_vfiprintf_r+0x48>
 8007a06:	ab03      	add	r3, sp, #12
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	462a      	mov	r2, r5
 8007a0c:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <_vfiprintf_r+0x22c>)
 8007a0e:	a904      	add	r1, sp, #16
 8007a10:	4630      	mov	r0, r6
 8007a12:	f7ff fc4d 	bl	80072b0 <_printf_i>
 8007a16:	e7e4      	b.n	80079e2 <_vfiprintf_r+0x1ea>
 8007a18:	08008531 	.word	0x08008531
 8007a1c:	0800853b 	.word	0x0800853b
 8007a20:	00000000 	.word	0x00000000
 8007a24:	080077d3 	.word	0x080077d3
 8007a28:	08008537 	.word	0x08008537

08007a2c <__swbuf_r>:
 8007a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2e:	460e      	mov	r6, r1
 8007a30:	4614      	mov	r4, r2
 8007a32:	4605      	mov	r5, r0
 8007a34:	b118      	cbz	r0, 8007a3e <__swbuf_r+0x12>
 8007a36:	6a03      	ldr	r3, [r0, #32]
 8007a38:	b90b      	cbnz	r3, 8007a3e <__swbuf_r+0x12>
 8007a3a:	f7fe fdc9 	bl	80065d0 <__sinit>
 8007a3e:	69a3      	ldr	r3, [r4, #24]
 8007a40:	60a3      	str	r3, [r4, #8]
 8007a42:	89a3      	ldrh	r3, [r4, #12]
 8007a44:	071a      	lsls	r2, r3, #28
 8007a46:	d525      	bpl.n	8007a94 <__swbuf_r+0x68>
 8007a48:	6923      	ldr	r3, [r4, #16]
 8007a4a:	b31b      	cbz	r3, 8007a94 <__swbuf_r+0x68>
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	6922      	ldr	r2, [r4, #16]
 8007a50:	1a98      	subs	r0, r3, r2
 8007a52:	6963      	ldr	r3, [r4, #20]
 8007a54:	b2f6      	uxtb	r6, r6
 8007a56:	4283      	cmp	r3, r0
 8007a58:	4637      	mov	r7, r6
 8007a5a:	dc04      	bgt.n	8007a66 <__swbuf_r+0x3a>
 8007a5c:	4621      	mov	r1, r4
 8007a5e:	4628      	mov	r0, r5
 8007a60:	f7ff fdce 	bl	8007600 <_fflush_r>
 8007a64:	b9e0      	cbnz	r0, 8007aa0 <__swbuf_r+0x74>
 8007a66:	68a3      	ldr	r3, [r4, #8]
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	60a3      	str	r3, [r4, #8]
 8007a6c:	6823      	ldr	r3, [r4, #0]
 8007a6e:	1c5a      	adds	r2, r3, #1
 8007a70:	6022      	str	r2, [r4, #0]
 8007a72:	701e      	strb	r6, [r3, #0]
 8007a74:	6962      	ldr	r2, [r4, #20]
 8007a76:	1c43      	adds	r3, r0, #1
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d004      	beq.n	8007a86 <__swbuf_r+0x5a>
 8007a7c:	89a3      	ldrh	r3, [r4, #12]
 8007a7e:	07db      	lsls	r3, r3, #31
 8007a80:	d506      	bpl.n	8007a90 <__swbuf_r+0x64>
 8007a82:	2e0a      	cmp	r6, #10
 8007a84:	d104      	bne.n	8007a90 <__swbuf_r+0x64>
 8007a86:	4621      	mov	r1, r4
 8007a88:	4628      	mov	r0, r5
 8007a8a:	f7ff fdb9 	bl	8007600 <_fflush_r>
 8007a8e:	b938      	cbnz	r0, 8007aa0 <__swbuf_r+0x74>
 8007a90:	4638      	mov	r0, r7
 8007a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a94:	4621      	mov	r1, r4
 8007a96:	4628      	mov	r0, r5
 8007a98:	f000 f806 	bl	8007aa8 <__swsetup_r>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	d0d5      	beq.n	8007a4c <__swbuf_r+0x20>
 8007aa0:	f04f 37ff 	mov.w	r7, #4294967295
 8007aa4:	e7f4      	b.n	8007a90 <__swbuf_r+0x64>
	...

08007aa8 <__swsetup_r>:
 8007aa8:	b538      	push	{r3, r4, r5, lr}
 8007aaa:	4b2a      	ldr	r3, [pc, #168]	; (8007b54 <__swsetup_r+0xac>)
 8007aac:	4605      	mov	r5, r0
 8007aae:	6818      	ldr	r0, [r3, #0]
 8007ab0:	460c      	mov	r4, r1
 8007ab2:	b118      	cbz	r0, 8007abc <__swsetup_r+0x14>
 8007ab4:	6a03      	ldr	r3, [r0, #32]
 8007ab6:	b90b      	cbnz	r3, 8007abc <__swsetup_r+0x14>
 8007ab8:	f7fe fd8a 	bl	80065d0 <__sinit>
 8007abc:	89a3      	ldrh	r3, [r4, #12]
 8007abe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ac2:	0718      	lsls	r0, r3, #28
 8007ac4:	d422      	bmi.n	8007b0c <__swsetup_r+0x64>
 8007ac6:	06d9      	lsls	r1, r3, #27
 8007ac8:	d407      	bmi.n	8007ada <__swsetup_r+0x32>
 8007aca:	2309      	movs	r3, #9
 8007acc:	602b      	str	r3, [r5, #0]
 8007ace:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ad2:	81a3      	strh	r3, [r4, #12]
 8007ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad8:	e034      	b.n	8007b44 <__swsetup_r+0x9c>
 8007ada:	0758      	lsls	r0, r3, #29
 8007adc:	d512      	bpl.n	8007b04 <__swsetup_r+0x5c>
 8007ade:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ae0:	b141      	cbz	r1, 8007af4 <__swsetup_r+0x4c>
 8007ae2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ae6:	4299      	cmp	r1, r3
 8007ae8:	d002      	beq.n	8007af0 <__swsetup_r+0x48>
 8007aea:	4628      	mov	r0, r5
 8007aec:	f7ff f91a 	bl	8006d24 <_free_r>
 8007af0:	2300      	movs	r3, #0
 8007af2:	6363      	str	r3, [r4, #52]	; 0x34
 8007af4:	89a3      	ldrh	r3, [r4, #12]
 8007af6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007afa:	81a3      	strh	r3, [r4, #12]
 8007afc:	2300      	movs	r3, #0
 8007afe:	6063      	str	r3, [r4, #4]
 8007b00:	6923      	ldr	r3, [r4, #16]
 8007b02:	6023      	str	r3, [r4, #0]
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	f043 0308 	orr.w	r3, r3, #8
 8007b0a:	81a3      	strh	r3, [r4, #12]
 8007b0c:	6923      	ldr	r3, [r4, #16]
 8007b0e:	b94b      	cbnz	r3, 8007b24 <__swsetup_r+0x7c>
 8007b10:	89a3      	ldrh	r3, [r4, #12]
 8007b12:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b1a:	d003      	beq.n	8007b24 <__swsetup_r+0x7c>
 8007b1c:	4621      	mov	r1, r4
 8007b1e:	4628      	mov	r0, r5
 8007b20:	f000 f88c 	bl	8007c3c <__smakebuf_r>
 8007b24:	89a0      	ldrh	r0, [r4, #12]
 8007b26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b2a:	f010 0301 	ands.w	r3, r0, #1
 8007b2e:	d00a      	beq.n	8007b46 <__swsetup_r+0x9e>
 8007b30:	2300      	movs	r3, #0
 8007b32:	60a3      	str	r3, [r4, #8]
 8007b34:	6963      	ldr	r3, [r4, #20]
 8007b36:	425b      	negs	r3, r3
 8007b38:	61a3      	str	r3, [r4, #24]
 8007b3a:	6923      	ldr	r3, [r4, #16]
 8007b3c:	b943      	cbnz	r3, 8007b50 <__swsetup_r+0xa8>
 8007b3e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b42:	d1c4      	bne.n	8007ace <__swsetup_r+0x26>
 8007b44:	bd38      	pop	{r3, r4, r5, pc}
 8007b46:	0781      	lsls	r1, r0, #30
 8007b48:	bf58      	it	pl
 8007b4a:	6963      	ldrpl	r3, [r4, #20]
 8007b4c:	60a3      	str	r3, [r4, #8]
 8007b4e:	e7f4      	b.n	8007b3a <__swsetup_r+0x92>
 8007b50:	2000      	movs	r0, #0
 8007b52:	e7f7      	b.n	8007b44 <__swsetup_r+0x9c>
 8007b54:	20000078 	.word	0x20000078

08007b58 <_raise_r>:
 8007b58:	291f      	cmp	r1, #31
 8007b5a:	b538      	push	{r3, r4, r5, lr}
 8007b5c:	4604      	mov	r4, r0
 8007b5e:	460d      	mov	r5, r1
 8007b60:	d904      	bls.n	8007b6c <_raise_r+0x14>
 8007b62:	2316      	movs	r3, #22
 8007b64:	6003      	str	r3, [r0, #0]
 8007b66:	f04f 30ff 	mov.w	r0, #4294967295
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
 8007b6c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007b6e:	b112      	cbz	r2, 8007b76 <_raise_r+0x1e>
 8007b70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b74:	b94b      	cbnz	r3, 8007b8a <_raise_r+0x32>
 8007b76:	4620      	mov	r0, r4
 8007b78:	f000 f830 	bl	8007bdc <_getpid_r>
 8007b7c:	462a      	mov	r2, r5
 8007b7e:	4601      	mov	r1, r0
 8007b80:	4620      	mov	r0, r4
 8007b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b86:	f000 b817 	b.w	8007bb8 <_kill_r>
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d00a      	beq.n	8007ba4 <_raise_r+0x4c>
 8007b8e:	1c59      	adds	r1, r3, #1
 8007b90:	d103      	bne.n	8007b9a <_raise_r+0x42>
 8007b92:	2316      	movs	r3, #22
 8007b94:	6003      	str	r3, [r0, #0]
 8007b96:	2001      	movs	r0, #1
 8007b98:	e7e7      	b.n	8007b6a <_raise_r+0x12>
 8007b9a:	2400      	movs	r4, #0
 8007b9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	4798      	blx	r3
 8007ba4:	2000      	movs	r0, #0
 8007ba6:	e7e0      	b.n	8007b6a <_raise_r+0x12>

08007ba8 <raise>:
 8007ba8:	4b02      	ldr	r3, [pc, #8]	; (8007bb4 <raise+0xc>)
 8007baa:	4601      	mov	r1, r0
 8007bac:	6818      	ldr	r0, [r3, #0]
 8007bae:	f7ff bfd3 	b.w	8007b58 <_raise_r>
 8007bb2:	bf00      	nop
 8007bb4:	20000078 	.word	0x20000078

08007bb8 <_kill_r>:
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	4d07      	ldr	r5, [pc, #28]	; (8007bd8 <_kill_r+0x20>)
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	4608      	mov	r0, r1
 8007bc2:	4611      	mov	r1, r2
 8007bc4:	602b      	str	r3, [r5, #0]
 8007bc6:	f7f9 ff89 	bl	8001adc <_kill>
 8007bca:	1c43      	adds	r3, r0, #1
 8007bcc:	d102      	bne.n	8007bd4 <_kill_r+0x1c>
 8007bce:	682b      	ldr	r3, [r5, #0]
 8007bd0:	b103      	cbz	r3, 8007bd4 <_kill_r+0x1c>
 8007bd2:	6023      	str	r3, [r4, #0]
 8007bd4:	bd38      	pop	{r3, r4, r5, pc}
 8007bd6:	bf00      	nop
 8007bd8:	200002b0 	.word	0x200002b0

08007bdc <_getpid_r>:
 8007bdc:	f7f9 bf76 	b.w	8001acc <_getpid>

08007be0 <_malloc_usable_size_r>:
 8007be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007be4:	1f18      	subs	r0, r3, #4
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	bfbc      	itt	lt
 8007bea:	580b      	ldrlt	r3, [r1, r0]
 8007bec:	18c0      	addlt	r0, r0, r3
 8007bee:	4770      	bx	lr

08007bf0 <__swhatbuf_r>:
 8007bf0:	b570      	push	{r4, r5, r6, lr}
 8007bf2:	460c      	mov	r4, r1
 8007bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf8:	2900      	cmp	r1, #0
 8007bfa:	b096      	sub	sp, #88	; 0x58
 8007bfc:	4615      	mov	r5, r2
 8007bfe:	461e      	mov	r6, r3
 8007c00:	da0d      	bge.n	8007c1e <__swhatbuf_r+0x2e>
 8007c02:	89a3      	ldrh	r3, [r4, #12]
 8007c04:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007c08:	f04f 0100 	mov.w	r1, #0
 8007c0c:	bf0c      	ite	eq
 8007c0e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007c12:	2340      	movne	r3, #64	; 0x40
 8007c14:	2000      	movs	r0, #0
 8007c16:	6031      	str	r1, [r6, #0]
 8007c18:	602b      	str	r3, [r5, #0]
 8007c1a:	b016      	add	sp, #88	; 0x58
 8007c1c:	bd70      	pop	{r4, r5, r6, pc}
 8007c1e:	466a      	mov	r2, sp
 8007c20:	f000 f848 	bl	8007cb4 <_fstat_r>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	dbec      	blt.n	8007c02 <__swhatbuf_r+0x12>
 8007c28:	9901      	ldr	r1, [sp, #4]
 8007c2a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007c2e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007c32:	4259      	negs	r1, r3
 8007c34:	4159      	adcs	r1, r3
 8007c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c3a:	e7eb      	b.n	8007c14 <__swhatbuf_r+0x24>

08007c3c <__smakebuf_r>:
 8007c3c:	898b      	ldrh	r3, [r1, #12]
 8007c3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c40:	079d      	lsls	r5, r3, #30
 8007c42:	4606      	mov	r6, r0
 8007c44:	460c      	mov	r4, r1
 8007c46:	d507      	bpl.n	8007c58 <__smakebuf_r+0x1c>
 8007c48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c4c:	6023      	str	r3, [r4, #0]
 8007c4e:	6123      	str	r3, [r4, #16]
 8007c50:	2301      	movs	r3, #1
 8007c52:	6163      	str	r3, [r4, #20]
 8007c54:	b002      	add	sp, #8
 8007c56:	bd70      	pop	{r4, r5, r6, pc}
 8007c58:	ab01      	add	r3, sp, #4
 8007c5a:	466a      	mov	r2, sp
 8007c5c:	f7ff ffc8 	bl	8007bf0 <__swhatbuf_r>
 8007c60:	9900      	ldr	r1, [sp, #0]
 8007c62:	4605      	mov	r5, r0
 8007c64:	4630      	mov	r0, r6
 8007c66:	f7ff f8d1 	bl	8006e0c <_malloc_r>
 8007c6a:	b948      	cbnz	r0, 8007c80 <__smakebuf_r+0x44>
 8007c6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c70:	059a      	lsls	r2, r3, #22
 8007c72:	d4ef      	bmi.n	8007c54 <__smakebuf_r+0x18>
 8007c74:	f023 0303 	bic.w	r3, r3, #3
 8007c78:	f043 0302 	orr.w	r3, r3, #2
 8007c7c:	81a3      	strh	r3, [r4, #12]
 8007c7e:	e7e3      	b.n	8007c48 <__smakebuf_r+0xc>
 8007c80:	89a3      	ldrh	r3, [r4, #12]
 8007c82:	6020      	str	r0, [r4, #0]
 8007c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c88:	81a3      	strh	r3, [r4, #12]
 8007c8a:	9b00      	ldr	r3, [sp, #0]
 8007c8c:	6163      	str	r3, [r4, #20]
 8007c8e:	9b01      	ldr	r3, [sp, #4]
 8007c90:	6120      	str	r0, [r4, #16]
 8007c92:	b15b      	cbz	r3, 8007cac <__smakebuf_r+0x70>
 8007c94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c98:	4630      	mov	r0, r6
 8007c9a:	f000 f81d 	bl	8007cd8 <_isatty_r>
 8007c9e:	b128      	cbz	r0, 8007cac <__smakebuf_r+0x70>
 8007ca0:	89a3      	ldrh	r3, [r4, #12]
 8007ca2:	f023 0303 	bic.w	r3, r3, #3
 8007ca6:	f043 0301 	orr.w	r3, r3, #1
 8007caa:	81a3      	strh	r3, [r4, #12]
 8007cac:	89a3      	ldrh	r3, [r4, #12]
 8007cae:	431d      	orrs	r5, r3
 8007cb0:	81a5      	strh	r5, [r4, #12]
 8007cb2:	e7cf      	b.n	8007c54 <__smakebuf_r+0x18>

08007cb4 <_fstat_r>:
 8007cb4:	b538      	push	{r3, r4, r5, lr}
 8007cb6:	4d07      	ldr	r5, [pc, #28]	; (8007cd4 <_fstat_r+0x20>)
 8007cb8:	2300      	movs	r3, #0
 8007cba:	4604      	mov	r4, r0
 8007cbc:	4608      	mov	r0, r1
 8007cbe:	4611      	mov	r1, r2
 8007cc0:	602b      	str	r3, [r5, #0]
 8007cc2:	f7f9 ff6a 	bl	8001b9a <_fstat>
 8007cc6:	1c43      	adds	r3, r0, #1
 8007cc8:	d102      	bne.n	8007cd0 <_fstat_r+0x1c>
 8007cca:	682b      	ldr	r3, [r5, #0]
 8007ccc:	b103      	cbz	r3, 8007cd0 <_fstat_r+0x1c>
 8007cce:	6023      	str	r3, [r4, #0]
 8007cd0:	bd38      	pop	{r3, r4, r5, pc}
 8007cd2:	bf00      	nop
 8007cd4:	200002b0 	.word	0x200002b0

08007cd8 <_isatty_r>:
 8007cd8:	b538      	push	{r3, r4, r5, lr}
 8007cda:	4d06      	ldr	r5, [pc, #24]	; (8007cf4 <_isatty_r+0x1c>)
 8007cdc:	2300      	movs	r3, #0
 8007cde:	4604      	mov	r4, r0
 8007ce0:	4608      	mov	r0, r1
 8007ce2:	602b      	str	r3, [r5, #0]
 8007ce4:	f7f9 ff69 	bl	8001bba <_isatty>
 8007ce8:	1c43      	adds	r3, r0, #1
 8007cea:	d102      	bne.n	8007cf2 <_isatty_r+0x1a>
 8007cec:	682b      	ldr	r3, [r5, #0]
 8007cee:	b103      	cbz	r3, 8007cf2 <_isatty_r+0x1a>
 8007cf0:	6023      	str	r3, [r4, #0]
 8007cf2:	bd38      	pop	{r3, r4, r5, pc}
 8007cf4:	200002b0 	.word	0x200002b0

08007cf8 <_init>:
 8007cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfa:	bf00      	nop
 8007cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfe:	bc08      	pop	{r3}
 8007d00:	469e      	mov	lr, r3
 8007d02:	4770      	bx	lr

08007d04 <_fini>:
 8007d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d06:	bf00      	nop
 8007d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d0a:	bc08      	pop	{r3}
 8007d0c:	469e      	mov	lr, r3
 8007d0e:	4770      	bx	lr
