
f303_foc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032e0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003468  08003468  00013468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034c8  080034c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080034c8  080034c8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034c8  080034c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034c8  080034c8  000134c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034cc  080034cc  000134cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000006c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009348  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000174c  00000000  00000000  000293c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000998  00000000  00000000  0002ab18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000767  00000000  00000000  0002b4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c6f6  00000000  00000000  0002bc17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000bc24  00000000  00000000  0004830d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ae5d6  00000000  00000000  00053f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000027b4  00000000  00000000  00102508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00104cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003450 	.word	0x08003450

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003450 	.word	0x08003450

080001c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80001c8:	b590      	push	{r4, r7, lr}
 80001ca:	b08d      	sub	sp, #52	; 0x34
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  motor_phase_t phase_A = {
 80001ce:	4b1c      	ldr	r3, [pc, #112]	; (8000240 <main+0x78>)
 80001d0:	f107 0420 	add.w	r4, r7, #32
 80001d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      .pin_high = {.port = GPIOA, .pin = GPIO_PIN_8},
      .pin_low = {.port = GPIOA, .pin = GPIO_PIN_11}};
  motor_phase_t phase_B = {
 80001da:	4b1a      	ldr	r3, [pc, #104]	; (8000244 <main+0x7c>)
 80001dc:	f107 0410 	add.w	r4, r7, #16
 80001e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      .pin_high = {.port = GPIOA, .pin = GPIO_PIN_9},
      .pin_low = {.port = GPIOA, .pin = GPIO_PIN_12}};
  motor_phase_t phase_C = {
 80001e6:	4b18      	ldr	r3, [pc, #96]	; (8000248 <main+0x80>)
 80001e8:	463c      	mov	r4, r7
 80001ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f0:	f000 fa5c 	bl	80006ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f4:	f000 f82e 	bl	8000254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f8:	f000 f90e 	bl	8000418 <MX_GPIO_Init>
  MX_TIM1_Init();
 80001fc:	f000 f87c 	bl	80002f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000200:	2100      	movs	r1, #0
 8000202:	4812      	ldr	r0, [pc, #72]	; (800024c <main+0x84>)
 8000204:	f002 f980 	bl	8002508 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000208:	2100      	movs	r1, #0
 800020a:	4810      	ldr	r0, [pc, #64]	; (800024c <main+0x84>)
 800020c:	f002 ff1c 	bl	8003048 <HAL_TIMEx_PWMN_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    //    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
    __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 800);
 8000210:	4b0e      	ldr	r3, [pc, #56]	; (800024c <main+0x84>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000218:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(2000);
 800021a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800021e:	f000 faab 	bl	8000778 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 8000222:	2200      	movs	r2, #0
 8000224:	2104      	movs	r1, #4
 8000226:	480a      	ldr	r0, [pc, #40]	; (8000250 <main+0x88>)
 8000228:	f000 fd2a 	bl	8000c80 <HAL_GPIO_WritePin>
    __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 400);
 800022c:	4b07      	ldr	r3, [pc, #28]	; (800024c <main+0x84>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000234:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(2000);
 8000236:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800023a:	f000 fa9d 	bl	8000778 <HAL_Delay>
    __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 800);
 800023e:	e7e7      	b.n	8000210 <main+0x48>
 8000240:	08003468 	.word	0x08003468
 8000244:	08003478 	.word	0x08003478
 8000248:	08003488 	.word	0x08003488
 800024c:	20000028 	.word	0x20000028
 8000250:	48000400 	.word	0x48000400

08000254 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b09e      	sub	sp, #120	; 0x78
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800025e:	2228      	movs	r2, #40	; 0x28
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f003 f8c7 	bl	80033f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000268:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	605a      	str	r2, [r3, #4]
 8000272:	609a      	str	r2, [r3, #8]
 8000274:	60da      	str	r2, [r3, #12]
 8000276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000278:	463b      	mov	r3, r7
 800027a:	223c      	movs	r2, #60	; 0x3c
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f003 f8b9 	bl	80033f6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000284:	2302      	movs	r3, #2
 8000286:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000288:	2301      	movs	r3, #1
 800028a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028c:	2310      	movs	r3, #16
 800028e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000290:	2300      	movs	r3, #0
 8000292:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000294:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000298:	4618      	mov	r0, r3
 800029a:	f000 fd09 	bl	8000cb0 <HAL_RCC_OscConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80002a4:	f000 f91a 	bl	80004dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80002a8:	230f      	movs	r3, #15
 80002aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ac:	2300      	movs	r3, #0
 80002ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 fd32 	bl	8001d2c <HAL_RCC_ClockConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80002ce:	f000 f905 	bl	80004dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80002d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002d6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002d8:	2300      	movs	r3, #0
 80002da:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002dc:	463b      	mov	r3, r7
 80002de:	4618      	mov	r0, r3
 80002e0:	f001 ff0a 	bl	80020f8 <HAL_RCCEx_PeriphCLKConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002ea:	f000 f8f7 	bl	80004dc <Error_Handler>
  }
}
 80002ee:	bf00      	nop
 80002f0:	3778      	adds	r7, #120	; 0x78
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b096      	sub	sp, #88	; 0x58
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800030a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
 8000318:	611a      	str	r2, [r3, #16]
 800031a:	615a      	str	r2, [r3, #20]
 800031c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	222c      	movs	r2, #44	; 0x2c
 8000322:	2100      	movs	r1, #0
 8000324:	4618      	mov	r0, r3
 8000326:	f003 f866 	bl	80033f6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800032a:	4b39      	ldr	r3, [pc, #228]	; (8000410 <MX_TIM1_Init+0x118>)
 800032c:	4a39      	ldr	r2, [pc, #228]	; (8000414 <MX_TIM1_Init+0x11c>)
 800032e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8 - 1;
 8000330:	4b37      	ldr	r3, [pc, #220]	; (8000410 <MX_TIM1_Init+0x118>)
 8000332:	2207      	movs	r2, #7
 8000334:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000336:	4b36      	ldr	r3, [pc, #216]	; (8000410 <MX_TIM1_Init+0x118>)
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800033c:	4b34      	ldr	r3, [pc, #208]	; (8000410 <MX_TIM1_Init+0x118>)
 800033e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000342:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000344:	4b32      	ldr	r3, [pc, #200]	; (8000410 <MX_TIM1_Init+0x118>)
 8000346:	2200      	movs	r2, #0
 8000348:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800034a:	4b31      	ldr	r3, [pc, #196]	; (8000410 <MX_TIM1_Init+0x118>)
 800034c:	2200      	movs	r2, #0
 800034e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000350:	4b2f      	ldr	r3, [pc, #188]	; (8000410 <MX_TIM1_Init+0x118>)
 8000352:	2200      	movs	r2, #0
 8000354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000356:	482e      	ldr	r0, [pc, #184]	; (8000410 <MX_TIM1_Init+0x118>)
 8000358:	f002 f87e 	bl	8002458 <HAL_TIM_PWM_Init>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000362:	f000 f8bb 	bl	80004dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000366:	2300      	movs	r3, #0
 8000368:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800036a:	2300      	movs	r3, #0
 800036c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800036e:	2300      	movs	r3, #0
 8000370:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000372:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000376:	4619      	mov	r1, r3
 8000378:	4825      	ldr	r0, [pc, #148]	; (8000410 <MX_TIM1_Init+0x118>)
 800037a:	f002 ff19 	bl	80031b0 <HAL_TIMEx_MasterConfigSynchronization>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000384:	f000 f8aa 	bl	80004dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000388:	2360      	movs	r3, #96	; 0x60
 800038a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800038c:	2300      	movs	r3, #0
 800038e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000390:	2300      	movs	r3, #0
 8000392:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000394:	2308      	movs	r3, #8
 8000396:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000398:	2300      	movs	r3, #0
 800039a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800039c:	2300      	movs	r3, #0
 800039e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003a0:	2300      	movs	r3, #0
 80003a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003a8:	2200      	movs	r2, #0
 80003aa:	4619      	mov	r1, r3
 80003ac:	4818      	ldr	r0, [pc, #96]	; (8000410 <MX_TIM1_Init+0x118>)
 80003ae:	f002 f9ab 	bl	8002708 <HAL_TIM_PWM_ConfigChannel>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80003b8:	f000 f890 	bl	80004dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003bc:	2300      	movs	r3, #0
 80003be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003c4:	2300      	movs	r3, #0
 80003c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80003da:	2300      	movs	r3, #0
 80003dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80003de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80003e2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80003e4:	2300      	movs	r3, #0
 80003e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003e8:	2300      	movs	r3, #0
 80003ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	4619      	mov	r1, r3
 80003f0:	4807      	ldr	r0, [pc, #28]	; (8000410 <MX_TIM1_Init+0x118>)
 80003f2:	f002 ff5d 	bl	80032b0 <HAL_TIMEx_ConfigBreakDeadTime>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80003fc:	f000 f86e 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000400:	4803      	ldr	r0, [pc, #12]	; (8000410 <MX_TIM1_Init+0x118>)
 8000402:	f000 f8b5 	bl	8000570 <HAL_TIM_MspPostInit>
}
 8000406:	bf00      	nop
 8000408:	3758      	adds	r7, #88	; 0x58
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000028 	.word	0x20000028
 8000414:	40012c00 	.word	0x40012c00

08000418 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041e:	f107 030c 	add.w	r3, r7, #12
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
 800042c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800042e:	4b29      	ldr	r3, [pc, #164]	; (80004d4 <MX_GPIO_Init+0xbc>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a28      	ldr	r2, [pc, #160]	; (80004d4 <MX_GPIO_Init+0xbc>)
 8000434:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000438:	6153      	str	r3, [r2, #20]
 800043a:	4b26      	ldr	r3, [pc, #152]	; (80004d4 <MX_GPIO_Init+0xbc>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000446:	4b23      	ldr	r3, [pc, #140]	; (80004d4 <MX_GPIO_Init+0xbc>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a22      	ldr	r2, [pc, #136]	; (80004d4 <MX_GPIO_Init+0xbc>)
 800044c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000450:	6153      	str	r3, [r2, #20]
 8000452:	4b20      	ldr	r3, [pc, #128]	; (80004d4 <MX_GPIO_Init+0xbc>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045e:	4b1d      	ldr	r3, [pc, #116]	; (80004d4 <MX_GPIO_Init+0xbc>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	4a1c      	ldr	r2, [pc, #112]	; (80004d4 <MX_GPIO_Init+0xbc>)
 8000464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000468:	6153      	str	r3, [r2, #20]
 800046a:	4b1a      	ldr	r3, [pc, #104]	; (80004d4 <MX_GPIO_Init+0xbc>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000472:	603b      	str	r3, [r7, #0]
 8000474:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C_L_Pin | RED_LED_Pin, GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	2106      	movs	r1, #6
 800047a:	4817      	ldr	r0, [pc, #92]	; (80004d8 <MX_GPIO_Init+0xc0>)
 800047c:	f000 fc00 	bl	8000c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, B_H_Pin | C_H_Pin | B_L_Pin, GPIO_PIN_RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 8000486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048a:	f000 fbf9 	bl	8000c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C_L_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = C_L_Pin | RED_LED_Pin;
 800048e:	2306      	movs	r3, #6
 8000490:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000492:	2301      	movs	r3, #1
 8000494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	2300      	movs	r3, #0
 8000498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049a:	2300      	movs	r3, #0
 800049c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800049e:	f107 030c 	add.w	r3, r7, #12
 80004a2:	4619      	mov	r1, r3
 80004a4:	480c      	ldr	r0, [pc, #48]	; (80004d8 <MX_GPIO_Init+0xc0>)
 80004a6:	f000 fa71 	bl	800098c <HAL_GPIO_Init>

  /*Configure GPIO pins : B_H_Pin C_H_Pin B_L_Pin */
  GPIO_InitStruct.Pin = B_H_Pin | C_H_Pin | B_L_Pin;
 80004aa:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 80004ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b0:	2301      	movs	r3, #1
 80004b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	2300      	movs	r3, #0
 80004b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b8:	2300      	movs	r3, #0
 80004ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004bc:	f107 030c 	add.w	r3, r7, #12
 80004c0:	4619      	mov	r1, r3
 80004c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c6:	f000 fa61 	bl	800098c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80004ca:	bf00      	nop
 80004cc:	3720      	adds	r7, #32
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000
 80004d8:	48000400 	.word	0x48000400

080004dc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e0:	b672      	cpsid	i
}
 80004e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <Error_Handler+0x8>
	...

080004e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ee:	4b0f      	ldr	r3, [pc, #60]	; (800052c <HAL_MspInit+0x44>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	4a0e      	ldr	r2, [pc, #56]	; (800052c <HAL_MspInit+0x44>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6193      	str	r3, [r2, #24]
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <HAL_MspInit+0x44>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <HAL_MspInit+0x44>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	4a08      	ldr	r2, [pc, #32]	; (800052c <HAL_MspInit+0x44>)
 800050c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	4b06      	ldr	r3, [pc, #24]	; (800052c <HAL_MspInit+0x44>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051a:	603b      	str	r3, [r7, #0]
 800051c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000

08000530 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a0a      	ldr	r2, [pc, #40]	; (8000568 <HAL_TIM_PWM_MspInit+0x38>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d10b      	bne.n	800055a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000542:	4b0a      	ldr	r3, [pc, #40]	; (800056c <HAL_TIM_PWM_MspInit+0x3c>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	4a09      	ldr	r2, [pc, #36]	; (800056c <HAL_TIM_PWM_MspInit+0x3c>)
 8000548:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800054c:	6193      	str	r3, [r2, #24]
 800054e:	4b07      	ldr	r3, [pc, #28]	; (800056c <HAL_TIM_PWM_MspInit+0x3c>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40012c00 	.word	0x40012c00
 800056c:	40021000 	.word	0x40021000

08000570 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a12      	ldr	r2, [pc, #72]	; (80005d8 <HAL_TIM_MspPostInit+0x68>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d11d      	bne.n	80005ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	4b12      	ldr	r3, [pc, #72]	; (80005dc <HAL_TIM_MspPostInit+0x6c>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a11      	ldr	r2, [pc, #68]	; (80005dc <HAL_TIM_MspPostInit+0x6c>)
 8000598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800059c:	6153      	str	r3, [r2, #20]
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <HAL_TIM_MspPostInit+0x6c>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80005aa:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80005ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b0:	2302      	movs	r3, #2
 80005b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80005bc:	2306      	movs	r3, #6
 80005be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	4619      	mov	r1, r3
 80005c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ca:	f000 f9df 	bl	800098c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80005ce:	bf00      	nop
 80005d0:	3720      	adds	r7, #32
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40012c00 	.word	0x40012c00
 80005dc:	40021000 	.word	0x40021000

080005e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <NMI_Handler+0x4>

080005e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ea:	e7fe      	b.n	80005ea <HardFault_Handler+0x4>

080005ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <MemManage_Handler+0x4>

080005f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f6:	e7fe      	b.n	80005f6 <BusFault_Handler+0x4>

080005f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <UsageFault_Handler+0x4>

080005fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800062c:	f000 f884 	bl	8000738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <SystemInit+0x20>)
 800063a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800063e:	4a05      	ldr	r2, [pc, #20]	; (8000654 <SystemInit+0x20>)
 8000640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000658:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000690 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800065c:	f7ff ffea 	bl	8000634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000660:	480c      	ldr	r0, [pc, #48]	; (8000694 <LoopForever+0x6>)
  ldr r1, =_edata
 8000662:	490d      	ldr	r1, [pc, #52]	; (8000698 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000664:	4a0d      	ldr	r2, [pc, #52]	; (800069c <LoopForever+0xe>)
  movs r3, #0
 8000666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000668:	e002      	b.n	8000670 <LoopCopyDataInit>

0800066a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800066c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066e:	3304      	adds	r3, #4

08000670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000674:	d3f9      	bcc.n	800066a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000676:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000678:	4c0a      	ldr	r4, [pc, #40]	; (80006a4 <LoopForever+0x16>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800067c:	e001      	b.n	8000682 <LoopFillZerobss>

0800067e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000680:	3204      	adds	r2, #4

08000682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000684:	d3fb      	bcc.n	800067e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000686:	f002 febf 	bl	8003408 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800068a:	f7ff fd9d 	bl	80001c8 <main>

0800068e <LoopForever>:

LoopForever:
    b LoopForever
 800068e:	e7fe      	b.n	800068e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000690:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000698:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800069c:	080034d0 	.word	0x080034d0
  ldr r2, =_sbss
 80006a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006a4:	20000078 	.word	0x20000078

080006a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006a8:	e7fe      	b.n	80006a8 <ADC1_2_IRQHandler>
	...

080006ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <HAL_Init+0x28>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <HAL_Init+0x28>)
 80006b6:	f043 0310 	orr.w	r3, r3, #16
 80006ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006bc:	2003      	movs	r0, #3
 80006be:	f000 f931 	bl	8000924 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006c2:	200f      	movs	r0, #15
 80006c4:	f000 f808 	bl	80006d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006c8:	f7ff ff0e 	bl	80004e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40022000 	.word	0x40022000

080006d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <HAL_InitTick+0x54>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_InitTick+0x58>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4619      	mov	r1, r3
 80006ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80006f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f93b 	bl	8000972 <HAL_SYSTICK_Config>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
 8000704:	e00e      	b.n	8000724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2b0f      	cmp	r3, #15
 800070a:	d80a      	bhi.n	8000722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800070c:	2200      	movs	r2, #0
 800070e:	6879      	ldr	r1, [r7, #4]
 8000710:	f04f 30ff 	mov.w	r0, #4294967295
 8000714:	f000 f911 	bl	800093a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000718:	4a06      	ldr	r2, [pc, #24]	; (8000734 <HAL_InitTick+0x5c>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800071e:	2300      	movs	r3, #0
 8000720:	e000      	b.n	8000724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000722:	2301      	movs	r3, #1
}
 8000724:	4618      	mov	r0, r3
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000000 	.word	0x20000000
 8000730:	20000008 	.word	0x20000008
 8000734:	20000004 	.word	0x20000004

08000738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <HAL_IncTick+0x20>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	461a      	mov	r2, r3
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_IncTick+0x24>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4413      	add	r3, r2
 8000748:	4a04      	ldr	r2, [pc, #16]	; (800075c <HAL_IncTick+0x24>)
 800074a:	6013      	str	r3, [r2, #0]
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	20000008 	.word	0x20000008
 800075c:	20000074 	.word	0x20000074

08000760 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return uwTick;  
 8000764:	4b03      	ldr	r3, [pc, #12]	; (8000774 <HAL_GetTick+0x14>)
 8000766:	681b      	ldr	r3, [r3, #0]
}
 8000768:	4618      	mov	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	20000074 	.word	0x20000074

08000778 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000780:	f7ff ffee 	bl	8000760 <HAL_GetTick>
 8000784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000790:	d005      	beq.n	800079e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <HAL_Delay+0x44>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	461a      	mov	r2, r3
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	4413      	add	r3, r2
 800079c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800079e:	bf00      	nop
 80007a0:	f7ff ffde 	bl	8000760 <HAL_GetTick>
 80007a4:	4602      	mov	r2, r0
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d8f7      	bhi.n	80007a0 <HAL_Delay+0x28>
  {
  }
}
 80007b0:	bf00      	nop
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000008 	.word	0x20000008

080007c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <__NVIC_SetPriorityGrouping+0x44>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007d6:	68ba      	ldr	r2, [r7, #8]
 80007d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007dc:	4013      	ands	r3, r2
 80007de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f2:	4a04      	ldr	r2, [pc, #16]	; (8000804 <__NVIC_SetPriorityGrouping+0x44>)
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	60d3      	str	r3, [r2, #12]
}
 80007f8:	bf00      	nop
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800080c:	4b04      	ldr	r3, [pc, #16]	; (8000820 <__NVIC_GetPriorityGrouping+0x18>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	0a1b      	lsrs	r3, r3, #8
 8000812:	f003 0307 	and.w	r3, r3, #7
}
 8000816:	4618      	mov	r0, r3
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	6039      	str	r1, [r7, #0]
 800082e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000834:	2b00      	cmp	r3, #0
 8000836:	db0a      	blt.n	800084e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	b2da      	uxtb	r2, r3
 800083c:	490c      	ldr	r1, [pc, #48]	; (8000870 <__NVIC_SetPriority+0x4c>)
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	0112      	lsls	r2, r2, #4
 8000844:	b2d2      	uxtb	r2, r2
 8000846:	440b      	add	r3, r1
 8000848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800084c:	e00a      	b.n	8000864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4908      	ldr	r1, [pc, #32]	; (8000874 <__NVIC_SetPriority+0x50>)
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	f003 030f 	and.w	r3, r3, #15
 800085a:	3b04      	subs	r3, #4
 800085c:	0112      	lsls	r2, r2, #4
 800085e:	b2d2      	uxtb	r2, r2
 8000860:	440b      	add	r3, r1
 8000862:	761a      	strb	r2, [r3, #24]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	e000e100 	.word	0xe000e100
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000878:	b480      	push	{r7}
 800087a:	b089      	sub	sp, #36	; 0x24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	f1c3 0307 	rsb	r3, r3, #7
 8000892:	2b04      	cmp	r3, #4
 8000894:	bf28      	it	cs
 8000896:	2304      	movcs	r3, #4
 8000898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	3304      	adds	r3, #4
 800089e:	2b06      	cmp	r3, #6
 80008a0:	d902      	bls.n	80008a8 <NVIC_EncodePriority+0x30>
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	3b03      	subs	r3, #3
 80008a6:	e000      	b.n	80008aa <NVIC_EncodePriority+0x32>
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ac:	f04f 32ff 	mov.w	r2, #4294967295
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	43da      	mvns	r2, r3
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	401a      	ands	r2, r3
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008c0:	f04f 31ff 	mov.w	r1, #4294967295
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ca:	43d9      	mvns	r1, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d0:	4313      	orrs	r3, r2
         );
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3724      	adds	r7, #36	; 0x24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
	...

080008e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008f0:	d301      	bcc.n	80008f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008f2:	2301      	movs	r3, #1
 80008f4:	e00f      	b.n	8000916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <SysTick_Config+0x40>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008fe:	210f      	movs	r1, #15
 8000900:	f04f 30ff 	mov.w	r0, #4294967295
 8000904:	f7ff ff8e 	bl	8000824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <SysTick_Config+0x40>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <SysTick_Config+0x40>)
 8000910:	2207      	movs	r2, #7
 8000912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	e000e010 	.word	0xe000e010

08000924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff ff47 	bl	80007c0 <__NVIC_SetPriorityGrouping>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af00      	add	r7, sp, #0
 8000940:	4603      	mov	r3, r0
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
 8000946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800094c:	f7ff ff5c 	bl	8000808 <__NVIC_GetPriorityGrouping>
 8000950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	68b9      	ldr	r1, [r7, #8]
 8000956:	6978      	ldr	r0, [r7, #20]
 8000958:	f7ff ff8e 	bl	8000878 <NVIC_EncodePriority>
 800095c:	4602      	mov	r2, r0
 800095e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff5d 	bl	8000824 <__NVIC_SetPriority>
}
 800096a:	bf00      	nop
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ffb0 	bl	80008e0 <SysTick_Config>
 8000980:	4603      	mov	r3, r0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800098c:	b480      	push	{r7}
 800098e:	b087      	sub	sp, #28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800099a:	e154      	b.n	8000c46 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	2101      	movs	r1, #1
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	fa01 f303 	lsl.w	r3, r1, r3
 80009a8:	4013      	ands	r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	f000 8146 	beq.w	8000c40 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	f003 0303 	and.w	r3, r3, #3
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d005      	beq.n	80009cc <HAL_GPIO_Init+0x40>
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f003 0303 	and.w	r3, r3, #3
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d130      	bne.n	8000a2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	2203      	movs	r2, #3
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4013      	ands	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	68da      	ldr	r2, [r3, #12]
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a02:	2201      	movs	r2, #1
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	091b      	lsrs	r3, r3, #4
 8000a18:	f003 0201 	and.w	r2, r3, #1
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f003 0303 	and.w	r3, r3, #3
 8000a36:	2b03      	cmp	r3, #3
 8000a38:	d017      	beq.n	8000a6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	2203      	movs	r2, #3
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f003 0303 	and.w	r3, r3, #3
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d123      	bne.n	8000abe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	08da      	lsrs	r2, r3, #3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3208      	adds	r2, #8
 8000a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	220f      	movs	r2, #15
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43db      	mvns	r3, r3
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	4013      	ands	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	691a      	ldr	r2, [r3, #16]
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	f003 0307 	and.w	r3, r3, #7
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	08da      	lsrs	r2, r3, #3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3208      	adds	r2, #8
 8000ab8:	6939      	ldr	r1, [r7, #16]
 8000aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	2203      	movs	r2, #3
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f003 0203 	and.w	r2, r3, #3
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 80a0 	beq.w	8000c40 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b00:	4b58      	ldr	r3, [pc, #352]	; (8000c64 <HAL_GPIO_Init+0x2d8>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a57      	ldr	r2, [pc, #348]	; (8000c64 <HAL_GPIO_Init+0x2d8>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b55      	ldr	r3, [pc, #340]	; (8000c64 <HAL_GPIO_Init+0x2d8>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b18:	4a53      	ldr	r2, [pc, #332]	; (8000c68 <HAL_GPIO_Init+0x2dc>)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	089b      	lsrs	r3, r3, #2
 8000b1e:	3302      	adds	r3, #2
 8000b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	f003 0303 	and.w	r3, r3, #3
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	220f      	movs	r2, #15
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b42:	d019      	beq.n	8000b78 <HAL_GPIO_Init+0x1ec>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a49      	ldr	r2, [pc, #292]	; (8000c6c <HAL_GPIO_Init+0x2e0>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d013      	beq.n	8000b74 <HAL_GPIO_Init+0x1e8>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a48      	ldr	r2, [pc, #288]	; (8000c70 <HAL_GPIO_Init+0x2e4>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d00d      	beq.n	8000b70 <HAL_GPIO_Init+0x1e4>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a47      	ldr	r2, [pc, #284]	; (8000c74 <HAL_GPIO_Init+0x2e8>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d007      	beq.n	8000b6c <HAL_GPIO_Init+0x1e0>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a46      	ldr	r2, [pc, #280]	; (8000c78 <HAL_GPIO_Init+0x2ec>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d101      	bne.n	8000b68 <HAL_GPIO_Init+0x1dc>
 8000b64:	2304      	movs	r3, #4
 8000b66:	e008      	b.n	8000b7a <HAL_GPIO_Init+0x1ee>
 8000b68:	2305      	movs	r3, #5
 8000b6a:	e006      	b.n	8000b7a <HAL_GPIO_Init+0x1ee>
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	e004      	b.n	8000b7a <HAL_GPIO_Init+0x1ee>
 8000b70:	2302      	movs	r3, #2
 8000b72:	e002      	b.n	8000b7a <HAL_GPIO_Init+0x1ee>
 8000b74:	2301      	movs	r3, #1
 8000b76:	e000      	b.n	8000b7a <HAL_GPIO_Init+0x1ee>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	697a      	ldr	r2, [r7, #20]
 8000b7c:	f002 0203 	and.w	r2, r2, #3
 8000b80:	0092      	lsls	r2, r2, #2
 8000b82:	4093      	lsls	r3, r2
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b8a:	4937      	ldr	r1, [pc, #220]	; (8000c68 <HAL_GPIO_Init+0x2dc>)
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	089b      	lsrs	r3, r3, #2
 8000b90:	3302      	adds	r3, #2
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b98:	4b38      	ldr	r3, [pc, #224]	; (8000c7c <HAL_GPIO_Init+0x2f0>)
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d003      	beq.n	8000bbc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bbc:	4a2f      	ldr	r2, [pc, #188]	; (8000c7c <HAL_GPIO_Init+0x2f0>)
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bc2:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <HAL_GPIO_Init+0x2f0>)
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000be6:	4a25      	ldr	r2, [pc, #148]	; (8000c7c <HAL_GPIO_Init+0x2f0>)
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000bec:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <HAL_GPIO_Init+0x2f0>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d003      	beq.n	8000c10 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c10:	4a1a      	ldr	r2, [pc, #104]	; (8000c7c <HAL_GPIO_Init+0x2f0>)
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <HAL_GPIO_Init+0x2f0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4013      	ands	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c3a:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <HAL_GPIO_Init+0x2f0>)
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	3301      	adds	r3, #1
 8000c44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f47f aea3 	bne.w	800099c <HAL_GPIO_Init+0x10>
  }
}
 8000c56:	bf00      	nop
 8000c58:	bf00      	nop
 8000c5a:	371c      	adds	r7, #28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010000 	.word	0x40010000
 8000c6c:	48000400 	.word	0x48000400
 8000c70:	48000800 	.word	0x48000800
 8000c74:	48000c00 	.word	0x48000c00
 8000c78:	48001000 	.word	0x48001000
 8000c7c:	40010400 	.word	0x40010400

08000c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	807b      	strh	r3, [r7, #2]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c90:	787b      	ldrb	r3, [r7, #1]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c96:	887a      	ldrh	r2, [r7, #2]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c9c:	e002      	b.n	8000ca4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c9e:	887a      	ldrh	r2, [r7, #2]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cc0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d102      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	f001 b823 	b.w	8001d1c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f000 817d 	beq.w	8000fe6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cec:	4bbc      	ldr	r3, [pc, #752]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 030c 	and.w	r3, r3, #12
 8000cf4:	2b04      	cmp	r3, #4
 8000cf6:	d00c      	beq.n	8000d12 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cf8:	4bb9      	ldr	r3, [pc, #740]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 030c 	and.w	r3, r3, #12
 8000d00:	2b08      	cmp	r3, #8
 8000d02:	d15c      	bne.n	8000dbe <HAL_RCC_OscConfig+0x10e>
 8000d04:	4bb6      	ldr	r3, [pc, #728]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d10:	d155      	bne.n	8000dbe <HAL_RCC_OscConfig+0x10e>
 8000d12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d16:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d1e:	fa93 f3a3 	rbit	r3, r3
 8000d22:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d26:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d2a:	fab3 f383 	clz	r3, r3
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	095b      	lsrs	r3, r3, #5
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d102      	bne.n	8000d44 <HAL_RCC_OscConfig+0x94>
 8000d3e:	4ba8      	ldr	r3, [pc, #672]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	e015      	b.n	8000d70 <HAL_RCC_OscConfig+0xc0>
 8000d44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d48:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d50:	fa93 f3a3 	rbit	r3, r3
 8000d54:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d5c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d60:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d64:	fa93 f3a3 	rbit	r3, r3
 8000d68:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d6c:	4b9c      	ldr	r3, [pc, #624]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d74:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d78:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d7c:	fa92 f2a2 	rbit	r2, r2
 8000d80:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d84:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	f042 0220 	orr.w	r2, r2, #32
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	f002 021f 	and.w	r2, r2, #31
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9e:	4013      	ands	r3, r2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f000 811f 	beq.w	8000fe4 <HAL_RCC_OscConfig+0x334>
 8000da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000daa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8116 	bne.w	8000fe4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	f000 bfaf 	b.w	8001d1c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dce:	d106      	bne.n	8000dde <HAL_RCC_OscConfig+0x12e>
 8000dd0:	4b83      	ldr	r3, [pc, #524]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a82      	ldr	r2, [pc, #520]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	e036      	b.n	8000e4c <HAL_RCC_OscConfig+0x19c>
 8000dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000de2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10c      	bne.n	8000e08 <HAL_RCC_OscConfig+0x158>
 8000dee:	4b7c      	ldr	r3, [pc, #496]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a7b      	ldr	r2, [pc, #492]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	4b79      	ldr	r3, [pc, #484]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a78      	ldr	r2, [pc, #480]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000e00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	e021      	b.n	8000e4c <HAL_RCC_OscConfig+0x19c>
 8000e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e18:	d10c      	bne.n	8000e34 <HAL_RCC_OscConfig+0x184>
 8000e1a:	4b71      	ldr	r3, [pc, #452]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a70      	ldr	r2, [pc, #448]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	4b6e      	ldr	r3, [pc, #440]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a6d      	ldr	r2, [pc, #436]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e30:	6013      	str	r3, [r2, #0]
 8000e32:	e00b      	b.n	8000e4c <HAL_RCC_OscConfig+0x19c>
 8000e34:	4b6a      	ldr	r3, [pc, #424]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a69      	ldr	r2, [pc, #420]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	4b67      	ldr	r3, [pc, #412]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a66      	ldr	r2, [pc, #408]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e4a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e4c:	4b64      	ldr	r3, [pc, #400]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e50:	f023 020f 	bic.w	r2, r3, #15
 8000e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	495f      	ldr	r1, [pc, #380]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000e62:	4313      	orrs	r3, r2
 8000e64:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d059      	beq.n	8000f2a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e76:	f7ff fc73 	bl	8000760 <HAL_GetTick>
 8000e7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7e:	e00a      	b.n	8000e96 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e80:	f7ff fc6e 	bl	8000760 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	2b64      	cmp	r3, #100	; 0x64
 8000e8e:	d902      	bls.n	8000e96 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	f000 bf43 	b.w	8001d1c <HAL_RCC_OscConfig+0x106c>
 8000e96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e9a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000ea2:	fa93 f3a3 	rbit	r3, r3
 8000ea6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000eaa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eae:	fab3 f383 	clz	r3, r3
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	095b      	lsrs	r3, r3, #5
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d102      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x218>
 8000ec2:	4b47      	ldr	r3, [pc, #284]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	e015      	b.n	8000ef4 <HAL_RCC_OscConfig+0x244>
 8000ec8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ecc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000ed4:	fa93 f3a3 	rbit	r3, r3
 8000ed8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000edc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ee0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ee4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000ee8:	fa93 f3a3 	rbit	r3, r3
 8000eec:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000ef0:	4b3b      	ldr	r3, [pc, #236]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ef8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000efc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f00:	fa92 f2a2 	rbit	r2, r2
 8000f04:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f08:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f0c:	fab2 f282 	clz	r2, r2
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	f042 0220 	orr.w	r2, r2, #32
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	f002 021f 	and.w	r2, r2, #31
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0ab      	beq.n	8000e80 <HAL_RCC_OscConfig+0x1d0>
 8000f28:	e05d      	b.n	8000fe6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2a:	f7ff fc19 	bl	8000760 <HAL_GetTick>
 8000f2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f32:	e00a      	b.n	8000f4a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f34:	f7ff fc14 	bl	8000760 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b64      	cmp	r3, #100	; 0x64
 8000f42:	d902      	bls.n	8000f4a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	f000 bee9 	b.w	8001d1c <HAL_RCC_OscConfig+0x106c>
 8000f4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f4e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f52:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f56:	fa93 f3a3 	rbit	r3, r3
 8000f5a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f5e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f62:	fab3 f383 	clz	r3, r3
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	095b      	lsrs	r3, r3, #5
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d102      	bne.n	8000f7c <HAL_RCC_OscConfig+0x2cc>
 8000f76:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	e015      	b.n	8000fa8 <HAL_RCC_OscConfig+0x2f8>
 8000f7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f80:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f84:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f88:	fa93 f3a3 	rbit	r3, r3
 8000f8c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f94:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f98:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f9c:	fa93 f3a3 	rbit	r3, r3
 8000fa0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fac:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000fb0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000fb4:	fa92 f2a2 	rbit	r2, r2
 8000fb8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000fbc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000fc0:	fab2 f282 	clz	r2, r2
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	f042 0220 	orr.w	r2, r2, #32
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	f002 021f 	and.w	r2, r2, #31
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1ab      	bne.n	8000f34 <HAL_RCC_OscConfig+0x284>
 8000fdc:	e003      	b.n	8000fe6 <HAL_RCC_OscConfig+0x336>
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f000 817d 	beq.w	80012f6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ffc:	4ba6      	ldr	r3, [pc, #664]	; (8001298 <HAL_RCC_OscConfig+0x5e8>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 030c 	and.w	r3, r3, #12
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00b      	beq.n	8001020 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001008:	4ba3      	ldr	r3, [pc, #652]	; (8001298 <HAL_RCC_OscConfig+0x5e8>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 030c 	and.w	r3, r3, #12
 8001010:	2b08      	cmp	r3, #8
 8001012:	d172      	bne.n	80010fa <HAL_RCC_OscConfig+0x44a>
 8001014:	4ba0      	ldr	r3, [pc, #640]	; (8001298 <HAL_RCC_OscConfig+0x5e8>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d16c      	bne.n	80010fa <HAL_RCC_OscConfig+0x44a>
 8001020:	2302      	movs	r3, #2
 8001022:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001026:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800102a:	fa93 f3a3 	rbit	r3, r3
 800102e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001032:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001036:	fab3 f383 	clz	r3, r3
 800103a:	b2db      	uxtb	r3, r3
 800103c:	095b      	lsrs	r3, r3, #5
 800103e:	b2db      	uxtb	r3, r3
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b01      	cmp	r3, #1
 8001048:	d102      	bne.n	8001050 <HAL_RCC_OscConfig+0x3a0>
 800104a:	4b93      	ldr	r3, [pc, #588]	; (8001298 <HAL_RCC_OscConfig+0x5e8>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	e013      	b.n	8001078 <HAL_RCC_OscConfig+0x3c8>
 8001050:	2302      	movs	r3, #2
 8001052:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001056:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800105a:	fa93 f3a3 	rbit	r3, r3
 800105e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001062:	2302      	movs	r3, #2
 8001064:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001068:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800106c:	fa93 f3a3 	rbit	r3, r3
 8001070:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001074:	4b88      	ldr	r3, [pc, #544]	; (8001298 <HAL_RCC_OscConfig+0x5e8>)
 8001076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001078:	2202      	movs	r2, #2
 800107a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800107e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001082:	fa92 f2a2 	rbit	r2, r2
 8001086:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800108a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800108e:	fab2 f282 	clz	r2, r2
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	f042 0220 	orr.w	r2, r2, #32
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	f002 021f 	and.w	r2, r2, #31
 800109e:	2101      	movs	r1, #1
 80010a0:	fa01 f202 	lsl.w	r2, r1, r2
 80010a4:	4013      	ands	r3, r2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00a      	beq.n	80010c0 <HAL_RCC_OscConfig+0x410>
 80010aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d002      	beq.n	80010c0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	f000 be2e 	b.w	8001d1c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c0:	4b75      	ldr	r3, [pc, #468]	; (8001298 <HAL_RCC_OscConfig+0x5e8>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	21f8      	movs	r1, #248	; 0xf8
 80010d6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010da:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010de:	fa91 f1a1 	rbit	r1, r1
 80010e2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80010e6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80010ea:	fab1 f181 	clz	r1, r1
 80010ee:	b2c9      	uxtb	r1, r1
 80010f0:	408b      	lsls	r3, r1
 80010f2:	4969      	ldr	r1, [pc, #420]	; (8001298 <HAL_RCC_OscConfig+0x5e8>)
 80010f4:	4313      	orrs	r3, r2
 80010f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f8:	e0fd      	b.n	80012f6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 8088 	beq.w	800121c <HAL_RCC_OscConfig+0x56c>
 800110c:	2301      	movs	r3, #1
 800110e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001112:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001116:	fa93 f3a3 	rbit	r3, r3
 800111a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800111e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001122:	fab3 f383 	clz	r3, r3
 8001126:	b2db      	uxtb	r3, r3
 8001128:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800112c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	461a      	mov	r2, r3
 8001134:	2301      	movs	r3, #1
 8001136:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001138:	f7ff fb12 	bl	8000760 <HAL_GetTick>
 800113c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001140:	e00a      	b.n	8001158 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001142:	f7ff fb0d 	bl	8000760 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d902      	bls.n	8001158 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	f000 bde2 	b.w	8001d1c <HAL_RCC_OscConfig+0x106c>
 8001158:	2302      	movs	r3, #2
 800115a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001162:	fa93 f3a3 	rbit	r3, r3
 8001166:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800116a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116e:	fab3 f383 	clz	r3, r3
 8001172:	b2db      	uxtb	r3, r3
 8001174:	095b      	lsrs	r3, r3, #5
 8001176:	b2db      	uxtb	r3, r3
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b01      	cmp	r3, #1
 8001180:	d102      	bne.n	8001188 <HAL_RCC_OscConfig+0x4d8>
 8001182:	4b45      	ldr	r3, [pc, #276]	; (8001298 <HAL_RCC_OscConfig+0x5e8>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	e013      	b.n	80011b0 <HAL_RCC_OscConfig+0x500>
 8001188:	2302      	movs	r3, #2
 800118a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001192:	fa93 f3a3 	rbit	r3, r3
 8001196:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800119a:	2302      	movs	r3, #2
 800119c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011a0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80011a4:	fa93 f3a3 	rbit	r3, r3
 80011a8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80011ac:	4b3a      	ldr	r3, [pc, #232]	; (8001298 <HAL_RCC_OscConfig+0x5e8>)
 80011ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b0:	2202      	movs	r2, #2
 80011b2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80011b6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011ba:	fa92 f2a2 	rbit	r2, r2
 80011be:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80011c2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80011c6:	fab2 f282 	clz	r2, r2
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	f042 0220 	orr.w	r2, r2, #32
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	f002 021f 	and.w	r2, r2, #31
 80011d6:	2101      	movs	r1, #1
 80011d8:	fa01 f202 	lsl.w	r2, r1, r2
 80011dc:	4013      	ands	r3, r2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0af      	beq.n	8001142 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e2:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <HAL_RCC_OscConfig+0x5e8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	21f8      	movs	r1, #248	; 0xf8
 80011f8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001200:	fa91 f1a1 	rbit	r1, r1
 8001204:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001208:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800120c:	fab1 f181 	clz	r1, r1
 8001210:	b2c9      	uxtb	r1, r1
 8001212:	408b      	lsls	r3, r1
 8001214:	4920      	ldr	r1, [pc, #128]	; (8001298 <HAL_RCC_OscConfig+0x5e8>)
 8001216:	4313      	orrs	r3, r2
 8001218:	600b      	str	r3, [r1, #0]
 800121a:	e06c      	b.n	80012f6 <HAL_RCC_OscConfig+0x646>
 800121c:	2301      	movs	r3, #1
 800121e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001222:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001226:	fa93 f3a3 	rbit	r3, r3
 800122a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800122e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001232:	fab3 f383 	clz	r3, r3
 8001236:	b2db      	uxtb	r3, r3
 8001238:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800123c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	461a      	mov	r2, r3
 8001244:	2300      	movs	r3, #0
 8001246:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff fa8a 	bl	8000760 <HAL_GetTick>
 800124c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001250:	e00a      	b.n	8001268 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001252:	f7ff fa85 	bl	8000760 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d902      	bls.n	8001268 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	f000 bd5a 	b.w	8001d1c <HAL_RCC_OscConfig+0x106c>
 8001268:	2302      	movs	r3, #2
 800126a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001272:	fa93 f3a3 	rbit	r3, r3
 8001276:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800127a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127e:	fab3 f383 	clz	r3, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	095b      	lsrs	r3, r3, #5
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b01      	cmp	r3, #1
 8001290:	d104      	bne.n	800129c <HAL_RCC_OscConfig+0x5ec>
 8001292:	4b01      	ldr	r3, [pc, #4]	; (8001298 <HAL_RCC_OscConfig+0x5e8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	e015      	b.n	80012c4 <HAL_RCC_OscConfig+0x614>
 8001298:	40021000 	.word	0x40021000
 800129c:	2302      	movs	r3, #2
 800129e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012a6:	fa93 f3a3 	rbit	r3, r3
 80012aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012ae:	2302      	movs	r3, #2
 80012b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012b8:	fa93 f3a3 	rbit	r3, r3
 80012bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80012c0:	4bc8      	ldr	r3, [pc, #800]	; (80015e4 <HAL_RCC_OscConfig+0x934>)
 80012c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c4:	2202      	movs	r2, #2
 80012c6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80012ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012ce:	fa92 f2a2 	rbit	r2, r2
 80012d2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80012d6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80012da:	fab2 f282 	clz	r2, r2
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	f042 0220 	orr.w	r2, r2, #32
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	f002 021f 	and.w	r2, r2, #31
 80012ea:	2101      	movs	r1, #1
 80012ec:	fa01 f202 	lsl.w	r2, r1, r2
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1ad      	bne.n	8001252 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 8110 	beq.w	800152c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800130c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001310:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d079      	beq.n	8001410 <HAL_RCC_OscConfig+0x760>
 800131c:	2301      	movs	r3, #1
 800131e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001322:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001326:	fa93 f3a3 	rbit	r3, r3
 800132a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800132e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001332:	fab3 f383 	clz	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	461a      	mov	r2, r3
 800133a:	4bab      	ldr	r3, [pc, #684]	; (80015e8 <HAL_RCC_OscConfig+0x938>)
 800133c:	4413      	add	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	461a      	mov	r2, r3
 8001342:	2301      	movs	r3, #1
 8001344:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001346:	f7ff fa0b 	bl	8000760 <HAL_GetTick>
 800134a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134e:	e00a      	b.n	8001366 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001350:	f7ff fa06 	bl	8000760 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d902      	bls.n	8001366 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	f000 bcdb 	b.w	8001d1c <HAL_RCC_OscConfig+0x106c>
 8001366:	2302      	movs	r3, #2
 8001368:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001370:	fa93 f3a3 	rbit	r3, r3
 8001374:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800137c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001380:	2202      	movs	r2, #2
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001388:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	fa93 f2a3 	rbit	r2, r3
 8001392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001396:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80013a4:	2202      	movs	r2, #2
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	fa93 f2a3 	rbit	r2, r3
 80013b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013be:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c0:	4b88      	ldr	r3, [pc, #544]	; (80015e4 <HAL_RCC_OscConfig+0x934>)
 80013c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013cc:	2102      	movs	r1, #2
 80013ce:	6019      	str	r1, [r3, #0]
 80013d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	fa93 f1a3 	rbit	r1, r3
 80013de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013e6:	6019      	str	r1, [r3, #0]
  return result;
 80013e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	fab3 f383 	clz	r3, r3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	f003 031f 	and.w	r3, r3, #31
 8001402:	2101      	movs	r1, #1
 8001404:	fa01 f303 	lsl.w	r3, r1, r3
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0a0      	beq.n	8001350 <HAL_RCC_OscConfig+0x6a0>
 800140e:	e08d      	b.n	800152c <HAL_RCC_OscConfig+0x87c>
 8001410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001414:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001418:	2201      	movs	r2, #1
 800141a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001420:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	fa93 f2a3 	rbit	r2, r3
 800142a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001432:	601a      	str	r2, [r3, #0]
  return result;
 8001434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001438:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800143c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800143e:	fab3 f383 	clz	r3, r3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	461a      	mov	r2, r3
 8001446:	4b68      	ldr	r3, [pc, #416]	; (80015e8 <HAL_RCC_OscConfig+0x938>)
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	461a      	mov	r2, r3
 800144e:	2300      	movs	r3, #0
 8001450:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001452:	f7ff f985 	bl	8000760 <HAL_GetTick>
 8001456:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800145a:	e00a      	b.n	8001472 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145c:	f7ff f980 	bl	8000760 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d902      	bls.n	8001472 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	f000 bc55 	b.w	8001d1c <HAL_RCC_OscConfig+0x106c>
 8001472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001476:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800147a:	2202      	movs	r2, #2
 800147c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001482:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	fa93 f2a3 	rbit	r2, r3
 800148c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001490:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800149e:	2202      	movs	r2, #2
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	fa93 f2a3 	rbit	r2, r3
 80014b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014c2:	2202      	movs	r2, #2
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	fa93 f2a3 	rbit	r2, r3
 80014d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014de:	4b41      	ldr	r3, [pc, #260]	; (80015e4 <HAL_RCC_OscConfig+0x934>)
 80014e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014ea:	2102      	movs	r1, #2
 80014ec:	6019      	str	r1, [r3, #0]
 80014ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	fa93 f1a3 	rbit	r1, r3
 80014fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001500:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001504:	6019      	str	r1, [r3, #0]
  return result;
 8001506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	fab3 f383 	clz	r3, r3
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800151a:	b2db      	uxtb	r3, r3
 800151c:	f003 031f 	and.w	r3, r3, #31
 8001520:	2101      	movs	r1, #1
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	4013      	ands	r3, r2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d197      	bne.n	800145c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800152c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001530:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 81a1 	beq.w	8001884 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001542:	2300      	movs	r3, #0
 8001544:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001548:	4b26      	ldr	r3, [pc, #152]	; (80015e4 <HAL_RCC_OscConfig+0x934>)
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d116      	bne.n	8001582 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001554:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <HAL_RCC_OscConfig+0x934>)
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	4a22      	ldr	r2, [pc, #136]	; (80015e4 <HAL_RCC_OscConfig+0x934>)
 800155a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155e:	61d3      	str	r3, [r2, #28]
 8001560:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <HAL_RCC_OscConfig+0x934>)
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001576:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800157a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800157c:	2301      	movs	r3, #1
 800157e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <HAL_RCC_OscConfig+0x93c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158a:	2b00      	cmp	r3, #0
 800158c:	d11a      	bne.n	80015c4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800158e:	4b17      	ldr	r3, [pc, #92]	; (80015ec <HAL_RCC_OscConfig+0x93c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a16      	ldr	r2, [pc, #88]	; (80015ec <HAL_RCC_OscConfig+0x93c>)
 8001594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001598:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800159a:	f7ff f8e1 	bl	8000760 <HAL_GetTick>
 800159e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a2:	e009      	b.n	80015b8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a4:	f7ff f8dc 	bl	8000760 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b64      	cmp	r3, #100	; 0x64
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e3b1      	b.n	8001d1c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <HAL_RCC_OscConfig+0x93c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0ef      	beq.n	80015a4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d10d      	bne.n	80015f0 <HAL_RCC_OscConfig+0x940>
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <HAL_RCC_OscConfig+0x934>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	4a02      	ldr	r2, [pc, #8]	; (80015e4 <HAL_RCC_OscConfig+0x934>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6213      	str	r3, [r2, #32]
 80015e0:	e03c      	b.n	800165c <HAL_RCC_OscConfig+0x9ac>
 80015e2:	bf00      	nop
 80015e4:	40021000 	.word	0x40021000
 80015e8:	10908120 	.word	0x10908120
 80015ec:	40007000 	.word	0x40007000
 80015f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d10c      	bne.n	800161a <HAL_RCC_OscConfig+0x96a>
 8001600:	4bc1      	ldr	r3, [pc, #772]	; (8001908 <HAL_RCC_OscConfig+0xc58>)
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	4ac0      	ldr	r2, [pc, #768]	; (8001908 <HAL_RCC_OscConfig+0xc58>)
 8001606:	f023 0301 	bic.w	r3, r3, #1
 800160a:	6213      	str	r3, [r2, #32]
 800160c:	4bbe      	ldr	r3, [pc, #760]	; (8001908 <HAL_RCC_OscConfig+0xc58>)
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	4abd      	ldr	r2, [pc, #756]	; (8001908 <HAL_RCC_OscConfig+0xc58>)
 8001612:	f023 0304 	bic.w	r3, r3, #4
 8001616:	6213      	str	r3, [r2, #32]
 8001618:	e020      	b.n	800165c <HAL_RCC_OscConfig+0x9ac>
 800161a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2b05      	cmp	r3, #5
 8001628:	d10c      	bne.n	8001644 <HAL_RCC_OscConfig+0x994>
 800162a:	4bb7      	ldr	r3, [pc, #732]	; (8001908 <HAL_RCC_OscConfig+0xc58>)
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	4ab6      	ldr	r2, [pc, #728]	; (8001908 <HAL_RCC_OscConfig+0xc58>)
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	6213      	str	r3, [r2, #32]
 8001636:	4bb4      	ldr	r3, [pc, #720]	; (8001908 <HAL_RCC_OscConfig+0xc58>)
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	4ab3      	ldr	r2, [pc, #716]	; (8001908 <HAL_RCC_OscConfig+0xc58>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6213      	str	r3, [r2, #32]
 8001642:	e00b      	b.n	800165c <HAL_RCC_OscConfig+0x9ac>
 8001644:	4bb0      	ldr	r3, [pc, #704]	; (8001908 <HAL_RCC_OscConfig+0xc58>)
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4aaf      	ldr	r2, [pc, #700]	; (8001908 <HAL_RCC_OscConfig+0xc58>)
 800164a:	f023 0301 	bic.w	r3, r3, #1
 800164e:	6213      	str	r3, [r2, #32]
 8001650:	4bad      	ldr	r3, [pc, #692]	; (8001908 <HAL_RCC_OscConfig+0xc58>)
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	4aac      	ldr	r2, [pc, #688]	; (8001908 <HAL_RCC_OscConfig+0xc58>)
 8001656:	f023 0304 	bic.w	r3, r3, #4
 800165a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800165c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001660:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 8081 	beq.w	8001770 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166e:	f7ff f877 	bl	8000760 <HAL_GetTick>
 8001672:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001676:	e00b      	b.n	8001690 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001678:	f7ff f872 	bl	8000760 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	f241 3288 	movw	r2, #5000	; 0x1388
 8001688:	4293      	cmp	r3, r2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e345      	b.n	8001d1c <HAL_RCC_OscConfig+0x106c>
 8001690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001694:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001698:	2202      	movs	r2, #2
 800169a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	fa93 f2a3 	rbit	r2, r3
 80016aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016bc:	2202      	movs	r2, #2
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	fa93 f2a3 	rbit	r2, r3
 80016ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016d6:	601a      	str	r2, [r3, #0]
  return result;
 80016d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016dc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016e0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e2:	fab3 f383 	clz	r3, r3
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	095b      	lsrs	r3, r3, #5
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d102      	bne.n	80016fc <HAL_RCC_OscConfig+0xa4c>
 80016f6:	4b84      	ldr	r3, [pc, #528]	; (8001908 <HAL_RCC_OscConfig+0xc58>)
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	e013      	b.n	8001724 <HAL_RCC_OscConfig+0xa74>
 80016fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001700:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001704:	2202      	movs	r2, #2
 8001706:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800170c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	fa93 f2a3 	rbit	r2, r3
 8001716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	4b79      	ldr	r3, [pc, #484]	; (8001908 <HAL_RCC_OscConfig+0xc58>)
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001728:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800172c:	2102      	movs	r1, #2
 800172e:	6011      	str	r1, [r2, #0]
 8001730:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001734:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001738:	6812      	ldr	r2, [r2, #0]
 800173a:	fa92 f1a2 	rbit	r1, r2
 800173e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001742:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001746:	6011      	str	r1, [r2, #0]
  return result;
 8001748:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800174c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	fab2 f282 	clz	r2, r2
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	f002 021f 	and.w	r2, r2, #31
 8001762:	2101      	movs	r1, #1
 8001764:	fa01 f202 	lsl.w	r2, r1, r2
 8001768:	4013      	ands	r3, r2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d084      	beq.n	8001678 <HAL_RCC_OscConfig+0x9c8>
 800176e:	e07f      	b.n	8001870 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001770:	f7fe fff6 	bl	8000760 <HAL_GetTick>
 8001774:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001778:	e00b      	b.n	8001792 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800177a:	f7fe fff1 	bl	8000760 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f241 3288 	movw	r2, #5000	; 0x1388
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e2c4      	b.n	8001d1c <HAL_RCC_OscConfig+0x106c>
 8001792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001796:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800179a:	2202      	movs	r2, #2
 800179c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	fa93 f2a3 	rbit	r2, r3
 80017ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017be:	2202      	movs	r2, #2
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	fa93 f2a3 	rbit	r2, r3
 80017d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017d8:	601a      	str	r2, [r3, #0]
  return result;
 80017da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017de:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e4:	fab3 f383 	clz	r3, r3
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	f043 0302 	orr.w	r3, r3, #2
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d102      	bne.n	80017fe <HAL_RCC_OscConfig+0xb4e>
 80017f8:	4b43      	ldr	r3, [pc, #268]	; (8001908 <HAL_RCC_OscConfig+0xc58>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	e013      	b.n	8001826 <HAL_RCC_OscConfig+0xb76>
 80017fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001802:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001806:	2202      	movs	r2, #2
 8001808:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	fa93 f2a3 	rbit	r2, r3
 8001818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	4b39      	ldr	r3, [pc, #228]	; (8001908 <HAL_RCC_OscConfig+0xc58>)
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800182a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800182e:	2102      	movs	r1, #2
 8001830:	6011      	str	r1, [r2, #0]
 8001832:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001836:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	fa92 f1a2 	rbit	r1, r2
 8001840:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001844:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001848:	6011      	str	r1, [r2, #0]
  return result;
 800184a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800184e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	fab2 f282 	clz	r2, r2
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	f002 021f 	and.w	r2, r2, #31
 8001864:	2101      	movs	r1, #1
 8001866:	fa01 f202 	lsl.w	r2, r1, r2
 800186a:	4013      	ands	r3, r2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d184      	bne.n	800177a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001870:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001874:	2b01      	cmp	r3, #1
 8001876:	d105      	bne.n	8001884 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001878:	4b23      	ldr	r3, [pc, #140]	; (8001908 <HAL_RCC_OscConfig+0xc58>)
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	4a22      	ldr	r2, [pc, #136]	; (8001908 <HAL_RCC_OscConfig+0xc58>)
 800187e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001882:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001888:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 8242 	beq.w	8001d1a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001896:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <HAL_RCC_OscConfig+0xc58>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b08      	cmp	r3, #8
 80018a0:	f000 8213 	beq.w	8001cca <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	f040 8162 	bne.w	8001b7a <HAL_RCC_OscConfig+0xeca>
 80018b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ba:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80018be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	fa93 f2a3 	rbit	r2, r3
 80018d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018da:	601a      	str	r2, [r3, #0]
  return result;
 80018dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018e4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e6:	fab3 f383 	clz	r3, r3
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	461a      	mov	r2, r3
 80018f8:	2300      	movs	r3, #0
 80018fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7fe ff30 	bl	8000760 <HAL_GetTick>
 8001900:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001904:	e00c      	b.n	8001920 <HAL_RCC_OscConfig+0xc70>
 8001906:	bf00      	nop
 8001908:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190c:	f7fe ff28 	bl	8000760 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e1fd      	b.n	8001d1c <HAL_RCC_OscConfig+0x106c>
 8001920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001924:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001928:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800192c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001932:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	fa93 f2a3 	rbit	r2, r3
 800193c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001940:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001944:	601a      	str	r2, [r3, #0]
  return result;
 8001946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800194e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001950:	fab3 f383 	clz	r3, r3
 8001954:	b2db      	uxtb	r3, r3
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	b2db      	uxtb	r3, r3
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b01      	cmp	r3, #1
 8001962:	d102      	bne.n	800196a <HAL_RCC_OscConfig+0xcba>
 8001964:	4bb0      	ldr	r3, [pc, #704]	; (8001c28 <HAL_RCC_OscConfig+0xf78>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	e027      	b.n	80019ba <HAL_RCC_OscConfig+0xd0a>
 800196a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001972:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001976:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	fa93 f2a3 	rbit	r2, r3
 8001986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001994:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001998:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	fa93 f2a3 	rbit	r2, r3
 80019ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	4b9c      	ldr	r3, [pc, #624]	; (8001c28 <HAL_RCC_OscConfig+0xf78>)
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019be:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80019c2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019c6:	6011      	str	r1, [r2, #0]
 80019c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019cc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	fa92 f1a2 	rbit	r1, r2
 80019d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019da:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019de:	6011      	str	r1, [r2, #0]
  return result;
 80019e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019e4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019e8:	6812      	ldr	r2, [r2, #0]
 80019ea:	fab2 f282 	clz	r2, r2
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	f042 0220 	orr.w	r2, r2, #32
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	f002 021f 	and.w	r2, r2, #31
 80019fa:	2101      	movs	r1, #1
 80019fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d182      	bne.n	800190c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a06:	4b88      	ldr	r3, [pc, #544]	; (8001c28 <HAL_RCC_OscConfig+0xf78>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	430b      	orrs	r3, r1
 8001a28:	497f      	ldr	r1, [pc, #508]	; (8001c28 <HAL_RCC_OscConfig+0xf78>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	604b      	str	r3, [r1, #4]
 8001a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a32:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a40:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	fa93 f2a3 	rbit	r2, r3
 8001a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a52:	601a      	str	r2, [r3, #0]
  return result;
 8001a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a58:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a5c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	461a      	mov	r2, r3
 8001a70:	2301      	movs	r3, #1
 8001a72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7fe fe74 	bl	8000760 <HAL_GetTick>
 8001a78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a7c:	e009      	b.n	8001a92 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7fe fe6f 	bl	8000760 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e144      	b.n	8001d1c <HAL_RCC_OscConfig+0x106c>
 8001a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a96:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	fa93 f2a3 	rbit	r2, r3
 8001aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ab6:	601a      	str	r2, [r3, #0]
  return result;
 8001ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ac0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac2:	fab3 f383 	clz	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	095b      	lsrs	r3, r3, #5
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d102      	bne.n	8001adc <HAL_RCC_OscConfig+0xe2c>
 8001ad6:	4b54      	ldr	r3, [pc, #336]	; (8001c28 <HAL_RCC_OscConfig+0xf78>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	e027      	b.n	8001b2c <HAL_RCC_OscConfig+0xe7c>
 8001adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ae4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ae8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aee:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	fa93 f2a3 	rbit	r2, r3
 8001af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b06:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b14:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	fa93 f2a3 	rbit	r2, r3
 8001b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b22:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	4b3f      	ldr	r3, [pc, #252]	; (8001c28 <HAL_RCC_OscConfig+0xf78>)
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b30:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b34:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b38:	6011      	str	r1, [r2, #0]
 8001b3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b3e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	fa92 f1a2 	rbit	r1, r2
 8001b48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b4c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b50:	6011      	str	r1, [r2, #0]
  return result;
 8001b52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b56:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	fab2 f282 	clz	r2, r2
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	f042 0220 	orr.w	r2, r2, #32
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	f002 021f 	and.w	r2, r2, #31
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d082      	beq.n	8001a7e <HAL_RCC_OscConfig+0xdce>
 8001b78:	e0cf      	b.n	8001d1a <HAL_RCC_OscConfig+0x106a>
 8001b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	fa93 f2a3 	rbit	r2, r3
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b9e:	601a      	str	r2, [r3, #0]
  return result;
 8001ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ba8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001baa:	fab3 f383 	clz	r3, r3
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	461a      	mov	r2, r3
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7fe fdce 	bl	8000760 <HAL_GetTick>
 8001bc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc8:	e009      	b.n	8001bde <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bca:	f7fe fdc9 	bl	8000760 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e09e      	b.n	8001d1c <HAL_RCC_OscConfig+0x106c>
 8001bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001be6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	fa93 f2a3 	rbit	r2, r3
 8001bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c02:	601a      	str	r2, [r3, #0]
  return result;
 8001c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c08:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0e:	fab3 f383 	clz	r3, r3
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	095b      	lsrs	r3, r3, #5
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d104      	bne.n	8001c2c <HAL_RCC_OscConfig+0xf7c>
 8001c22:	4b01      	ldr	r3, [pc, #4]	; (8001c28 <HAL_RCC_OscConfig+0xf78>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	e029      	b.n	8001c7c <HAL_RCC_OscConfig+0xfcc>
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c30:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	fa93 f2a3 	rbit	r2, r3
 8001c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c56:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c64:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	fa93 f2a3 	rbit	r2, r3
 8001c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c72:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <HAL_RCC_OscConfig+0x1078>)
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c80:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c88:	6011      	str	r1, [r2, #0]
 8001c8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c8e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	fa92 f1a2 	rbit	r1, r2
 8001c98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c9c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ca0:	6011      	str	r1, [r2, #0]
  return result;
 8001ca2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ca6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	fab2 f282 	clz	r2, r2
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	f042 0220 	orr.w	r2, r2, #32
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	f002 021f 	and.w	r2, r2, #31
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d180      	bne.n	8001bca <HAL_RCC_OscConfig+0xf1a>
 8001cc8:	e027      	b.n	8001d1a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e01e      	b.n	8001d1c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cde:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_RCC_OscConfig+0x1078>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ce6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cea:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d10b      	bne.n	8001d16 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001cfe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000

08001d2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b09e      	sub	sp, #120	; 0x78
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e162      	b.n	800200a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d44:	4b90      	ldr	r3, [pc, #576]	; (8001f88 <HAL_RCC_ClockConfig+0x25c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d910      	bls.n	8001d74 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b8d      	ldr	r3, [pc, #564]	; (8001f88 <HAL_RCC_ClockConfig+0x25c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 0207 	bic.w	r2, r3, #7
 8001d5a:	498b      	ldr	r1, [pc, #556]	; (8001f88 <HAL_RCC_ClockConfig+0x25c>)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d62:	4b89      	ldr	r3, [pc, #548]	; (8001f88 <HAL_RCC_ClockConfig+0x25c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e14a      	b.n	800200a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d80:	4b82      	ldr	r3, [pc, #520]	; (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	497f      	ldr	r1, [pc, #508]	; (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 80dc 	beq.w	8001f58 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d13c      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xf6>
 8001da8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001db0:	fa93 f3a3 	rbit	r3, r3
 8001db4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db8:	fab3 f383 	clz	r3, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d102      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xa6>
 8001dcc:	4b6f      	ldr	r3, [pc, #444]	; (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	e00f      	b.n	8001df2 <HAL_RCC_ClockConfig+0xc6>
 8001dd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	667b      	str	r3, [r7, #100]	; 0x64
 8001de0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001de4:	663b      	str	r3, [r7, #96]	; 0x60
 8001de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001de8:	fa93 f3a3 	rbit	r3, r3
 8001dec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dee:	4b67      	ldr	r3, [pc, #412]	; (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001df6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001df8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001dfa:	fa92 f2a2 	rbit	r2, r2
 8001dfe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e02:	fab2 f282 	clz	r2, r2
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	f042 0220 	orr.w	r2, r2, #32
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	f002 021f 	and.w	r2, r2, #31
 8001e12:	2101      	movs	r1, #1
 8001e14:	fa01 f202 	lsl.w	r2, r1, r2
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d17b      	bne.n	8001f16 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e0f3      	b.n	800200a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d13c      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x178>
 8001e2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e2e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e32:	fa93 f3a3 	rbit	r3, r3
 8001e36:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3a:	fab3 f383 	clz	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	095b      	lsrs	r3, r3, #5
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d102      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x128>
 8001e4e:	4b4f      	ldr	r3, [pc, #316]	; (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	e00f      	b.n	8001e74 <HAL_RCC_ClockConfig+0x148>
 8001e54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e58:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e5c:	fa93 f3a3 	rbit	r3, r3
 8001e60:	647b      	str	r3, [r7, #68]	; 0x44
 8001e62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e66:	643b      	str	r3, [r7, #64]	; 0x40
 8001e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e6a:	fa93 f3a3 	rbit	r3, r3
 8001e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e70:	4b46      	ldr	r3, [pc, #280]	; (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e78:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e7c:	fa92 f2a2 	rbit	r2, r2
 8001e80:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e84:	fab2 f282 	clz	r2, r2
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	f042 0220 	orr.w	r2, r2, #32
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	f002 021f 	and.w	r2, r2, #31
 8001e94:	2101      	movs	r1, #1
 8001e96:	fa01 f202 	lsl.w	r2, r1, r2
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d13a      	bne.n	8001f16 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0b2      	b.n	800200a <HAL_RCC_ClockConfig+0x2de>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	095b      	lsrs	r3, r3, #5
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d102      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x1a0>
 8001ec6:	4b31      	ldr	r3, [pc, #196]	; (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	e00d      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x1bc>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed2:	fa93 f3a3 	rbit	r3, r3
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed8:	2302      	movs	r3, #2
 8001eda:	623b      	str	r3, [r7, #32]
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	61fb      	str	r3, [r7, #28]
 8001ee4:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	2202      	movs	r2, #2
 8001eea:	61ba      	str	r2, [r7, #24]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	fa92 f2a2 	rbit	r2, r2
 8001ef2:	617a      	str	r2, [r7, #20]
  return result;
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	fab2 f282 	clz	r2, r2
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	f042 0220 	orr.w	r2, r2, #32
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	f002 021f 	and.w	r2, r2, #31
 8001f06:	2101      	movs	r1, #1
 8001f08:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e079      	b.n	800200a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f16:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f023 0203 	bic.w	r2, r3, #3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	491a      	ldr	r1, [pc, #104]	; (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f28:	f7fe fc1a 	bl	8000760 <HAL_GetTick>
 8001f2c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2e:	e00a      	b.n	8001f46 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f30:	f7fe fc16 	bl	8000760 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e061      	b.n	800200a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_RCC_ClockConfig+0x260>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 020c 	and.w	r2, r3, #12
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d1eb      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_RCC_ClockConfig+0x25c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d214      	bcs.n	8001f90 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <HAL_RCC_ClockConfig+0x25c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 0207 	bic.w	r2, r3, #7
 8001f6e:	4906      	ldr	r1, [pc, #24]	; (8001f88 <HAL_RCC_ClockConfig+0x25c>)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f76:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <HAL_RCC_ClockConfig+0x25c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d005      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e040      	b.n	800200a <HAL_RCC_ClockConfig+0x2de>
 8001f88:	40022000 	.word	0x40022000
 8001f8c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d008      	beq.n	8001fae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f9c:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HAL_RCC_ClockConfig+0x2e8>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	491a      	ldr	r1, [pc, #104]	; (8002014 <HAL_RCC_ClockConfig+0x2e8>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d009      	beq.n	8001fce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fba:	4b16      	ldr	r3, [pc, #88]	; (8002014 <HAL_RCC_ClockConfig+0x2e8>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4912      	ldr	r1, [pc, #72]	; (8002014 <HAL_RCC_ClockConfig+0x2e8>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fce:	f000 f829 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8001fd2:	4601      	mov	r1, r0
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_RCC_ClockConfig+0x2e8>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fdc:	22f0      	movs	r2, #240	; 0xf0
 8001fde:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	fa92 f2a2 	rbit	r2, r2
 8001fe6:	60fa      	str	r2, [r7, #12]
  return result;
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	fab2 f282 	clz	r2, r2
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	40d3      	lsrs	r3, r2
 8001ff2:	4a09      	ldr	r2, [pc, #36]	; (8002018 <HAL_RCC_ClockConfig+0x2ec>)
 8001ff4:	5cd3      	ldrb	r3, [r2, r3]
 8001ff6:	fa21 f303 	lsr.w	r3, r1, r3
 8001ffa:	4a08      	ldr	r2, [pc, #32]	; (800201c <HAL_RCC_ClockConfig+0x2f0>)
 8001ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <HAL_RCC_ClockConfig+0x2f4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fb68 	bl	80006d8 <HAL_InitTick>
  
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3778      	adds	r7, #120	; 0x78
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	08003498 	.word	0x08003498
 800201c:	20000000 	.word	0x20000000
 8002020:	20000004 	.word	0x20000004

08002024 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002024:	b480      	push	{r7}
 8002026:	b08b      	sub	sp, #44	; 0x2c
 8002028:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
 8002032:	2300      	movs	r3, #0
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800203e:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	2b04      	cmp	r3, #4
 800204c:	d002      	beq.n	8002054 <HAL_RCC_GetSysClockFreq+0x30>
 800204e:	2b08      	cmp	r3, #8
 8002050:	d003      	beq.n	800205a <HAL_RCC_GetSysClockFreq+0x36>
 8002052:	e03c      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002054:	4b24      	ldr	r3, [pc, #144]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002056:	623b      	str	r3, [r7, #32]
      break;
 8002058:	e03c      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002060:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002064:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	fa92 f2a2 	rbit	r2, r2
 800206c:	607a      	str	r2, [r7, #4]
  return result;
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	fab2 f282 	clz	r2, r2
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	40d3      	lsrs	r3, r2
 8002078:	4a1c      	ldr	r2, [pc, #112]	; (80020ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800207a:	5cd3      	ldrb	r3, [r2, r3]
 800207c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800207e:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	220f      	movs	r2, #15
 8002088:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	fa92 f2a2 	rbit	r2, r2
 8002090:	60fa      	str	r2, [r7, #12]
  return result;
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	fab2 f282 	clz	r2, r2
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	40d3      	lsrs	r3, r2
 800209c:	4a14      	ldr	r2, [pc, #80]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800209e:	5cd3      	ldrb	r3, [r2, r3]
 80020a0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020ac:	4a0e      	ldr	r2, [pc, #56]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	fb02 f303 	mul.w	r3, r2, r3
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
 80020bc:	e004      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	4a0c      	ldr	r2, [pc, #48]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	623b      	str	r3, [r7, #32]
      break;
 80020cc:	e002      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020d0:	623b      	str	r3, [r7, #32]
      break;
 80020d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020d4:	6a3b      	ldr	r3, [r7, #32]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	372c      	adds	r7, #44	; 0x2c
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	007a1200 	.word	0x007a1200
 80020ec:	080034a8 	.word	0x080034a8
 80020f0:	080034b8 	.word	0x080034b8
 80020f4:	003d0900 	.word	0x003d0900

080020f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b092      	sub	sp, #72	; 0x48
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002108:	2300      	movs	r3, #0
 800210a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 80d4 	beq.w	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800211c:	4b4e      	ldr	r3, [pc, #312]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10e      	bne.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002128:	4b4b      	ldr	r3, [pc, #300]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	4a4a      	ldr	r2, [pc, #296]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800212e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002132:	61d3      	str	r3, [r2, #28]
 8002134:	4b48      	ldr	r3, [pc, #288]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002140:	2301      	movs	r3, #1
 8002142:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002146:	4b45      	ldr	r3, [pc, #276]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d118      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002152:	4b42      	ldr	r3, [pc, #264]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a41      	ldr	r2, [pc, #260]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800215e:	f7fe faff 	bl	8000760 <HAL_GetTick>
 8002162:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002164:	e008      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002166:	f7fe fafb 	bl	8000760 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b64      	cmp	r3, #100	; 0x64
 8002172:	d901      	bls.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e169      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002178:	4b38      	ldr	r3, [pc, #224]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002184:	4b34      	ldr	r3, [pc, #208]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800218c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800218e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 8084 	beq.w	800229e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800219e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d07c      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021a4:	4b2c      	ldr	r3, [pc, #176]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b6:	fa93 f3a3 	rbit	r3, r3
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b26      	ldr	r3, [pc, #152]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	461a      	mov	r2, r3
 80021ce:	2301      	movs	r3, #1
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80021e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021e2:	fab3 f383 	clz	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	461a      	mov	r2, r3
 80021f2:	2300      	movs	r3, #0
 80021f4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021f6:	4a18      	ldr	r2, [pc, #96]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021fa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d04b      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7fe faab 	bl	8000760 <HAL_GetTick>
 800220a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220c:	e00a      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220e:	f7fe faa7 	bl	8000760 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f241 3288 	movw	r2, #5000	; 0x1388
 800221c:	4293      	cmp	r3, r2
 800221e:	d901      	bls.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e113      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002224:	2302      	movs	r3, #2
 8002226:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222a:	fa93 f3a3 	rbit	r3, r3
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
 8002230:	2302      	movs	r3, #2
 8002232:	623b      	str	r3, [r7, #32]
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	fa93 f3a3 	rbit	r3, r3
 800223a:	61fb      	str	r3, [r7, #28]
  return result;
 800223c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	095b      	lsrs	r3, r3, #5
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d108      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002252:	4b01      	ldr	r3, [pc, #4]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	e00d      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002258:	40021000 	.word	0x40021000
 800225c:	40007000 	.word	0x40007000
 8002260:	10908100 	.word	0x10908100
 8002264:	2302      	movs	r3, #2
 8002266:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	4b78      	ldr	r3, [pc, #480]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	2202      	movs	r2, #2
 8002276:	613a      	str	r2, [r7, #16]
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	fa92 f2a2 	rbit	r2, r2
 800227e:	60fa      	str	r2, [r7, #12]
  return result;
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	fab2 f282 	clz	r2, r2
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	f002 021f 	and.w	r2, r2, #31
 8002292:	2101      	movs	r1, #1
 8002294:	fa01 f202 	lsl.w	r2, r1, r2
 8002298:	4013      	ands	r3, r2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0b7      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800229e:	4b6d      	ldr	r3, [pc, #436]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	496a      	ldr	r1, [pc, #424]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d105      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b8:	4b66      	ldr	r3, [pc, #408]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	4a65      	ldr	r2, [pc, #404]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022d0:	4b60      	ldr	r3, [pc, #384]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	f023 0203 	bic.w	r2, r3, #3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	495d      	ldr	r1, [pc, #372]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d008      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022ee:	4b59      	ldr	r3, [pc, #356]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	4956      	ldr	r1, [pc, #344]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800230c:	4b51      	ldr	r3, [pc, #324]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	494e      	ldr	r1, [pc, #312]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800231a:	4313      	orrs	r3, r2
 800231c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0320 	and.w	r3, r3, #32
 8002326:	2b00      	cmp	r3, #0
 8002328:	d008      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800232a:	4b4a      	ldr	r3, [pc, #296]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f023 0210 	bic.w	r2, r3, #16
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	4947      	ldr	r1, [pc, #284]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002338:	4313      	orrs	r3, r2
 800233a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002348:	4b42      	ldr	r3, [pc, #264]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002354:	493f      	ldr	r1, [pc, #252]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002356:	4313      	orrs	r3, r2
 8002358:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002362:	2b00      	cmp	r3, #0
 8002364:	d008      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002366:	4b3b      	ldr	r3, [pc, #236]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f023 0220 	bic.w	r2, r3, #32
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	4938      	ldr	r1, [pc, #224]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002374:	4313      	orrs	r3, r2
 8002376:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002384:	4b33      	ldr	r3, [pc, #204]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	4930      	ldr	r1, [pc, #192]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002392:	4313      	orrs	r3, r2
 8002394:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d008      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023a2:	4b2c      	ldr	r3, [pc, #176]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	4929      	ldr	r1, [pc, #164]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023c0:	4b24      	ldr	r3, [pc, #144]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023cc:	4921      	ldr	r1, [pc, #132]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d008      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023de:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	491a      	ldr	r1, [pc, #104]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80023fc:	4b15      	ldr	r3, [pc, #84]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	4912      	ldr	r1, [pc, #72]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800240a:	4313      	orrs	r3, r2
 800240c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d008      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	490b      	ldr	r1, [pc, #44]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002428:	4313      	orrs	r3, r2
 800242a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d008      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002444:	4903      	ldr	r1, [pc, #12]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002446:	4313      	orrs	r3, r2
 8002448:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3748      	adds	r7, #72	; 0x48
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40021000 	.word	0x40021000

08002458 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e049      	b.n	80024fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d106      	bne.n	8002484 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fe f856 	bl	8000530 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3304      	adds	r3, #4
 8002494:	4619      	mov	r1, r3
 8002496:	4610      	mov	r0, r2
 8002498:	f000 fa4a 	bl	8002930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d109      	bne.n	800252c <HAL_TIM_PWM_Start+0x24>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b01      	cmp	r3, #1
 8002522:	bf14      	ite	ne
 8002524:	2301      	movne	r3, #1
 8002526:	2300      	moveq	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	e03c      	b.n	80025a6 <HAL_TIM_PWM_Start+0x9e>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2b04      	cmp	r3, #4
 8002530:	d109      	bne.n	8002546 <HAL_TIM_PWM_Start+0x3e>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b01      	cmp	r3, #1
 800253c:	bf14      	ite	ne
 800253e:	2301      	movne	r3, #1
 8002540:	2300      	moveq	r3, #0
 8002542:	b2db      	uxtb	r3, r3
 8002544:	e02f      	b.n	80025a6 <HAL_TIM_PWM_Start+0x9e>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b08      	cmp	r3, #8
 800254a:	d109      	bne.n	8002560 <HAL_TIM_PWM_Start+0x58>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b01      	cmp	r3, #1
 8002556:	bf14      	ite	ne
 8002558:	2301      	movne	r3, #1
 800255a:	2300      	moveq	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	e022      	b.n	80025a6 <HAL_TIM_PWM_Start+0x9e>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	2b0c      	cmp	r3, #12
 8002564:	d109      	bne.n	800257a <HAL_TIM_PWM_Start+0x72>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b01      	cmp	r3, #1
 8002570:	bf14      	ite	ne
 8002572:	2301      	movne	r3, #1
 8002574:	2300      	moveq	r3, #0
 8002576:	b2db      	uxtb	r3, r3
 8002578:	e015      	b.n	80025a6 <HAL_TIM_PWM_Start+0x9e>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b10      	cmp	r3, #16
 800257e:	d109      	bne.n	8002594 <HAL_TIM_PWM_Start+0x8c>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b01      	cmp	r3, #1
 800258a:	bf14      	ite	ne
 800258c:	2301      	movne	r3, #1
 800258e:	2300      	moveq	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	e008      	b.n	80025a6 <HAL_TIM_PWM_Start+0x9e>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b01      	cmp	r3, #1
 800259e:	bf14      	ite	ne
 80025a0:	2301      	movne	r3, #1
 80025a2:	2300      	moveq	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e097      	b.n	80026de <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d104      	bne.n	80025be <HAL_TIM_PWM_Start+0xb6>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025bc:	e023      	b.n	8002606 <HAL_TIM_PWM_Start+0xfe>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d104      	bne.n	80025ce <HAL_TIM_PWM_Start+0xc6>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025cc:	e01b      	b.n	8002606 <HAL_TIM_PWM_Start+0xfe>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d104      	bne.n	80025de <HAL_TIM_PWM_Start+0xd6>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025dc:	e013      	b.n	8002606 <HAL_TIM_PWM_Start+0xfe>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b0c      	cmp	r3, #12
 80025e2:	d104      	bne.n	80025ee <HAL_TIM_PWM_Start+0xe6>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025ec:	e00b      	b.n	8002606 <HAL_TIM_PWM_Start+0xfe>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b10      	cmp	r3, #16
 80025f2:	d104      	bne.n	80025fe <HAL_TIM_PWM_Start+0xf6>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025fc:	e003      	b.n	8002606 <HAL_TIM_PWM_Start+0xfe>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2202      	movs	r2, #2
 8002602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2201      	movs	r2, #1
 800260c:	6839      	ldr	r1, [r7, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fcf4 	bl	8002ffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a33      	ldr	r2, [pc, #204]	; (80026e8 <HAL_TIM_PWM_Start+0x1e0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d013      	beq.n	8002646 <HAL_TIM_PWM_Start+0x13e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a32      	ldr	r2, [pc, #200]	; (80026ec <HAL_TIM_PWM_Start+0x1e4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d00e      	beq.n	8002646 <HAL_TIM_PWM_Start+0x13e>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a30      	ldr	r2, [pc, #192]	; (80026f0 <HAL_TIM_PWM_Start+0x1e8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d009      	beq.n	8002646 <HAL_TIM_PWM_Start+0x13e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a2f      	ldr	r2, [pc, #188]	; (80026f4 <HAL_TIM_PWM_Start+0x1ec>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d004      	beq.n	8002646 <HAL_TIM_PWM_Start+0x13e>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a2d      	ldr	r2, [pc, #180]	; (80026f8 <HAL_TIM_PWM_Start+0x1f0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d101      	bne.n	800264a <HAL_TIM_PWM_Start+0x142>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_TIM_PWM_Start+0x144>
 800264a:	2300      	movs	r3, #0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800265e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a20      	ldr	r2, [pc, #128]	; (80026e8 <HAL_TIM_PWM_Start+0x1e0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d018      	beq.n	800269c <HAL_TIM_PWM_Start+0x194>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002672:	d013      	beq.n	800269c <HAL_TIM_PWM_Start+0x194>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a20      	ldr	r2, [pc, #128]	; (80026fc <HAL_TIM_PWM_Start+0x1f4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00e      	beq.n	800269c <HAL_TIM_PWM_Start+0x194>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a1f      	ldr	r2, [pc, #124]	; (8002700 <HAL_TIM_PWM_Start+0x1f8>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d009      	beq.n	800269c <HAL_TIM_PWM_Start+0x194>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a17      	ldr	r2, [pc, #92]	; (80026ec <HAL_TIM_PWM_Start+0x1e4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d004      	beq.n	800269c <HAL_TIM_PWM_Start+0x194>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a16      	ldr	r2, [pc, #88]	; (80026f0 <HAL_TIM_PWM_Start+0x1e8>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d115      	bne.n	80026c8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	4b18      	ldr	r3, [pc, #96]	; (8002704 <HAL_TIM_PWM_Start+0x1fc>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b06      	cmp	r3, #6
 80026ac:	d015      	beq.n	80026da <HAL_TIM_PWM_Start+0x1d2>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b4:	d011      	beq.n	80026da <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 0201 	orr.w	r2, r2, #1
 80026c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026c6:	e008      	b.n	80026da <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	e000      	b.n	80026dc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40012c00 	.word	0x40012c00
 80026ec:	40013400 	.word	0x40013400
 80026f0:	40014000 	.word	0x40014000
 80026f4:	40014400 	.word	0x40014400
 80026f8:	40014800 	.word	0x40014800
 80026fc:	40000400 	.word	0x40000400
 8002700:	40000800 	.word	0x40000800
 8002704:	00010007 	.word	0x00010007

08002708 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002722:	2302      	movs	r3, #2
 8002724:	e0ff      	b.n	8002926 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b14      	cmp	r3, #20
 8002732:	f200 80f0 	bhi.w	8002916 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002736:	a201      	add	r2, pc, #4	; (adr r2, 800273c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273c:	08002791 	.word	0x08002791
 8002740:	08002917 	.word	0x08002917
 8002744:	08002917 	.word	0x08002917
 8002748:	08002917 	.word	0x08002917
 800274c:	080027d1 	.word	0x080027d1
 8002750:	08002917 	.word	0x08002917
 8002754:	08002917 	.word	0x08002917
 8002758:	08002917 	.word	0x08002917
 800275c:	08002813 	.word	0x08002813
 8002760:	08002917 	.word	0x08002917
 8002764:	08002917 	.word	0x08002917
 8002768:	08002917 	.word	0x08002917
 800276c:	08002853 	.word	0x08002853
 8002770:	08002917 	.word	0x08002917
 8002774:	08002917 	.word	0x08002917
 8002778:	08002917 	.word	0x08002917
 800277c:	08002895 	.word	0x08002895
 8002780:	08002917 	.word	0x08002917
 8002784:	08002917 	.word	0x08002917
 8002788:	08002917 	.word	0x08002917
 800278c:	080028d5 	.word	0x080028d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	4618      	mov	r0, r3
 8002798:	f000 f95a 	bl	8002a50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699a      	ldr	r2, [r3, #24]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0208 	orr.w	r2, r2, #8
 80027aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0204 	bic.w	r2, r2, #4
 80027ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6999      	ldr	r1, [r3, #24]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	619a      	str	r2, [r3, #24]
      break;
 80027ce:	e0a5      	b.n	800291c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f9ca 	bl	8002b70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699a      	ldr	r2, [r3, #24]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699a      	ldr	r2, [r3, #24]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6999      	ldr	r1, [r3, #24]
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	021a      	lsls	r2, r3, #8
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	619a      	str	r2, [r3, #24]
      break;
 8002810:	e084      	b.n	800291c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68b9      	ldr	r1, [r7, #8]
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fa33 	bl	8002c84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	69da      	ldr	r2, [r3, #28]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0208 	orr.w	r2, r2, #8
 800282c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	69da      	ldr	r2, [r3, #28]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0204 	bic.w	r2, r2, #4
 800283c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	69d9      	ldr	r1, [r3, #28]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	61da      	str	r2, [r3, #28]
      break;
 8002850:	e064      	b.n	800291c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fa9b 	bl	8002d94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	69da      	ldr	r2, [r3, #28]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800286c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	69da      	ldr	r2, [r3, #28]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800287c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	69d9      	ldr	r1, [r3, #28]
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	021a      	lsls	r2, r3, #8
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	61da      	str	r2, [r3, #28]
      break;
 8002892:	e043      	b.n	800291c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	4618      	mov	r0, r3
 800289c:	f000 fae4 	bl	8002e68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0208 	orr.w	r2, r2, #8
 80028ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0204 	bic.w	r2, r2, #4
 80028be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80028d2:	e023      	b.n	800291c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fb28 	bl	8002f30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	021a      	lsls	r2, r3, #8
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002914:	e002      	b.n	800291c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	75fb      	strb	r3, [r7, #23]
      break;
 800291a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002924:	7dfb      	ldrb	r3, [r7, #23]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop

08002930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a3c      	ldr	r2, [pc, #240]	; (8002a34 <TIM_Base_SetConfig+0x104>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d00f      	beq.n	8002968 <TIM_Base_SetConfig+0x38>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294e:	d00b      	beq.n	8002968 <TIM_Base_SetConfig+0x38>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a39      	ldr	r2, [pc, #228]	; (8002a38 <TIM_Base_SetConfig+0x108>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d007      	beq.n	8002968 <TIM_Base_SetConfig+0x38>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a38      	ldr	r2, [pc, #224]	; (8002a3c <TIM_Base_SetConfig+0x10c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d003      	beq.n	8002968 <TIM_Base_SetConfig+0x38>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a37      	ldr	r2, [pc, #220]	; (8002a40 <TIM_Base_SetConfig+0x110>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d108      	bne.n	800297a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a2d      	ldr	r2, [pc, #180]	; (8002a34 <TIM_Base_SetConfig+0x104>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d01b      	beq.n	80029ba <TIM_Base_SetConfig+0x8a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002988:	d017      	beq.n	80029ba <TIM_Base_SetConfig+0x8a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a2a      	ldr	r2, [pc, #168]	; (8002a38 <TIM_Base_SetConfig+0x108>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d013      	beq.n	80029ba <TIM_Base_SetConfig+0x8a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a29      	ldr	r2, [pc, #164]	; (8002a3c <TIM_Base_SetConfig+0x10c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d00f      	beq.n	80029ba <TIM_Base_SetConfig+0x8a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a28      	ldr	r2, [pc, #160]	; (8002a40 <TIM_Base_SetConfig+0x110>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00b      	beq.n	80029ba <TIM_Base_SetConfig+0x8a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a27      	ldr	r2, [pc, #156]	; (8002a44 <TIM_Base_SetConfig+0x114>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d007      	beq.n	80029ba <TIM_Base_SetConfig+0x8a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a26      	ldr	r2, [pc, #152]	; (8002a48 <TIM_Base_SetConfig+0x118>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d003      	beq.n	80029ba <TIM_Base_SetConfig+0x8a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a25      	ldr	r2, [pc, #148]	; (8002a4c <TIM_Base_SetConfig+0x11c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d108      	bne.n	80029cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a10      	ldr	r2, [pc, #64]	; (8002a34 <TIM_Base_SetConfig+0x104>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d00f      	beq.n	8002a18 <TIM_Base_SetConfig+0xe8>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a11      	ldr	r2, [pc, #68]	; (8002a40 <TIM_Base_SetConfig+0x110>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d00b      	beq.n	8002a18 <TIM_Base_SetConfig+0xe8>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a10      	ldr	r2, [pc, #64]	; (8002a44 <TIM_Base_SetConfig+0x114>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d007      	beq.n	8002a18 <TIM_Base_SetConfig+0xe8>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a0f      	ldr	r2, [pc, #60]	; (8002a48 <TIM_Base_SetConfig+0x118>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d003      	beq.n	8002a18 <TIM_Base_SetConfig+0xe8>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <TIM_Base_SetConfig+0x11c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d103      	bne.n	8002a20 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	615a      	str	r2, [r3, #20]
}
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40012c00 	.word	0x40012c00
 8002a38:	40000400 	.word	0x40000400
 8002a3c:	40000800 	.word	0x40000800
 8002a40:	40013400 	.word	0x40013400
 8002a44:	40014000 	.word	0x40014000
 8002a48:	40014400 	.word	0x40014400
 8002a4c:	40014800 	.word	0x40014800

08002a50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	f023 0201 	bic.w	r2, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 0303 	bic.w	r3, r3, #3
 8002a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f023 0302 	bic.w	r3, r3, #2
 8002a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a2c      	ldr	r2, [pc, #176]	; (8002b5c <TIM_OC1_SetConfig+0x10c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d00f      	beq.n	8002ad0 <TIM_OC1_SetConfig+0x80>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a2b      	ldr	r2, [pc, #172]	; (8002b60 <TIM_OC1_SetConfig+0x110>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d00b      	beq.n	8002ad0 <TIM_OC1_SetConfig+0x80>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a2a      	ldr	r2, [pc, #168]	; (8002b64 <TIM_OC1_SetConfig+0x114>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d007      	beq.n	8002ad0 <TIM_OC1_SetConfig+0x80>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a29      	ldr	r2, [pc, #164]	; (8002b68 <TIM_OC1_SetConfig+0x118>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d003      	beq.n	8002ad0 <TIM_OC1_SetConfig+0x80>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a28      	ldr	r2, [pc, #160]	; (8002b6c <TIM_OC1_SetConfig+0x11c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d10c      	bne.n	8002aea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f023 0308 	bic.w	r3, r3, #8
 8002ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f023 0304 	bic.w	r3, r3, #4
 8002ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a1b      	ldr	r2, [pc, #108]	; (8002b5c <TIM_OC1_SetConfig+0x10c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00f      	beq.n	8002b12 <TIM_OC1_SetConfig+0xc2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a1a      	ldr	r2, [pc, #104]	; (8002b60 <TIM_OC1_SetConfig+0x110>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00b      	beq.n	8002b12 <TIM_OC1_SetConfig+0xc2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a19      	ldr	r2, [pc, #100]	; (8002b64 <TIM_OC1_SetConfig+0x114>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d007      	beq.n	8002b12 <TIM_OC1_SetConfig+0xc2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a18      	ldr	r2, [pc, #96]	; (8002b68 <TIM_OC1_SetConfig+0x118>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d003      	beq.n	8002b12 <TIM_OC1_SetConfig+0xc2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a17      	ldr	r2, [pc, #92]	; (8002b6c <TIM_OC1_SetConfig+0x11c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d111      	bne.n	8002b36 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	621a      	str	r2, [r3, #32]
}
 8002b50:	bf00      	nop
 8002b52:	371c      	adds	r7, #28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	40012c00 	.word	0x40012c00
 8002b60:	40013400 	.word	0x40013400
 8002b64:	40014000 	.word	0x40014000
 8002b68:	40014400 	.word	0x40014400
 8002b6c:	40014800 	.word	0x40014800

08002b70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	f023 0210 	bic.w	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	021b      	lsls	r3, r3, #8
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f023 0320 	bic.w	r3, r3, #32
 8002bbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a28      	ldr	r2, [pc, #160]	; (8002c70 <TIM_OC2_SetConfig+0x100>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d003      	beq.n	8002bdc <TIM_OC2_SetConfig+0x6c>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a27      	ldr	r2, [pc, #156]	; (8002c74 <TIM_OC2_SetConfig+0x104>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d10d      	bne.n	8002bf8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bf6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a1d      	ldr	r2, [pc, #116]	; (8002c70 <TIM_OC2_SetConfig+0x100>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d00f      	beq.n	8002c20 <TIM_OC2_SetConfig+0xb0>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a1c      	ldr	r2, [pc, #112]	; (8002c74 <TIM_OC2_SetConfig+0x104>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00b      	beq.n	8002c20 <TIM_OC2_SetConfig+0xb0>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a1b      	ldr	r2, [pc, #108]	; (8002c78 <TIM_OC2_SetConfig+0x108>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d007      	beq.n	8002c20 <TIM_OC2_SetConfig+0xb0>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a1a      	ldr	r2, [pc, #104]	; (8002c7c <TIM_OC2_SetConfig+0x10c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d003      	beq.n	8002c20 <TIM_OC2_SetConfig+0xb0>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a19      	ldr	r2, [pc, #100]	; (8002c80 <TIM_OC2_SetConfig+0x110>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d113      	bne.n	8002c48 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c26:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c2e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	621a      	str	r2, [r3, #32]
}
 8002c62:	bf00      	nop
 8002c64:	371c      	adds	r7, #28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40012c00 	.word	0x40012c00
 8002c74:	40013400 	.word	0x40013400
 8002c78:	40014000 	.word	0x40014000
 8002c7c:	40014400 	.word	0x40014400
 8002c80:	40014800 	.word	0x40014800

08002c84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 0303 	bic.w	r3, r3, #3
 8002cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a27      	ldr	r2, [pc, #156]	; (8002d80 <TIM_OC3_SetConfig+0xfc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d003      	beq.n	8002cee <TIM_OC3_SetConfig+0x6a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a26      	ldr	r2, [pc, #152]	; (8002d84 <TIM_OC3_SetConfig+0x100>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d10d      	bne.n	8002d0a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	021b      	lsls	r3, r3, #8
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d08:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a1c      	ldr	r2, [pc, #112]	; (8002d80 <TIM_OC3_SetConfig+0xfc>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00f      	beq.n	8002d32 <TIM_OC3_SetConfig+0xae>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a1b      	ldr	r2, [pc, #108]	; (8002d84 <TIM_OC3_SetConfig+0x100>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00b      	beq.n	8002d32 <TIM_OC3_SetConfig+0xae>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a1a      	ldr	r2, [pc, #104]	; (8002d88 <TIM_OC3_SetConfig+0x104>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d007      	beq.n	8002d32 <TIM_OC3_SetConfig+0xae>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a19      	ldr	r2, [pc, #100]	; (8002d8c <TIM_OC3_SetConfig+0x108>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d003      	beq.n	8002d32 <TIM_OC3_SetConfig+0xae>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a18      	ldr	r2, [pc, #96]	; (8002d90 <TIM_OC3_SetConfig+0x10c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d113      	bne.n	8002d5a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	621a      	str	r2, [r3, #32]
}
 8002d74:	bf00      	nop
 8002d76:	371c      	adds	r7, #28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	40012c00 	.word	0x40012c00
 8002d84:	40013400 	.word	0x40013400
 8002d88:	40014000 	.word	0x40014000
 8002d8c:	40014400 	.word	0x40014400
 8002d90:	40014800 	.word	0x40014800

08002d94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	021b      	lsls	r3, r3, #8
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	031b      	lsls	r3, r3, #12
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a18      	ldr	r2, [pc, #96]	; (8002e54 <TIM_OC4_SetConfig+0xc0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00f      	beq.n	8002e18 <TIM_OC4_SetConfig+0x84>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a17      	ldr	r2, [pc, #92]	; (8002e58 <TIM_OC4_SetConfig+0xc4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00b      	beq.n	8002e18 <TIM_OC4_SetConfig+0x84>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a16      	ldr	r2, [pc, #88]	; (8002e5c <TIM_OC4_SetConfig+0xc8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d007      	beq.n	8002e18 <TIM_OC4_SetConfig+0x84>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a15      	ldr	r2, [pc, #84]	; (8002e60 <TIM_OC4_SetConfig+0xcc>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d003      	beq.n	8002e18 <TIM_OC4_SetConfig+0x84>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <TIM_OC4_SetConfig+0xd0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d109      	bne.n	8002e2c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	019b      	lsls	r3, r3, #6
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	621a      	str	r2, [r3, #32]
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40012c00 	.word	0x40012c00
 8002e58:	40013400 	.word	0x40013400
 8002e5c:	40014000 	.word	0x40014000
 8002e60:	40014400 	.word	0x40014400
 8002e64:	40014800 	.word	0x40014800

08002e68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002eac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	041b      	lsls	r3, r3, #16
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a17      	ldr	r2, [pc, #92]	; (8002f1c <TIM_OC5_SetConfig+0xb4>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00f      	beq.n	8002ee2 <TIM_OC5_SetConfig+0x7a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a16      	ldr	r2, [pc, #88]	; (8002f20 <TIM_OC5_SetConfig+0xb8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00b      	beq.n	8002ee2 <TIM_OC5_SetConfig+0x7a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a15      	ldr	r2, [pc, #84]	; (8002f24 <TIM_OC5_SetConfig+0xbc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d007      	beq.n	8002ee2 <TIM_OC5_SetConfig+0x7a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a14      	ldr	r2, [pc, #80]	; (8002f28 <TIM_OC5_SetConfig+0xc0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d003      	beq.n	8002ee2 <TIM_OC5_SetConfig+0x7a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a13      	ldr	r2, [pc, #76]	; (8002f2c <TIM_OC5_SetConfig+0xc4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d109      	bne.n	8002ef6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	021b      	lsls	r3, r3, #8
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	621a      	str	r2, [r3, #32]
}
 8002f10:	bf00      	nop
 8002f12:	371c      	adds	r7, #28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	40012c00 	.word	0x40012c00
 8002f20:	40013400 	.word	0x40013400
 8002f24:	40014000 	.word	0x40014000
 8002f28:	40014400 	.word	0x40014400
 8002f2c:	40014800 	.word	0x40014800

08002f30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	051b      	lsls	r3, r3, #20
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a18      	ldr	r2, [pc, #96]	; (8002fe8 <TIM_OC6_SetConfig+0xb8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d00f      	beq.n	8002fac <TIM_OC6_SetConfig+0x7c>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a17      	ldr	r2, [pc, #92]	; (8002fec <TIM_OC6_SetConfig+0xbc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d00b      	beq.n	8002fac <TIM_OC6_SetConfig+0x7c>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a16      	ldr	r2, [pc, #88]	; (8002ff0 <TIM_OC6_SetConfig+0xc0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d007      	beq.n	8002fac <TIM_OC6_SetConfig+0x7c>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a15      	ldr	r2, [pc, #84]	; (8002ff4 <TIM_OC6_SetConfig+0xc4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d003      	beq.n	8002fac <TIM_OC6_SetConfig+0x7c>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a14      	ldr	r2, [pc, #80]	; (8002ff8 <TIM_OC6_SetConfig+0xc8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d109      	bne.n	8002fc0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	029b      	lsls	r3, r3, #10
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	621a      	str	r2, [r3, #32]
}
 8002fda:	bf00      	nop
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40012c00 	.word	0x40012c00
 8002fec:	40013400 	.word	0x40013400
 8002ff0:	40014000 	.word	0x40014000
 8002ff4:	40014400 	.word	0x40014400
 8002ff8:	40014800 	.word	0x40014800

08002ffc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f003 031f 	and.w	r3, r3, #31
 800300e:	2201      	movs	r2, #1
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a1a      	ldr	r2, [r3, #32]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	43db      	mvns	r3, r3
 800301e:	401a      	ands	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a1a      	ldr	r2, [r3, #32]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	fa01 f303 	lsl.w	r3, r1, r3
 8003034:	431a      	orrs	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	621a      	str	r2, [r3, #32]
}
 800303a:	bf00      	nop
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d109      	bne.n	800306c <HAL_TIMEx_PWMN_Start+0x24>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	bf14      	ite	ne
 8003064:	2301      	movne	r3, #1
 8003066:	2300      	moveq	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	e022      	b.n	80030b2 <HAL_TIMEx_PWMN_Start+0x6a>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2b04      	cmp	r3, #4
 8003070:	d109      	bne.n	8003086 <HAL_TIMEx_PWMN_Start+0x3e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b01      	cmp	r3, #1
 800307c:	bf14      	ite	ne
 800307e:	2301      	movne	r3, #1
 8003080:	2300      	moveq	r3, #0
 8003082:	b2db      	uxtb	r3, r3
 8003084:	e015      	b.n	80030b2 <HAL_TIMEx_PWMN_Start+0x6a>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b08      	cmp	r3, #8
 800308a:	d109      	bne.n	80030a0 <HAL_TIMEx_PWMN_Start+0x58>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	bf14      	ite	ne
 8003098:	2301      	movne	r3, #1
 800309a:	2300      	moveq	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	e008      	b.n	80030b2 <HAL_TIMEx_PWMN_Start+0x6a>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	bf14      	ite	ne
 80030ac:	2301      	movne	r3, #1
 80030ae:	2300      	moveq	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e069      	b.n	800318e <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d104      	bne.n	80030ca <HAL_TIMEx_PWMN_Start+0x82>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c8:	e013      	b.n	80030f2 <HAL_TIMEx_PWMN_Start+0xaa>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d104      	bne.n	80030da <HAL_TIMEx_PWMN_Start+0x92>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030d8:	e00b      	b.n	80030f2 <HAL_TIMEx_PWMN_Start+0xaa>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d104      	bne.n	80030ea <HAL_TIMEx_PWMN_Start+0xa2>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030e8:	e003      	b.n	80030f2 <HAL_TIMEx_PWMN_Start+0xaa>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2202      	movs	r2, #2
 80030ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2204      	movs	r2, #4
 80030f8:	6839      	ldr	r1, [r7, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 f956 	bl	80033ac <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800310e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a20      	ldr	r2, [pc, #128]	; (8003198 <HAL_TIMEx_PWMN_Start+0x150>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d018      	beq.n	800314c <HAL_TIMEx_PWMN_Start+0x104>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003122:	d013      	beq.n	800314c <HAL_TIMEx_PWMN_Start+0x104>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a1c      	ldr	r2, [pc, #112]	; (800319c <HAL_TIMEx_PWMN_Start+0x154>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00e      	beq.n	800314c <HAL_TIMEx_PWMN_Start+0x104>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a1b      	ldr	r2, [pc, #108]	; (80031a0 <HAL_TIMEx_PWMN_Start+0x158>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d009      	beq.n	800314c <HAL_TIMEx_PWMN_Start+0x104>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a19      	ldr	r2, [pc, #100]	; (80031a4 <HAL_TIMEx_PWMN_Start+0x15c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d004      	beq.n	800314c <HAL_TIMEx_PWMN_Start+0x104>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a18      	ldr	r2, [pc, #96]	; (80031a8 <HAL_TIMEx_PWMN_Start+0x160>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d115      	bne.n	8003178 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	4b16      	ldr	r3, [pc, #88]	; (80031ac <HAL_TIMEx_PWMN_Start+0x164>)
 8003154:	4013      	ands	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b06      	cmp	r3, #6
 800315c:	d015      	beq.n	800318a <HAL_TIMEx_PWMN_Start+0x142>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003164:	d011      	beq.n	800318a <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0201 	orr.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003176:	e008      	b.n	800318a <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	e000      	b.n	800318c <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800318a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40012c00 	.word	0x40012c00
 800319c:	40000400 	.word	0x40000400
 80031a0:	40000800 	.word	0x40000800
 80031a4:	40013400 	.word	0x40013400
 80031a8:	40014000 	.word	0x40014000
 80031ac:	00010007 	.word	0x00010007

080031b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e063      	b.n	8003290 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a2b      	ldr	r2, [pc, #172]	; (800329c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d004      	beq.n	80031fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a2a      	ldr	r2, [pc, #168]	; (80032a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d108      	bne.n	800320e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003202:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003214:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a1b      	ldr	r2, [pc, #108]	; (800329c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d018      	beq.n	8003264 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800323a:	d013      	beq.n	8003264 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a18      	ldr	r2, [pc, #96]	; (80032a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00e      	beq.n	8003264 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a17      	ldr	r2, [pc, #92]	; (80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d009      	beq.n	8003264 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a12      	ldr	r2, [pc, #72]	; (80032a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d004      	beq.n	8003264 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a13      	ldr	r2, [pc, #76]	; (80032ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d10c      	bne.n	800327e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800326a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	4313      	orrs	r3, r2
 8003274:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	40012c00 	.word	0x40012c00
 80032a0:	40013400 	.word	0x40013400
 80032a4:	40000400 	.word	0x40000400
 80032a8:	40000800 	.word	0x40000800
 80032ac:	40014000 	.word	0x40014000

080032b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e065      	b.n	8003398 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4313      	orrs	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	041b      	lsls	r3, r3, #16
 8003342:	4313      	orrs	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a16      	ldr	r2, [pc, #88]	; (80033a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a14      	ldr	r2, [pc, #80]	; (80033a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d115      	bne.n	8003386 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	051b      	lsls	r3, r3, #20
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	4313      	orrs	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	40012c00 	.word	0x40012c00
 80033a8:	40013400 	.word	0x40013400

080033ac <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f003 031f 	and.w	r3, r3, #31
 80033be:	2204      	movs	r2, #4
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a1a      	ldr	r2, [r3, #32]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	401a      	ands	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a1a      	ldr	r2, [r3, #32]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f003 031f 	and.w	r3, r3, #31
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	fa01 f303 	lsl.w	r3, r1, r3
 80033e4:	431a      	orrs	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	621a      	str	r2, [r3, #32]
}
 80033ea:	bf00      	nop
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <memset>:
 80033f6:	4402      	add	r2, r0
 80033f8:	4603      	mov	r3, r0
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d100      	bne.n	8003400 <memset+0xa>
 80033fe:	4770      	bx	lr
 8003400:	f803 1b01 	strb.w	r1, [r3], #1
 8003404:	e7f9      	b.n	80033fa <memset+0x4>
	...

08003408 <__libc_init_array>:
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	4d0d      	ldr	r5, [pc, #52]	; (8003440 <__libc_init_array+0x38>)
 800340c:	4c0d      	ldr	r4, [pc, #52]	; (8003444 <__libc_init_array+0x3c>)
 800340e:	1b64      	subs	r4, r4, r5
 8003410:	10a4      	asrs	r4, r4, #2
 8003412:	2600      	movs	r6, #0
 8003414:	42a6      	cmp	r6, r4
 8003416:	d109      	bne.n	800342c <__libc_init_array+0x24>
 8003418:	4d0b      	ldr	r5, [pc, #44]	; (8003448 <__libc_init_array+0x40>)
 800341a:	4c0c      	ldr	r4, [pc, #48]	; (800344c <__libc_init_array+0x44>)
 800341c:	f000 f818 	bl	8003450 <_init>
 8003420:	1b64      	subs	r4, r4, r5
 8003422:	10a4      	asrs	r4, r4, #2
 8003424:	2600      	movs	r6, #0
 8003426:	42a6      	cmp	r6, r4
 8003428:	d105      	bne.n	8003436 <__libc_init_array+0x2e>
 800342a:	bd70      	pop	{r4, r5, r6, pc}
 800342c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003430:	4798      	blx	r3
 8003432:	3601      	adds	r6, #1
 8003434:	e7ee      	b.n	8003414 <__libc_init_array+0xc>
 8003436:	f855 3b04 	ldr.w	r3, [r5], #4
 800343a:	4798      	blx	r3
 800343c:	3601      	adds	r6, #1
 800343e:	e7f2      	b.n	8003426 <__libc_init_array+0x1e>
 8003440:	080034c8 	.word	0x080034c8
 8003444:	080034c8 	.word	0x080034c8
 8003448:	080034c8 	.word	0x080034c8
 800344c:	080034cc 	.word	0x080034cc

08003450 <_init>:
 8003450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003452:	bf00      	nop
 8003454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003456:	bc08      	pop	{r3}
 8003458:	469e      	mov	lr, r3
 800345a:	4770      	bx	lr

0800345c <_fini>:
 800345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345e:	bf00      	nop
 8003460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003462:	bc08      	pop	{r3}
 8003464:	469e      	mov	lr, r3
 8003466:	4770      	bx	lr
